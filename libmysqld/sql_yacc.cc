
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 19 "sql_yacc.yy"

/* thd is passed as an arg to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200				/* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str={0,0};

#define yyoverflow(A,B,C,D,E,F) {ulong val= (ulong) *(F); if (my_yyoverflow((B), (D), &val)) { yyerror((char*) (A)); return 2; } else { *(F)= (YYSIZE_T)val; }}

#undef 	WARN_DEPRECATED			/* this macro is also defined in mysql_priv.h */
#define WARN_DEPRECATED(A,B)                                        \
  push_warning_printf(((THD *)yythd), MYSQL_ERROR::WARN_LEVEL_WARN, \
		      ER_WARN_DEPRECATED_SYNTAX,                    \
		      ER(ER_WARN_DEPRECATED_SYNTAX), (A), (B));

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->tok_start;
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}


static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}


static bool add_create_index (LEX *lex, 
  Key::Keytype type, const char *name, enum ha_key_alg key_alg,
  bool generated= 0)
{
  Key *key= new Key(type, name, key_alg, generated, lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 189 of yacc.c  */
#line 515 "sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     END_OF_INPUT = 258,
     ABORT_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     ATAN = 277,
     AUTO_INC = 278,
     AVG_ROW_LENGTH = 279,
     AVG_SYM = 280,
     BACKUP_SYM = 281,
     BEFORE_SYM = 282,
     BEGIN_SYM = 283,
     BENCHMARK_SYM = 284,
     BERKELEY_DB_SYM = 285,
     BIGINT = 286,
     BINARY = 287,
     BINLOG_SYM = 288,
     BIN_NUM = 289,
     BIT_AND = 290,
     BIT_OR = 291,
     BIT_SYM = 292,
     BIT_XOR = 293,
     BLOB_SYM = 294,
     BLOCK_SYM = 295,
     BOOLEAN_SYM = 296,
     BOOL_SYM = 297,
     BOTH = 298,
     BTREE_SYM = 299,
     BY = 300,
     BYTE_SYM = 301,
     CACHE_SYM = 302,
     CALL_SYM = 303,
     CASCADE = 304,
     CASCADED = 305,
     CAST_SYM = 306,
     CHAIN_SYM = 307,
     CHANGE = 308,
     CHANGED = 309,
     CHARSET = 310,
     CHAR_SYM = 311,
     CHECKSUM_SYM = 312,
     CHECK_SYM = 313,
     CIPHER_SYM = 314,
     CLIENT_SYM = 315,
     CLOSE_SYM = 316,
     COALESCE = 317,
     CODE_SYM = 318,
     COLLATE_SYM = 319,
     COLLATION_SYM = 320,
     COLUMNS = 321,
     COLUMN_SYM = 322,
     COMMENT_SYM = 323,
     COMMITTED_SYM = 324,
     COMMIT_SYM = 325,
     COMPACT_SYM = 326,
     COMPRESSED_SYM = 327,
     CONCAT = 328,
     CONCAT_WS = 329,
     CONCURRENT = 330,
     CONDITION_SYM = 331,
     CONNECTION_SYM = 332,
     CONSISTENT_SYM = 333,
     CONSTRAINT = 334,
     CONTAINS_SYM = 335,
     CONTEXT_SYM = 336,
     CONTINUE_SYM = 337,
     CONVERT_SYM = 338,
     CONVERT_TZ_SYM = 339,
     COUNT_SYM = 340,
     CPU_SYM = 341,
     CREATE = 342,
     CROSS = 343,
     CUBE_SYM = 344,
     CURDATE = 345,
     CURRENT_USER = 346,
     CURSOR_SYM = 347,
     CURTIME = 348,
     DATABASE = 349,
     DATABASES = 350,
     DATA_SYM = 351,
     DATETIME = 352,
     DATE_ADD_INTERVAL = 353,
     DATE_SUB_INTERVAL = 354,
     DATE_SYM = 355,
     DAY_HOUR_SYM = 356,
     DAY_MICROSECOND_SYM = 357,
     DAY_MINUTE_SYM = 358,
     DAY_SECOND_SYM = 359,
     DAY_SYM = 360,
     DEALLOCATE_SYM = 361,
     DECIMAL_NUM = 362,
     DECIMAL_SYM = 363,
     DECLARE_SYM = 364,
     DECODE_SYM = 365,
     DEFAULT = 366,
     DEFINER_SYM = 367,
     DELAYED_SYM = 368,
     DELAY_KEY_WRITE_SYM = 369,
     DELETE_SYM = 370,
     DESC = 371,
     DESCRIBE = 372,
     DES_DECRYPT_SYM = 373,
     DES_ENCRYPT_SYM = 374,
     DES_KEY_FILE = 375,
     DETERMINISTIC_SYM = 376,
     DIRECTORY_SYM = 377,
     DISABLE_SYM = 378,
     DISCARD = 379,
     DISTINCT = 380,
     DIV_SYM = 381,
     DOUBLE_SYM = 382,
     DO_SYM = 383,
     DROP = 384,
     DUAL_SYM = 385,
     DUMPFILE = 386,
     DUPLICATE_SYM = 387,
     DYNAMIC_SYM = 388,
     EACH_SYM = 389,
     ELSEIF_SYM = 390,
     ELT_FUNC = 391,
     ENABLE_SYM = 392,
     ENCLOSED = 393,
     ENCODE_SYM = 394,
     ENCRYPT = 395,
     END = 396,
     ENGINES_SYM = 397,
     ENGINE_SYM = 398,
     ENUM = 399,
     EQ = 400,
     EQUAL_SYM = 401,
     ERRORS = 402,
     ESCAPED = 403,
     ESCAPE_SYM = 404,
     EVENTS_SYM = 405,
     EXECUTE_SYM = 406,
     EXISTS = 407,
     EXIT_SYM = 408,
     EXPANSION_SYM = 409,
     EXPORT_SET = 410,
     EXTENDED_SYM = 411,
     EXTRACT_SYM = 412,
     FALSE_SYM = 413,
     FAST_SYM = 414,
     FAULTS_SYM = 415,
     FETCH_SYM = 416,
     FIELD_FUNC = 417,
     FILE_SYM = 418,
     FIRST_SYM = 419,
     FIXED_SYM = 420,
     FLOAT_NUM = 421,
     FLOAT_SYM = 422,
     FLUSH_SYM = 423,
     FORCE_SYM = 424,
     FOREIGN = 425,
     FORMAT_SYM = 426,
     FOR_SYM = 427,
     FOUND_SYM = 428,
     FRAC_SECOND_SYM = 429,
     FROM = 430,
     FROM_UNIXTIME = 431,
     FULL = 432,
     FULLTEXT_SYM = 433,
     FUNCTION_SYM = 434,
     FUNC_ARG0 = 435,
     FUNC_ARG1 = 436,
     FUNC_ARG2 = 437,
     FUNC_ARG3 = 438,
     GE = 439,
     GEOMCOLLFROMTEXT = 440,
     GEOMETRYCOLLECTION = 441,
     GEOMETRY_SYM = 442,
     GEOMFROMTEXT = 443,
     GEOMFROMWKB = 444,
     GET_FORMAT = 445,
     GLOBAL_SYM = 446,
     GRANT = 447,
     GRANTS = 448,
     GREATEST_SYM = 449,
     GROUP = 450,
     GROUP_CONCAT_SYM = 451,
     GROUP_UNIQUE_USERS = 452,
     GT_SYM = 453,
     HANDLER_SYM = 454,
     HASH_SYM = 455,
     HAVING = 456,
     HELP_SYM = 457,
     HEX_NUM = 458,
     HIGH_PRIORITY = 459,
     HOSTS_SYM = 460,
     HOUR_MICROSECOND_SYM = 461,
     HOUR_MINUTE_SYM = 462,
     HOUR_SECOND_SYM = 463,
     HOUR_SYM = 464,
     IDENT = 465,
     IDENTIFIED_SYM = 466,
     IDENT_QUOTED = 467,
     IF = 468,
     IGNORE_SYM = 469,
     IMPORT = 470,
     INDEXES = 471,
     INDEX_SYM = 472,
     INFILE = 473,
     INNER_SYM = 474,
     INNOBASE_SYM = 475,
     INOUT_SYM = 476,
     INSENSITIVE_SYM = 477,
     INSERT = 478,
     INSERT_METHOD = 479,
     INTERVAL_SYM = 480,
     INTO = 481,
     INT_SYM = 482,
     INVOKER_SYM = 483,
     IN_SYM = 484,
     IO_SYM = 485,
     IPC_SYM = 486,
     IS = 487,
     ISOLATION = 488,
     ISSUER_SYM = 489,
     ITERATE_SYM = 490,
     JOIN_SYM = 491,
     KEYS = 492,
     KEY_SYM = 493,
     KILL_SYM = 494,
     LABEL_SYM = 495,
     LANGUAGE_SYM = 496,
     LAST_INSERT_ID = 497,
     LAST_SYM = 498,
     LE = 499,
     LEADING = 500,
     LEAST_SYM = 501,
     LEAVES = 502,
     LEAVE_SYM = 503,
     LEFT = 504,
     LEVEL_SYM = 505,
     LEX_HOSTNAME = 506,
     LIKE = 507,
     LIMIT = 508,
     LINEFROMTEXT = 509,
     LINES = 510,
     LINESTRING = 511,
     LOAD = 512,
     LOCAL_SYM = 513,
     LOCATE = 514,
     LOCATOR_SYM = 515,
     LOCKS_SYM = 516,
     LOCK_SYM = 517,
     LOGS_SYM = 518,
     LOG_SYM = 519,
     LONGBLOB = 520,
     LONGTEXT = 521,
     LONG_NUM = 522,
     LONG_SYM = 523,
     LOOP_SYM = 524,
     LOW_PRIORITY = 525,
     LT = 526,
     MAKE_SET_SYM = 527,
     MASTER_CONNECT_RETRY_SYM = 528,
     MASTER_HOST_SYM = 529,
     MASTER_LOG_FILE_SYM = 530,
     MASTER_LOG_POS_SYM = 531,
     MASTER_PASSWORD_SYM = 532,
     MASTER_PORT_SYM = 533,
     MASTER_POS_WAIT = 534,
     MASTER_SERVER_ID_SYM = 535,
     MASTER_SSL_CAPATH_SYM = 536,
     MASTER_SSL_CA_SYM = 537,
     MASTER_SSL_CERT_SYM = 538,
     MASTER_SSL_CIPHER_SYM = 539,
     MASTER_SSL_KEY_SYM = 540,
     MASTER_SSL_SYM = 541,
     MASTER_SYM = 542,
     MASTER_USER_SYM = 543,
     MATCH = 544,
     MAX_CONNECTIONS_PER_HOUR = 545,
     MAX_QUERIES_PER_HOUR = 546,
     MAX_ROWS = 547,
     MAX_SYM = 548,
     MAX_UPDATES_PER_HOUR = 549,
     MAX_USER_CONNECTIONS_SYM = 550,
     MEDIUMBLOB = 551,
     MEDIUMINT = 552,
     MEDIUMTEXT = 553,
     MEDIUM_SYM = 554,
     MEMORY_SYM = 555,
     MERGE_SYM = 556,
     MICROSECOND_SYM = 557,
     MIGRATE_SYM = 558,
     MINUTE_MICROSECOND_SYM = 559,
     MINUTE_SECOND_SYM = 560,
     MINUTE_SYM = 561,
     MIN_ROWS = 562,
     MIN_SYM = 563,
     MLINEFROMTEXT = 564,
     MODE_SYM = 565,
     MODIFIES_SYM = 566,
     MODIFY_SYM = 567,
     MOD_SYM = 568,
     MONTH_SYM = 569,
     MPOINTFROMTEXT = 570,
     MPOLYFROMTEXT = 571,
     MULTILINESTRING = 572,
     MULTIPOINT = 573,
     MULTIPOLYGON = 574,
     MUTEX_SYM = 575,
     NAMES_SYM = 576,
     NAME_SYM = 577,
     NATIONAL_SYM = 578,
     NATURAL = 579,
     NCHAR_STRING = 580,
     NCHAR_SYM = 581,
     NDBCLUSTER_SYM = 582,
     NE = 583,
     NEW_SYM = 584,
     NEXT_SYM = 585,
     NONE_SYM = 586,
     NOT2_SYM = 587,
     NOT_SYM = 588,
     NOW_SYM = 589,
     NO_SYM = 590,
     NO_WRITE_TO_BINLOG = 591,
     NULL_SYM = 592,
     NUM = 593,
     NUMERIC_SYM = 594,
     NVARCHAR_SYM = 595,
     OFFSET_SYM = 596,
     OJ_SYM = 597,
     OLD_PASSWORD = 598,
     ON = 599,
     ONE_SHOT_SYM = 600,
     ONE_SYM = 601,
     OPEN_SYM = 602,
     OPTIMIZE = 603,
     OPTION = 604,
     OPTIONALLY = 605,
     OR2_SYM = 606,
     ORDER_SYM = 607,
     OR_OR_SYM = 608,
     OR_SYM = 609,
     OUTER = 610,
     OUTFILE = 611,
     OUT_SYM = 612,
     PACK_KEYS_SYM = 613,
     PAGE_SYM = 614,
     PARTIAL = 615,
     PASSWORD = 616,
     PARAM_MARKER = 617,
     PHASE_SYM = 618,
     POINTFROMTEXT = 619,
     POINT_SYM = 620,
     POLYFROMTEXT = 621,
     POLYGON = 622,
     POSITION_SYM = 623,
     PRECISION = 624,
     PREPARE_SYM = 625,
     PREV_SYM = 626,
     PRIMARY_SYM = 627,
     PRIVILEGES = 628,
     PROCEDURE = 629,
     PROCESS = 630,
     PROCESSLIST_SYM = 631,
     PROFILE_SYM = 632,
     PROFILES_SYM = 633,
     PURGE = 634,
     QUARTER_SYM = 635,
     QUERY_SYM = 636,
     QUICK = 637,
     RAID_0_SYM = 638,
     RAID_CHUNKS = 639,
     RAID_CHUNKSIZE = 640,
     RAID_STRIPED_SYM = 641,
     RAID_TYPE = 642,
     RAND = 643,
     READS_SYM = 644,
     READ_SYM = 645,
     REAL = 646,
     RECOVER_SYM = 647,
     REDUNDANT_SYM = 648,
     REFERENCES = 649,
     REGEXP = 650,
     RELAY_LOG_FILE_SYM = 651,
     RELAY_LOG_POS_SYM = 652,
     RELAY_THREAD = 653,
     RELEASE_SYM = 654,
     RELOAD = 655,
     RENAME = 656,
     REPAIR = 657,
     REPEATABLE_SYM = 658,
     REPEAT_SYM = 659,
     REPLACE = 660,
     REPLICATION = 661,
     REQUIRE_SYM = 662,
     RESET_SYM = 663,
     RESOURCES = 664,
     RESTORE_SYM = 665,
     RESTRICT = 666,
     RESUME_SYM = 667,
     RETURNS_SYM = 668,
     RETURN_SYM = 669,
     REVOKE = 670,
     RIGHT = 671,
     ROLLBACK_SYM = 672,
     ROLLUP_SYM = 673,
     ROUND = 674,
     ROUTINE_SYM = 675,
     ROWS_SYM = 676,
     ROW_COUNT_SYM = 677,
     ROW_FORMAT_SYM = 678,
     ROW_SYM = 679,
     RTREE_SYM = 680,
     SAVEPOINT_SYM = 681,
     SECOND_MICROSECOND_SYM = 682,
     SECOND_SYM = 683,
     SECURITY_SYM = 684,
     SELECT_SYM = 685,
     SENSITIVE_SYM = 686,
     SEPARATOR_SYM = 687,
     SERIALIZABLE_SYM = 688,
     SERIAL_SYM = 689,
     SESSION_SYM = 690,
     SET = 691,
     SET_VAR = 692,
     SHARE_SYM = 693,
     SHIFT_LEFT = 694,
     SHIFT_RIGHT = 695,
     SHOW = 696,
     SHUTDOWN = 697,
     SIGNED_SYM = 698,
     SIMPLE_SYM = 699,
     SLAVE = 700,
     SMALLINT = 701,
     SNAPSHOT_SYM = 702,
     SOUNDS_SYM = 703,
     SOURCE_SYM = 704,
     SPATIAL_SYM = 705,
     SPECIFIC_SYM = 706,
     SQLEXCEPTION_SYM = 707,
     SQLSTATE_SYM = 708,
     SQLWARNING_SYM = 709,
     SQL_BIG_RESULT = 710,
     SQL_BUFFER_RESULT = 711,
     SQL_CACHE_SYM = 712,
     SQL_CALC_FOUND_ROWS = 713,
     SQL_NO_CACHE_SYM = 714,
     SQL_SMALL_RESULT = 715,
     SQL_SYM = 716,
     SQL_THREAD = 717,
     SSL_SYM = 718,
     STARTING = 719,
     START_SYM = 720,
     STATUS_SYM = 721,
     STD_SYM = 722,
     STDDEV_SAMP_SYM = 723,
     STOP_SYM = 724,
     STORAGE_SYM = 725,
     STRAIGHT_JOIN = 726,
     STRING_SYM = 727,
     SUBDATE_SYM = 728,
     SUBJECT_SYM = 729,
     SUBSTRING = 730,
     SUBSTRING_INDEX = 731,
     SUM_SYM = 732,
     SUPER_SYM = 733,
     SUSPEND_SYM = 734,
     SWAPS_SYM = 735,
     SWITCHES_SYM = 736,
     SYSDATE = 737,
     TABLES = 738,
     TABLESPACE = 739,
     TABLE_SYM = 740,
     TEMPORARY = 741,
     TEMPTABLE_SYM = 742,
     TERMINATED = 743,
     TEXT_STRING = 744,
     TEXT_SYM = 745,
     TIMESTAMP = 746,
     TIMESTAMP_ADD = 747,
     TIMESTAMP_DIFF = 748,
     TIME_SYM = 749,
     TINYBLOB = 750,
     TINYINT = 751,
     TINYTEXT = 752,
     TO_SYM = 753,
     TRAILING = 754,
     TRANSACTION_SYM = 755,
     TRIGGER_SYM = 756,
     TRIGGERS_SYM = 757,
     TRIM = 758,
     TRUE_SYM = 759,
     TRUNCATE_SYM = 760,
     TYPES_SYM = 761,
     TYPE_SYM = 762,
     UDF_RETURNS_SYM = 763,
     UDF_SONAME_SYM = 764,
     ULONGLONG_NUM = 765,
     UNCOMMITTED_SYM = 766,
     UNDEFINED_SYM = 767,
     UNDERSCORE_CHARSET = 768,
     UNDO_SYM = 769,
     UNICODE_SYM = 770,
     UNION_SYM = 771,
     UNIQUE_SYM = 772,
     UNIQUE_USERS = 773,
     UNIX_TIMESTAMP = 774,
     UNKNOWN_SYM = 775,
     UNLOCK_SYM = 776,
     UNSIGNED = 777,
     UNTIL_SYM = 778,
     UPDATE_SYM = 779,
     UPGRADE_SYM = 780,
     USAGE = 781,
     USER = 782,
     USE_FRM = 783,
     USE_SYM = 784,
     USING = 785,
     UTC_DATE_SYM = 786,
     UTC_TIMESTAMP_SYM = 787,
     UTC_TIME_SYM = 788,
     VAR_SAMP_SYM = 789,
     VALUES = 790,
     VALUE_SYM = 791,
     VARBINARY = 792,
     VARCHAR = 793,
     VARIABLES = 794,
     VARIANCE_SYM = 795,
     VARYING = 796,
     VIEW_SYM = 797,
     WARNINGS = 798,
     WEEK_SYM = 799,
     WHEN_SYM = 800,
     WHERE = 801,
     WHILE_SYM = 802,
     WITH = 803,
     WORK_SYM = 804,
     WRITE_SYM = 805,
     X509_SYM = 806,
     XA_SYM = 807,
     XOR = 808,
     YEARWEEK = 809,
     YEAR_MONTH_SYM = 810,
     YEAR_SYM = 811,
     ZEROFILL = 812,
     TABLE_REF_PRIORITY = 813,
     ELSE = 814,
     THEN_SYM = 815,
     CASE_SYM = 816,
     BETWEEN_SYM = 817,
     NEG = 818
   };
#endif
/* Tokens.  */
#define END_OF_INPUT 258
#define ABORT_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define ATAN 277
#define AUTO_INC 278
#define AVG_ROW_LENGTH 279
#define AVG_SYM 280
#define BACKUP_SYM 281
#define BEFORE_SYM 282
#define BEGIN_SYM 283
#define BENCHMARK_SYM 284
#define BERKELEY_DB_SYM 285
#define BIGINT 286
#define BINARY 287
#define BINLOG_SYM 288
#define BIN_NUM 289
#define BIT_AND 290
#define BIT_OR 291
#define BIT_SYM 292
#define BIT_XOR 293
#define BLOB_SYM 294
#define BLOCK_SYM 295
#define BOOLEAN_SYM 296
#define BOOL_SYM 297
#define BOTH 298
#define BTREE_SYM 299
#define BY 300
#define BYTE_SYM 301
#define CACHE_SYM 302
#define CALL_SYM 303
#define CASCADE 304
#define CASCADED 305
#define CAST_SYM 306
#define CHAIN_SYM 307
#define CHANGE 308
#define CHANGED 309
#define CHARSET 310
#define CHAR_SYM 311
#define CHECKSUM_SYM 312
#define CHECK_SYM 313
#define CIPHER_SYM 314
#define CLIENT_SYM 315
#define CLOSE_SYM 316
#define COALESCE 317
#define CODE_SYM 318
#define COLLATE_SYM 319
#define COLLATION_SYM 320
#define COLUMNS 321
#define COLUMN_SYM 322
#define COMMENT_SYM 323
#define COMMITTED_SYM 324
#define COMMIT_SYM 325
#define COMPACT_SYM 326
#define COMPRESSED_SYM 327
#define CONCAT 328
#define CONCAT_WS 329
#define CONCURRENT 330
#define CONDITION_SYM 331
#define CONNECTION_SYM 332
#define CONSISTENT_SYM 333
#define CONSTRAINT 334
#define CONTAINS_SYM 335
#define CONTEXT_SYM 336
#define CONTINUE_SYM 337
#define CONVERT_SYM 338
#define CONVERT_TZ_SYM 339
#define COUNT_SYM 340
#define CPU_SYM 341
#define CREATE 342
#define CROSS 343
#define CUBE_SYM 344
#define CURDATE 345
#define CURRENT_USER 346
#define CURSOR_SYM 347
#define CURTIME 348
#define DATABASE 349
#define DATABASES 350
#define DATA_SYM 351
#define DATETIME 352
#define DATE_ADD_INTERVAL 353
#define DATE_SUB_INTERVAL 354
#define DATE_SYM 355
#define DAY_HOUR_SYM 356
#define DAY_MICROSECOND_SYM 357
#define DAY_MINUTE_SYM 358
#define DAY_SECOND_SYM 359
#define DAY_SYM 360
#define DEALLOCATE_SYM 361
#define DECIMAL_NUM 362
#define DECIMAL_SYM 363
#define DECLARE_SYM 364
#define DECODE_SYM 365
#define DEFAULT 366
#define DEFINER_SYM 367
#define DELAYED_SYM 368
#define DELAY_KEY_WRITE_SYM 369
#define DELETE_SYM 370
#define DESC 371
#define DESCRIBE 372
#define DES_DECRYPT_SYM 373
#define DES_ENCRYPT_SYM 374
#define DES_KEY_FILE 375
#define DETERMINISTIC_SYM 376
#define DIRECTORY_SYM 377
#define DISABLE_SYM 378
#define DISCARD 379
#define DISTINCT 380
#define DIV_SYM 381
#define DOUBLE_SYM 382
#define DO_SYM 383
#define DROP 384
#define DUAL_SYM 385
#define DUMPFILE 386
#define DUPLICATE_SYM 387
#define DYNAMIC_SYM 388
#define EACH_SYM 389
#define ELSEIF_SYM 390
#define ELT_FUNC 391
#define ENABLE_SYM 392
#define ENCLOSED 393
#define ENCODE_SYM 394
#define ENCRYPT 395
#define END 396
#define ENGINES_SYM 397
#define ENGINE_SYM 398
#define ENUM 399
#define EQ 400
#define EQUAL_SYM 401
#define ERRORS 402
#define ESCAPED 403
#define ESCAPE_SYM 404
#define EVENTS_SYM 405
#define EXECUTE_SYM 406
#define EXISTS 407
#define EXIT_SYM 408
#define EXPANSION_SYM 409
#define EXPORT_SET 410
#define EXTENDED_SYM 411
#define EXTRACT_SYM 412
#define FALSE_SYM 413
#define FAST_SYM 414
#define FAULTS_SYM 415
#define FETCH_SYM 416
#define FIELD_FUNC 417
#define FILE_SYM 418
#define FIRST_SYM 419
#define FIXED_SYM 420
#define FLOAT_NUM 421
#define FLOAT_SYM 422
#define FLUSH_SYM 423
#define FORCE_SYM 424
#define FOREIGN 425
#define FORMAT_SYM 426
#define FOR_SYM 427
#define FOUND_SYM 428
#define FRAC_SECOND_SYM 429
#define FROM 430
#define FROM_UNIXTIME 431
#define FULL 432
#define FULLTEXT_SYM 433
#define FUNCTION_SYM 434
#define FUNC_ARG0 435
#define FUNC_ARG1 436
#define FUNC_ARG2 437
#define FUNC_ARG3 438
#define GE 439
#define GEOMCOLLFROMTEXT 440
#define GEOMETRYCOLLECTION 441
#define GEOMETRY_SYM 442
#define GEOMFROMTEXT 443
#define GEOMFROMWKB 444
#define GET_FORMAT 445
#define GLOBAL_SYM 446
#define GRANT 447
#define GRANTS 448
#define GREATEST_SYM 449
#define GROUP 450
#define GROUP_CONCAT_SYM 451
#define GROUP_UNIQUE_USERS 452
#define GT_SYM 453
#define HANDLER_SYM 454
#define HASH_SYM 455
#define HAVING 456
#define HELP_SYM 457
#define HEX_NUM 458
#define HIGH_PRIORITY 459
#define HOSTS_SYM 460
#define HOUR_MICROSECOND_SYM 461
#define HOUR_MINUTE_SYM 462
#define HOUR_SECOND_SYM 463
#define HOUR_SYM 464
#define IDENT 465
#define IDENTIFIED_SYM 466
#define IDENT_QUOTED 467
#define IF 468
#define IGNORE_SYM 469
#define IMPORT 470
#define INDEXES 471
#define INDEX_SYM 472
#define INFILE 473
#define INNER_SYM 474
#define INNOBASE_SYM 475
#define INOUT_SYM 476
#define INSENSITIVE_SYM 477
#define INSERT 478
#define INSERT_METHOD 479
#define INTERVAL_SYM 480
#define INTO 481
#define INT_SYM 482
#define INVOKER_SYM 483
#define IN_SYM 484
#define IO_SYM 485
#define IPC_SYM 486
#define IS 487
#define ISOLATION 488
#define ISSUER_SYM 489
#define ITERATE_SYM 490
#define JOIN_SYM 491
#define KEYS 492
#define KEY_SYM 493
#define KILL_SYM 494
#define LABEL_SYM 495
#define LANGUAGE_SYM 496
#define LAST_INSERT_ID 497
#define LAST_SYM 498
#define LE 499
#define LEADING 500
#define LEAST_SYM 501
#define LEAVES 502
#define LEAVE_SYM 503
#define LEFT 504
#define LEVEL_SYM 505
#define LEX_HOSTNAME 506
#define LIKE 507
#define LIMIT 508
#define LINEFROMTEXT 509
#define LINES 510
#define LINESTRING 511
#define LOAD 512
#define LOCAL_SYM 513
#define LOCATE 514
#define LOCATOR_SYM 515
#define LOCKS_SYM 516
#define LOCK_SYM 517
#define LOGS_SYM 518
#define LOG_SYM 519
#define LONGBLOB 520
#define LONGTEXT 521
#define LONG_NUM 522
#define LONG_SYM 523
#define LOOP_SYM 524
#define LOW_PRIORITY 525
#define LT 526
#define MAKE_SET_SYM 527
#define MASTER_CONNECT_RETRY_SYM 528
#define MASTER_HOST_SYM 529
#define MASTER_LOG_FILE_SYM 530
#define MASTER_LOG_POS_SYM 531
#define MASTER_PASSWORD_SYM 532
#define MASTER_PORT_SYM 533
#define MASTER_POS_WAIT 534
#define MASTER_SERVER_ID_SYM 535
#define MASTER_SSL_CAPATH_SYM 536
#define MASTER_SSL_CA_SYM 537
#define MASTER_SSL_CERT_SYM 538
#define MASTER_SSL_CIPHER_SYM 539
#define MASTER_SSL_KEY_SYM 540
#define MASTER_SSL_SYM 541
#define MASTER_SYM 542
#define MASTER_USER_SYM 543
#define MATCH 544
#define MAX_CONNECTIONS_PER_HOUR 545
#define MAX_QUERIES_PER_HOUR 546
#define MAX_ROWS 547
#define MAX_SYM 548
#define MAX_UPDATES_PER_HOUR 549
#define MAX_USER_CONNECTIONS_SYM 550
#define MEDIUMBLOB 551
#define MEDIUMINT 552
#define MEDIUMTEXT 553
#define MEDIUM_SYM 554
#define MEMORY_SYM 555
#define MERGE_SYM 556
#define MICROSECOND_SYM 557
#define MIGRATE_SYM 558
#define MINUTE_MICROSECOND_SYM 559
#define MINUTE_SECOND_SYM 560
#define MINUTE_SYM 561
#define MIN_ROWS 562
#define MIN_SYM 563
#define MLINEFROMTEXT 564
#define MODE_SYM 565
#define MODIFIES_SYM 566
#define MODIFY_SYM 567
#define MOD_SYM 568
#define MONTH_SYM 569
#define MPOINTFROMTEXT 570
#define MPOLYFROMTEXT 571
#define MULTILINESTRING 572
#define MULTIPOINT 573
#define MULTIPOLYGON 574
#define MUTEX_SYM 575
#define NAMES_SYM 576
#define NAME_SYM 577
#define NATIONAL_SYM 578
#define NATURAL 579
#define NCHAR_STRING 580
#define NCHAR_SYM 581
#define NDBCLUSTER_SYM 582
#define NE 583
#define NEW_SYM 584
#define NEXT_SYM 585
#define NONE_SYM 586
#define NOT2_SYM 587
#define NOT_SYM 588
#define NOW_SYM 589
#define NO_SYM 590
#define NO_WRITE_TO_BINLOG 591
#define NULL_SYM 592
#define NUM 593
#define NUMERIC_SYM 594
#define NVARCHAR_SYM 595
#define OFFSET_SYM 596
#define OJ_SYM 597
#define OLD_PASSWORD 598
#define ON 599
#define ONE_SHOT_SYM 600
#define ONE_SYM 601
#define OPEN_SYM 602
#define OPTIMIZE 603
#define OPTION 604
#define OPTIONALLY 605
#define OR2_SYM 606
#define ORDER_SYM 607
#define OR_OR_SYM 608
#define OR_SYM 609
#define OUTER 610
#define OUTFILE 611
#define OUT_SYM 612
#define PACK_KEYS_SYM 613
#define PAGE_SYM 614
#define PARTIAL 615
#define PASSWORD 616
#define PARAM_MARKER 617
#define PHASE_SYM 618
#define POINTFROMTEXT 619
#define POINT_SYM 620
#define POLYFROMTEXT 621
#define POLYGON 622
#define POSITION_SYM 623
#define PRECISION 624
#define PREPARE_SYM 625
#define PREV_SYM 626
#define PRIMARY_SYM 627
#define PRIVILEGES 628
#define PROCEDURE 629
#define PROCESS 630
#define PROCESSLIST_SYM 631
#define PROFILE_SYM 632
#define PROFILES_SYM 633
#define PURGE 634
#define QUARTER_SYM 635
#define QUERY_SYM 636
#define QUICK 637
#define RAID_0_SYM 638
#define RAID_CHUNKS 639
#define RAID_CHUNKSIZE 640
#define RAID_STRIPED_SYM 641
#define RAID_TYPE 642
#define RAND 643
#define READS_SYM 644
#define READ_SYM 645
#define REAL 646
#define RECOVER_SYM 647
#define REDUNDANT_SYM 648
#define REFERENCES 649
#define REGEXP 650
#define RELAY_LOG_FILE_SYM 651
#define RELAY_LOG_POS_SYM 652
#define RELAY_THREAD 653
#define RELEASE_SYM 654
#define RELOAD 655
#define RENAME 656
#define REPAIR 657
#define REPEATABLE_SYM 658
#define REPEAT_SYM 659
#define REPLACE 660
#define REPLICATION 661
#define REQUIRE_SYM 662
#define RESET_SYM 663
#define RESOURCES 664
#define RESTORE_SYM 665
#define RESTRICT 666
#define RESUME_SYM 667
#define RETURNS_SYM 668
#define RETURN_SYM 669
#define REVOKE 670
#define RIGHT 671
#define ROLLBACK_SYM 672
#define ROLLUP_SYM 673
#define ROUND 674
#define ROUTINE_SYM 675
#define ROWS_SYM 676
#define ROW_COUNT_SYM 677
#define ROW_FORMAT_SYM 678
#define ROW_SYM 679
#define RTREE_SYM 680
#define SAVEPOINT_SYM 681
#define SECOND_MICROSECOND_SYM 682
#define SECOND_SYM 683
#define SECURITY_SYM 684
#define SELECT_SYM 685
#define SENSITIVE_SYM 686
#define SEPARATOR_SYM 687
#define SERIALIZABLE_SYM 688
#define SERIAL_SYM 689
#define SESSION_SYM 690
#define SET 691
#define SET_VAR 692
#define SHARE_SYM 693
#define SHIFT_LEFT 694
#define SHIFT_RIGHT 695
#define SHOW 696
#define SHUTDOWN 697
#define SIGNED_SYM 698
#define SIMPLE_SYM 699
#define SLAVE 700
#define SMALLINT 701
#define SNAPSHOT_SYM 702
#define SOUNDS_SYM 703
#define SOURCE_SYM 704
#define SPATIAL_SYM 705
#define SPECIFIC_SYM 706
#define SQLEXCEPTION_SYM 707
#define SQLSTATE_SYM 708
#define SQLWARNING_SYM 709
#define SQL_BIG_RESULT 710
#define SQL_BUFFER_RESULT 711
#define SQL_CACHE_SYM 712
#define SQL_CALC_FOUND_ROWS 713
#define SQL_NO_CACHE_SYM 714
#define SQL_SMALL_RESULT 715
#define SQL_SYM 716
#define SQL_THREAD 717
#define SSL_SYM 718
#define STARTING 719
#define START_SYM 720
#define STATUS_SYM 721
#define STD_SYM 722
#define STDDEV_SAMP_SYM 723
#define STOP_SYM 724
#define STORAGE_SYM 725
#define STRAIGHT_JOIN 726
#define STRING_SYM 727
#define SUBDATE_SYM 728
#define SUBJECT_SYM 729
#define SUBSTRING 730
#define SUBSTRING_INDEX 731
#define SUM_SYM 732
#define SUPER_SYM 733
#define SUSPEND_SYM 734
#define SWAPS_SYM 735
#define SWITCHES_SYM 736
#define SYSDATE 737
#define TABLES 738
#define TABLESPACE 739
#define TABLE_SYM 740
#define TEMPORARY 741
#define TEMPTABLE_SYM 742
#define TERMINATED 743
#define TEXT_STRING 744
#define TEXT_SYM 745
#define TIMESTAMP 746
#define TIMESTAMP_ADD 747
#define TIMESTAMP_DIFF 748
#define TIME_SYM 749
#define TINYBLOB 750
#define TINYINT 751
#define TINYTEXT 752
#define TO_SYM 753
#define TRAILING 754
#define TRANSACTION_SYM 755
#define TRIGGER_SYM 756
#define TRIGGERS_SYM 757
#define TRIM 758
#define TRUE_SYM 759
#define TRUNCATE_SYM 760
#define TYPES_SYM 761
#define TYPE_SYM 762
#define UDF_RETURNS_SYM 763
#define UDF_SONAME_SYM 764
#define ULONGLONG_NUM 765
#define UNCOMMITTED_SYM 766
#define UNDEFINED_SYM 767
#define UNDERSCORE_CHARSET 768
#define UNDO_SYM 769
#define UNICODE_SYM 770
#define UNION_SYM 771
#define UNIQUE_SYM 772
#define UNIQUE_USERS 773
#define UNIX_TIMESTAMP 774
#define UNKNOWN_SYM 775
#define UNLOCK_SYM 776
#define UNSIGNED 777
#define UNTIL_SYM 778
#define UPDATE_SYM 779
#define UPGRADE_SYM 780
#define USAGE 781
#define USER 782
#define USE_FRM 783
#define USE_SYM 784
#define USING 785
#define UTC_DATE_SYM 786
#define UTC_TIMESTAMP_SYM 787
#define UTC_TIME_SYM 788
#define VAR_SAMP_SYM 789
#define VALUES 790
#define VALUE_SYM 791
#define VARBINARY 792
#define VARCHAR 793
#define VARIABLES 794
#define VARIANCE_SYM 795
#define VARYING 796
#define VIEW_SYM 797
#define WARNINGS 798
#define WEEK_SYM 799
#define WHEN_SYM 800
#define WHERE 801
#define WHILE_SYM 802
#define WITH 803
#define WORK_SYM 804
#define WRITE_SYM 805
#define X509_SYM 806
#define XA_SYM 807
#define XOR 808
#define YEARWEEK 809
#define YEAR_MONTH_SYM 810
#define YEAR_SYM 811
#define ZEROFILL 812
#define TABLE_REF_PRIORITY 813
#define ELSE 814
#define THEN_SYM 815
#define CASE_SYM 816
#define BETWEEN_SYM 817
#define NEG 818




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 451 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  enum db_type db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;



/* Line 214 of yacc.c  */
#line 1719 "sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 491 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 1736 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  473
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   44782

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  583
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  679
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2068
/* YYNRULES -- Number of states.  */
#define YYNSTATES  3734

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   818

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   576,     2,     2,     2,   569,   564,     2,
     573,   574,   567,   566,   575,   565,   581,   568,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   582,   579,
       2,     2,     2,     2,   580,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   570,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   577,   563,   578,   571,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   572
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   119,   121,
     123,   128,   130,   133,   134,   139,   140,   143,   147,   149,
     152,   153,   157,   158,   164,   166,   170,   174,   178,   182,
     186,   190,   194,   198,   202,   206,   210,   214,   216,   220,
     224,   228,   232,   233,   241,   242,   254,   255,   266,   267,
     274,   275,   279,   284,   285,   289,   291,   292,   295,   296,
     299,   302,   305,   308,   311,   315,   319,   321,   323,   325,
     328,   332,   336,   337,   342,   343,   347,   348,   350,   354,
     356,   357,   359,   363,   365,   366,   370,   371,   373,   377,
     379,   384,   385,   387,   389,   391,   392,   396,   399,   403,
     404,   408,   409,   415,   421,   422,   430,   436,   437,   440,
     442,   444,   446,   450,   452,   454,   458,   459,   461,   463,
     465,   467,   470,   472,   474,   478,   479,   482,   483,   486,
     487,   491,   492,   498,   500,   502,   503,   506,   508,   510,
     513,   516,   519,   520,   527,   530,   531,   534,   536,   538,
     542,   543,   544,   545,   553,   554,   557,   560,   562,   564,
     565,   566,   575,   576,   583,   585,   588,   590,   593,   594,
     595,   602,   603,   604,   611,   612,   615,   616,   622,   623,
     625,   626,   632,   633,   636,   637,   643,   648,   649,   650,
     659,   660,   668,   670,   672,   674,   676,   678,   681,   684,
     687,   692,   697,   698,   703,   704,   705,   711,   712,   720,
     721,   722,   729,   730,   732,   733,   735,   737,   740,   742,
     744,   745,   747,   749,   752,   754,   755,   759,   760,   762,
     764,   767,   769,   772,   776,   780,   784,   788,   792,   796,
     800,   804,   808,   812,   816,   820,   824,   828,   832,   836,
     840,   846,   848,   850,   854,   859,   864,   868,   873,   878,
     880,   882,   884,   886,   888,   890,   892,   894,   896,   898,
     900,   902,   904,   906,   909,   911,   913,   915,   917,   919,
     923,   925,   927,   930,   933,   941,   947,   956,   965,   968,
     971,   972,   974,   977,   978,   980,   983,   984,   989,   993,
     997,  1001,  1003,  1006,  1008,  1010,  1014,  1017,  1021,  1024,
    1027,  1029,  1033,  1037,  1040,  1044,  1046,  1048,  1051,  1053,
    1055,  1058,  1060,  1062,  1064,  1067,  1071,  1074,  1078,  1081,
    1084,  1088,  1092,  1096,  1097,  1104,  1105,  1112,  1115,  1117,
    1119,  1121,  1123,  1125,  1127,  1129,  1131,  1133,  1135,  1137,
    1140,  1143,  1145,  1148,  1150,  1153,  1157,  1160,  1162,  1164,
    1166,  1168,  1170,  1172,  1174,  1177,  1178,  1180,  1182,  1188,
    1189,  1191,  1194,  1196,  1198,  1200,  1202,  1203,  1205,  1209,
    1213,  1217,  1221,  1222,  1224,  1225,  1227,  1230,  1232,  1234,
    1237,  1240,  1245,  1247,  1251,  1254,  1256,  1259,  1262,  1265,
    1268,  1270,  1273,  1275,  1277,  1279,  1281,  1283,  1284,  1287,
    1289,  1291,  1293,  1295,  1297,  1298,  1301,  1303,  1305,  1306,
    1308,  1309,  1312,  1314,  1317,  1321,  1324,  1325,  1327,  1328,
    1330,  1332,  1335,  1336,  1338,  1339,  1344,  1346,  1351,  1355,
    1357,  1358,  1360,  1363,  1365,  1369,  1373,  1376,  1379,  1382,
    1384,  1386,  1389,  1392,  1395,  1397,  1400,  1403,  1406,  1409,
    1411,  1413,  1414,  1416,  1418,  1420,  1422,  1424,  1426,  1427,
    1429,  1430,  1433,  1436,  1438,  1440,  1442,  1447,  1450,  1452,
    1457,  1458,  1460,  1461,  1464,  1466,  1470,  1471,  1478,  1479,
    1485,  1486,  1492,  1493,  1499,  1500,  1512,  1513,  1515,  1516,
    1519,  1522,  1524,  1528,  1531,  1535,  1538,  1543,  1544,  1551,
    1552,  1553,  1562,  1567,  1572,  1576,  1580,  1583,  1586,  1593,
    1599,  1603,  1609,  1611,  1613,  1615,  1616,  1618,  1619,  1621,
    1622,  1624,  1626,  1627,  1630,  1632,  1633,  1635,  1637,  1639,
    1640,  1646,  1650,  1651,  1657,  1661,  1665,  1666,  1670,  1671,
    1674,  1676,  1680,  1681,  1683,  1685,  1686,  1689,  1691,  1695,
    1696,  1703,  1704,  1711,  1712,  1718,  1719,  1721,  1723,  1724,
    1731,  1732,  1734,  1736,  1739,  1741,  1743,  1745,  1746,  1752,
    1753,  1759,  1760,  1762,  1764,  1767,  1769,  1771,  1773,  1775,
    1777,  1780,  1781,  1787,  1788,  1790,  1792,  1793,  1798,  1803,
    1807,  1813,  1815,  1819,  1823,  1829,  1831,  1835,  1838,  1840,
    1842,  1843,  1850,  1852,  1856,  1860,  1861,  1864,  1865,  1870,
    1871,  1874,  1876,  1879,  1884,  1887,  1891,  1892,  1896,  1897,
    1898,  1905,  1908,  1910,  1912,  1915,  1918,  1927,  1932,  1933,
    1935,  1938,  1940,  1942,  1944,  1946,  1948,  1950,  1952,  1954,
    1956,  1958,  1960,  1961,  1964,  1969,  1973,  1975,  1977,  1982,
    1983,  1984,  1986,  1988,  1989,  1992,  1995,  1997,  1999,  2000,
    2003,  2007,  2011,  2015,  2018,  2022,  2027,  2031,  2036,  2040,
    2045,  2047,  2051,  2056,  2060,  2064,  2071,  2073,  2079,  2086,
    2092,  2100,  2107,  2116,  2122,  2129,  2134,  2139,  2145,  2149,
    2154,  2156,  2160,  2164,  2168,  2172,  2176,  2180,  2185,  2190,
    2194,  2198,  2202,  2206,  2210,  2214,  2216,  2218,  2220,  2222,
    2224,  2226,  2228,  2230,  2232,  2234,  2236,  2238,  2240,  2242,
    2244,  2246,  2248,  2251,  2253,  2257,  2259,  2261,  2263,  2265,
    2269,  2272,  2275,  2278,  2281,  2285,  2289,  2295,  2302,  2307,
    2312,  2320,  2325,  2328,  2335,  2341,  2348,  2355,  2360,  2365,
    2369,  2374,  2381,  2390,  2397,  2406,  2413,  2418,  2425,  2430,
    2437,  2442,  2447,  2452,  2457,  2464,  2473,  2476,  2479,  2484,
    2487,  2495,  2503,  2507,  2512,  2517,  2524,  2531,  2536,  2543,
    2550,  2557,  2562,  2569,  2574,  2581,  2590,  2601,  2614,  2621,
    2626,  2633,  2640,  2642,  2649,  2654,  2663,  2674,  2679,  2681,
    2685,  2690,  2697,  2704,  2713,  2720,  2727,  2732,  2739,  2746,
    2755,  2760,  2765,  2772,  2777,  2780,  2785,  2790,  2795,  2802,
    2807,  2812,  2816,  2825,  2832,  2837,  2844,  2848,  2855,  2864,
    2869,  2878,  2885,  2894,  2901,  2910,  2913,  2918,  2923,  2928,
    2935,  2944,  2953,  2958,  2966,  2974,  2982,  2989,  2996,  3003,
    3010,  3017,  3024,  3025,  3031,  3042,  3046,  3051,  3055,  3058,
    3061,  3064,  3069,  3076,  3081,  3086,  3093,  3100,  3107,  3114,
    3119,  3126,  3131,  3138,  3143,  3148,  3153,  3158,  3165,  3170,
    3177,  3182,  3189,  3194,  3199,  3206,  3211,  3218,  3223,  3230,
    3235,  3240,  3247,  3252,  3259,  3260,  3264,  3268,  3269,  3271,
    3272,  3275,  3277,  3281,  3286,  3291,  3297,  3302,  3307,  3312,
    3318,  3323,  3324,  3325,  3333,  3344,  3349,  3355,  3360,  3366,
    3371,  3376,  3381,  3386,  3391,  3397,  3398,  3407,  3408,  3412,
    3416,  3418,  3423,  3424,  3426,  3427,  3430,  3431,  3433,  3434,
    3438,  3441,  3445,  3448,  3450,  3453,  3455,  3458,  3460,  3462,
    3464,  3467,  3468,  3470,  3471,  3474,  3476,  3480,  3482,  3486,
    3487,  3490,  3492,  3496,  3497,  3499,  3500,  3503,  3508,  3514,
    3516,  3518,  3520,  3522,  3526,  3530,  3534,  3535,  3542,  3543,
    3550,  3551,  3560,  3565,  3566,  3575,  3576,  3587,  3594,  3595,
    3604,  3605,  3616,  3623,  3625,  3628,  3631,  3632,  3637,  3638,
    3650,  3654,  3661,  3662,  3666,  3667,  3668,  3674,  3675,  3677,
    3678,  3680,  3681,  3684,  3685,  3688,  3691,  3694,  3695,  3702,
    3703,  3705,  3709,  3711,  3713,  3715,  3719,  3721,  3723,  3725,
    3727,  3729,  3731,  3733,  3735,  3737,  3739,  3741,  3743,  3745,
    3747,  3749,  3751,  3753,  3755,  3757,  3759,  3761,  3763,  3765,
    3767,  3769,  3771,  3773,  3774,  3776,  3778,  3779,  3782,  3783,
    3785,  3786,  3787,  3791,  3792,  3793,  3797,  3800,  3801,  3802,
    3807,  3812,  3815,  3816,  3819,  3822,  3826,  3830,  3832,  3835,
    3836,  3838,  3839,  3844,  3849,  3852,  3853,  3855,  3857,  3858,
    3860,  3861,  3863,  3866,  3868,  3872,  3876,  3878,  3880,  3882,
    3884,  3885,  3888,  3890,  3892,  3894,  3896,  3898,  3900,  3902,
    3904,  3906,  3908,  3910,  3911,  3912,  3919,  3920,  3922,  3926,
    3928,  3931,  3932,  3935,  3939,  3941,  3944,  3946,  3947,  3951,
    3952,  3958,  3961,  3963,  3964,  3968,  3975,  3976,  3983,  3988,
    3995,  4000,  4005,  4010,  4016,  4021,  4023,  4027,  4029,  4030,
    4033,  4034,  4036,  4037,  4038,  4047,  4048,  4049,  4056,  4057,
    4059,  4061,  4063,  4065,  4067,  4070,  4072,  4074,  4076,  4080,
    4085,  4086,  4090,  4094,  4096,  4099,  4102,  4103,  4107,  4108,
    4114,  4118,  4120,  4124,  4126,  4130,  4132,  4134,  4135,  4137,
    4138,  4143,  4144,  4146,  4150,  4152,  4154,  4156,  4157,  4158,
    4165,  4166,  4167,  4179,  4183,  4185,  4189,  4193,  4195,  4199,
    4200,  4202,  4203,  4208,  4209,  4216,  4217,  4223,  4224,  4231,
    4233,  4237,  4241,  4247,  4248,  4251,  4252,  4255,  4257,  4259,
    4261,  4265,  4266,  4268,  4269,  4271,  4273,  4277,  4279,  4281,
    4284,  4287,  4290,  4292,  4294,  4296,  4298,  4299,  4303,  4304,
    4308,  4311,  4316,  4321,  4326,  4331,  4332,  4337,  4344,  4361,
    4364,  4367,  4368,  4375,  4381,  4384,  4387,  4390,  4392,  4398,
    4404,  4407,  4410,  4412,  4417,  4421,  4424,  4427,  4430,  4434,
    4437,  4440,  4443,  4445,  4447,  4451,  4456,  4460,  4464,  4467,
    4470,  4474,  4478,  4482,  4486,  4490,  4494,  4496,  4498,  4500,
    4502,  4503,  4505,  4506,  4509,  4510,  4512,  4514,  4516,  4517,
    4520,  4521,  4524,  4525,  4528,  4531,  4532,  4537,  4538,  4543,
    4545,  4547,  4548,  4550,  4551,  4553,  4555,  4556,  4561,  4565,
    4567,  4568,  4572,  4577,  4580,  4582,  4584,  4586,  4588,  4590,
    4592,  4594,  4596,  4597,  4599,  4600,  4604,  4608,  4610,  4612,
    4614,  4617,  4618,  4622,  4626,  4629,  4632,  4633,  4638,  4639,
    4641,  4643,  4646,  4647,  4652,  4658,  4659,  4660,  4661,  4662,
    4681,  4684,  4685,  4687,  4688,  4690,  4692,  4693,  4695,  4697,
    4698,  4701,  4704,  4706,  4710,  4715,  4719,  4723,  4724,  4727,
    4730,  4732,  4736,  4740,  4741,  4745,  4746,  4750,  4753,  4757,
    4759,  4761,  4764,  4765,  4768,  4770,  4772,  4775,  4778,  4780,
    4782,  4784,  4786,  4788,  4791,  4794,  4796,  4798,  4800,  4802,
    4804,  4806,  4808,  4811,  4814,  4817,  4820,  4823,  4825,  4827,
    4829,  4831,  4833,  4835,  4837,  4841,  4847,  4849,  4851,  4853,
    4855,  4857,  4861,  4866,  4872,  4874,  4880,  4884,  4887,  4889,
    4893,  4896,  4898,  4900,  4902,  4904,  4906,  4908,  4910,  4912,
    4914,  4916,  4918,  4920,  4922,  4924,  4928,  4931,  4933,  4935,
    4937,  4939,  4941,  4943,  4945,  4947,  4949,  4951,  4953,  4955,
    4957,  4959,  4961,  4963,  4965,  4967,  4969,  4971,  4973,  4975,
    4977,  4979,  4981,  4983,  4985,  4987,  4989,  4991,  4993,  4995,
    4997,  4999,  5001,  5003,  5005,  5007,  5009,  5011,  5013,  5015,
    5017,  5019,  5021,  5023,  5025,  5027,  5029,  5031,  5033,  5035,
    5037,  5039,  5041,  5043,  5045,  5047,  5049,  5051,  5053,  5055,
    5057,  5059,  5061,  5063,  5065,  5067,  5069,  5071,  5073,  5075,
    5077,  5079,  5081,  5083,  5085,  5087,  5089,  5091,  5093,  5095,
    5097,  5099,  5101,  5103,  5105,  5107,  5109,  5111,  5113,  5115,
    5117,  5119,  5121,  5123,  5125,  5127,  5129,  5131,  5133,  5135,
    5137,  5139,  5141,  5143,  5145,  5147,  5149,  5151,  5153,  5155,
    5157,  5159,  5161,  5163,  5165,  5167,  5169,  5171,  5173,  5175,
    5177,  5179,  5181,  5183,  5185,  5187,  5189,  5191,  5193,  5195,
    5197,  5199,  5201,  5203,  5205,  5207,  5209,  5211,  5213,  5215,
    5217,  5219,  5221,  5223,  5225,  5227,  5229,  5231,  5233,  5235,
    5237,  5239,  5241,  5243,  5245,  5247,  5249,  5251,  5253,  5255,
    5257,  5259,  5261,  5263,  5265,  5267,  5269,  5271,  5273,  5275,
    5277,  5279,  5281,  5283,  5285,  5287,  5289,  5291,  5293,  5295,
    5297,  5299,  5301,  5303,  5305,  5307,  5309,  5311,  5313,  5315,
    5317,  5319,  5321,  5323,  5325,  5327,  5329,  5331,  5333,  5335,
    5337,  5339,  5341,  5343,  5345,  5347,  5349,  5351,  5353,  5355,
    5357,  5359,  5361,  5363,  5365,  5367,  5369,  5371,  5373,  5375,
    5377,  5379,  5381,  5383,  5385,  5387,  5389,  5391,  5393,  5395,
    5397,  5399,  5401,  5403,  5405,  5407,  5409,  5411,  5413,  5415,
    5417,  5419,  5421,  5423,  5425,  5427,  5429,  5431,  5433,  5435,
    5437,  5439,  5441,  5443,  5445,  5447,  5449,  5451,  5453,  5455,
    5457,  5458,  5463,  5464,  5466,  5468,  5472,  5473,  5476,  5478,
    5480,  5482,  5484,  5485,  5487,  5488,  5490,  5492,  5494,  5495,
    5498,  5501,  5504,  5506,  5509,  5514,  5520,  5525,  5532,  5535,
    5539,  5543,  5547,  5553,  5555,  5559,  5563,  5566,  5569,  5572,
    5574,  5576,  5581,  5586,  5588,  5590,  5592,  5594,  5596,  5597,
    5602,  5604,  5606,  5608,  5612,  5616,  5618,  5620,  5623,  5626,
    5627,  5631,  5636,  5640,  5641,  5649,  5651,  5654,  5656,  5658,
    5660,  5662,  5664,  5666,  5667,  5673,  5675,  5677,  5679,  5681,
    5683,  5687,  5694,  5701,  5708,  5716,  5720,  5729,  5738,  5747,
    5748,  5750,  5752,  5755,  5756,  5758,  5760,  5764,  5765,  5769,
    5770,  5774,  5775,  5779,  5780,  5784,  5786,  5788,  5790,  5792,
    5794,  5796,  5798,  5800,  5802,  5804,  5806,  5809,  5812,  5814,
    5818,  5821,  5824,  5827,  5830,  5833,  5836,  5839,  5842,  5843,
    5845,  5849,  5851,  5854,  5857,  5860,  5862,  5866,  5870,  5872,
    5874,  5878,  5880,  5884,  5889,  5895,  5897,  5898,  5902,  5906,
    5908,  5910,  5911,  5914,  5917,  5920,  5923,  5924,  5927,  5930,
    5932,  5935,  5938,  5941,  5944,  5947,  5948,  5952,  5953,  5955,
    5956,  5960,  5963,  5964,  5966,  5969,  5970,  5972,  5977,  5982,
    5988,  5991,  5995,  5996,  5998,  5999,  6004,  6005,  6007,  6009,
    6010,  6013,  6016,  6018,  6019,  6021,  6023,  6024,  6030,  6037,
    6038,  6039,  6042,  6045,  6049,  6051,  6053,  6055,  6057,  6059,
    6061,  6063,  6065,  6067,  6069,  6071,  6072,  6076,  6078,  6081,
    6083,  6086,  6090,  6094,  6098,  6099,  6101,  6102,  6106,  6110,
    6111,  6120,  6121,  6125,  6127,  6131,  6132,  6135,  6139,  6145,
    6146,  6150,  6155,  6160,  6161,  6176,  6185,  6193,  6194,  6195,
    6196,  6197,  6198,  6214,  6215,  6216,  6217,  6218,  6231,  6236,
    6241,  6245,  6250,  6254,  6257,  6259,  6263,  6269,  6271,  6273,
    6274,  6276,  6278,  6279,  6282,  6283,  6284,  6288,  6289
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     584,     0,    -1,     3,    -1,    -1,   587,   585,   579,   586,
      -1,   587,     3,    -1,    -1,     3,    -1,   588,    -1,  1199,
      -1,   788,    -1,   829,    -1,   819,    -1,   618,    -1,   600,
      -1,   831,    -1,   821,    -1,  1205,    -1,   605,    -1,   589,
      -1,  1039,    -1,  1070,    -1,   995,    -1,   997,    -1,   593,
      -1,  1076,    -1,  1174,    -1,  1165,    -1,   598,    -1,  1003,
      -1,  1090,    -1,  1094,    -1,  1157,    -1,   836,    -1,   844,
      -1,   848,    -1,   591,    -1,  1086,    -1,  1208,    -1,   839,
      -1,   824,    -1,  1006,    -1,  1082,    -1,   817,    -1,  1172,
      -1,  1206,    -1,  1207,    -1,   856,    -1,  1140,    -1,  1056,
      -1,   806,    -1,   809,    -1,  1050,    -1,  1163,    -1,  1031,
      -1,  1093,    -1,  1254,    -1,   590,   370,  1134,    -1,   106,
      -1,   129,    -1,   370,  1134,   175,   592,    -1,  1131,    -1,
     580,  1136,    -1,    -1,   151,  1134,   594,   595,    -1,    -1,
     530,   596,    -1,   596,   575,   597,    -1,   597,    -1,   580,
    1136,    -1,    -1,   202,   599,  1136,    -1,    -1,    53,   287,
     498,   601,   602,    -1,   603,    -1,   602,   575,   603,    -1,
     274,   145,  1131,    -1,   288,   145,  1131,    -1,   277,   145,
    1131,    -1,   278,   145,   980,    -1,   273,   145,   980,    -1,
     286,   145,   980,    -1,   282,   145,  1131,    -1,   281,   145,
    1131,    -1,   283,   145,  1131,    -1,   284,   145,  1131,    -1,
     285,   145,  1131,    -1,   604,    -1,   275,   145,  1131,    -1,
     276,   145,   981,    -1,   396,   145,  1131,    -1,   397,   145,
     980,    -1,    -1,    87,   703,   485,   706,  1128,   606,   690,
      -1,    -1,    87,   780,   217,  1134,   781,   344,  1128,   607,
     573,   783,   574,    -1,    -1,    87,   779,   217,  1134,   344,
    1128,   608,   573,   783,   574,    -1,    -1,    87,    94,   706,
    1134,   609,   700,    -1,    -1,    87,   610,  1221,    -1,    87,
     527,   611,  1190,    -1,    -1,  1134,   581,  1134,    -1,  1134,
      -1,    -1,   613,   615,    -1,    -1,   614,   616,    -1,    68,
    1131,    -1,   241,   461,    -1,   335,   461,    -1,    80,   461,
      -1,   389,   461,    96,    -1,   311,   461,    96,    -1,   617,
      -1,   615,    -1,   121,    -1,   883,   121,    -1,   461,   429,
     112,    -1,   461,   429,   228,    -1,    -1,    48,   612,   619,
     620,    -1,    -1,   573,   621,   574,    -1,    -1,   622,    -1,
     622,   575,   877,    -1,   877,    -1,    -1,   624,    -1,   624,
     575,   626,    -1,   626,    -1,    -1,  1134,   625,   729,    -1,
      -1,   628,    -1,   628,   575,   629,    -1,   629,    -1,   630,
     625,  1134,   729,    -1,    -1,   229,    -1,   357,    -1,   221,
      -1,    -1,   631,   647,   579,    -1,   647,   579,    -1,   632,
     647,   579,    -1,    -1,   633,   634,   579,    -1,    -1,   109,
     645,   635,   729,   646,    -1,   109,  1134,    76,   172,   642,
      -1,    -1,   109,   639,   199,   172,   636,   640,   647,    -1,
     109,  1134,    92,   172,   637,    -1,    -1,   638,   588,    -1,
     153,    -1,    82,    -1,   641,    -1,   640,   575,   641,    -1,
     644,    -1,   980,    -1,   453,   643,  1132,    -1,    -1,   536,
      -1,   642,    -1,  1134,    -1,   454,    -1,   883,   173,    -1,
     452,    -1,  1134,    -1,   645,   575,  1134,    -1,    -1,   111,
     877,    -1,    -1,   648,   588,    -1,    -1,   414,   649,   877,
      -1,    -1,   213,   650,   655,   141,   213,    -1,   660,    -1,
     675,    -1,    -1,   651,   684,    -1,   678,    -1,   680,    -1,
     248,  1135,    -1,   235,  1135,    -1,   347,  1134,    -1,    -1,
     161,   653,  1134,   226,   652,   654,    -1,    61,  1134,    -1,
      -1,   330,   175,    -1,   175,    -1,  1134,    -1,   654,   575,
    1134,    -1,    -1,    -1,    -1,   656,   877,   560,   657,   632,
     658,   659,    -1,    -1,   135,   655,    -1,   559,   632,    -1,
     661,    -1,   664,    -1,    -1,    -1,   561,   662,   877,   663,
     666,   674,   141,   561,    -1,    -1,   561,   665,   667,   674,
     141,   561,    -1,   668,    -1,   666,   668,    -1,   671,    -1,
     667,   671,    -1,    -1,    -1,   545,   669,   877,   670,   560,
     632,    -1,    -1,    -1,   545,   672,   877,   673,   560,   632,
      -1,    -1,   559,   632,    -1,    -1,  1135,   582,   676,   684,
     677,    -1,    -1,  1135,    -1,    -1,  1135,   582,   679,   682,
     677,    -1,    -1,   681,   682,    -1,    -1,    28,   683,   633,
     631,   141,    -1,   269,   632,   141,   269,    -1,    -1,    -1,
     547,   685,   877,   128,   686,   632,   141,   547,    -1,    -1,
     404,   632,   523,   687,   877,   141,   404,    -1,    27,    -1,
       8,    -1,   223,    -1,   524,    -1,   115,    -1,   573,   691,
      -1,   707,   693,    -1,   252,  1128,    -1,   573,   252,  1128,
     574,    -1,   719,   574,   707,   693,    -1,    -1,   696,   574,
     692,  1212,    -1,    -1,    -1,  1103,   699,   696,   694,  1209,
      -1,    -1,  1103,   699,   573,   696,   574,   695,  1212,    -1,
      -1,    -1,   430,   697,   866,   870,   698,   717,    -1,    -1,
      18,    -1,    -1,   701,    -1,   702,    -1,   701,   702,    -1,
     712,    -1,   711,    -1,    -1,   704,    -1,   705,    -1,   705,
     704,    -1,   486,    -1,    -1,   213,   883,   152,    -1,    -1,
     709,    -1,   710,    -1,   710,   708,    -1,   710,    -1,   710,
     709,    -1,   710,   575,   709,    -1,   143,  1023,   713,    -1,
     507,  1023,   713,    -1,   292,  1023,   981,    -1,   307,  1023,
     981,    -1,    24,  1023,   980,    -1,   361,  1023,  1131,    -1,
      68,  1023,  1131,    -1,    23,  1023,   981,    -1,   358,  1023,
     980,    -1,   358,  1023,   111,    -1,    57,  1023,   980,    -1,
     114,  1023,   980,    -1,   423,  1023,   714,    -1,   387,  1023,
     715,    -1,   384,  1023,   980,    -1,   385,  1023,   980,    -1,
     516,  1023,   573,  1081,   574,    -1,   711,    -1,   712,    -1,
     224,  1023,   716,    -1,    96,   122,  1023,  1131,    -1,   217,
     122,  1023,  1131,    -1,    77,  1023,  1131,    -1,   760,   751,
    1023,   753,    -1,   760,    64,  1023,   759,    -1,  1136,    -1,
     111,    -1,   165,    -1,   133,    -1,    72,    -1,   393,    -1,
      71,    -1,   386,    -1,   383,    -1,   980,    -1,   335,    -1,
     164,    -1,   243,    -1,   975,    -1,   865,   869,    -1,   472,
      -1,   391,    -1,   108,    -1,   227,    -1,   720,    -1,   719,
     575,   720,    -1,   721,    -1,   722,    -1,   727,   723,    -1,
     727,   765,    -1,   773,   785,   781,   573,   783,   574,   781,
      -1,   774,   785,   573,   783,   574,    -1,   725,   775,   785,
     781,   573,   783,   574,   781,    -1,   725,   170,   238,   785,
     573,   783,   574,   765,    -1,   726,   723,    -1,   725,   724,
      -1,    -1,   724,    -1,    58,   877,    -1,    -1,   726,    -1,
      79,   785,    -1,    -1,  1127,   728,   729,   747,    -1,   737,
     744,   741,    -1,   738,   746,   741,    -1,   167,   739,   741,
      -1,    37,    -1,    37,   745,    -1,    42,    -1,    41,    -1,
     733,   745,   761,    -1,   733,   761,    -1,   734,   745,   762,
      -1,   734,   762,    -1,    32,   745,    -1,    32,    -1,   735,
     745,   761,    -1,   736,   745,   762,    -1,   537,   745,    -1,
     556,   744,   741,    -1,   100,    -1,   494,    -1,   491,   744,
      -1,    97,    -1,   495,    -1,    39,   744,    -1,   732,    -1,
     296,    -1,   265,    -1,   268,   537,    -1,   268,   735,   761,
      -1,   497,   761,    -1,   490,   744,   761,    -1,   298,   761,
      -1,   266,   761,    -1,   108,   739,   741,    -1,   339,   739,
     741,    -1,   165,   739,   741,    -1,    -1,   144,   730,   573,
     787,   574,   761,    -1,    -1,   436,   731,   573,   787,   574,
     761,    -1,   268,   761,    -1,   434,    -1,   187,    -1,   186,
      -1,   365,    -1,   318,    -1,   256,    -1,   317,    -1,   367,
      -1,   319,    -1,    56,    -1,   326,    -1,   323,    56,    -1,
     733,   541,    -1,   538,    -1,   323,   538,    -1,   340,    -1,
     326,   538,    -1,   323,    56,   541,    -1,   326,   541,    -1,
     227,    -1,   496,    -1,   446,    -1,   297,    -1,    31,    -1,
     391,    -1,   127,    -1,   127,   369,    -1,    -1,   745,    -1,
     740,    -1,   573,   338,   575,   338,   574,    -1,    -1,   742,
      -1,   742,   743,    -1,   743,    -1,   443,    -1,   522,    -1,
     557,    -1,    -1,   745,    -1,   573,   267,   574,    -1,   573,
     510,   574,    -1,   573,   107,   574,    -1,   573,   338,   574,
      -1,    -1,   740,    -1,    -1,   748,    -1,   748,   749,    -1,
     749,    -1,   337,    -1,   883,   337,    -1,   111,   750,    -1,
     344,   524,   334,   876,    -1,    23,    -1,   434,   111,   536,
      -1,   764,   238,    -1,   517,    -1,   517,   238,    -1,    68,
    1131,    -1,    64,   757,    -1,   334,   876,    -1,  1118,    -1,
      56,   436,    -1,    55,    -1,  1136,    -1,    32,    -1,   752,
      -1,   111,    -1,    -1,   751,   753,    -1,  1136,    -1,    32,
      -1,   755,    -1,   111,    -1,  1136,    -1,    -1,    64,   759,
      -1,   757,    -1,   111,    -1,    -1,   111,    -1,    -1,    20,
     762,    -1,    46,    -1,   515,   762,    -1,   751,   752,   762,
      -1,    32,   763,    -1,    -1,    32,    -1,    -1,    20,    -1,
     515,    -1,   751,   752,    -1,    -1,   372,    -1,    -1,   394,
    1128,   766,   767,    -1,   769,    -1,   573,   768,   574,   769,
      -1,   768,   575,  1134,    -1,  1134,    -1,    -1,   770,    -1,
     770,   771,    -1,   771,    -1,   344,   115,   772,    -1,   344,
     524,   772,    -1,   289,   177,    -1,   289,   360,    -1,   289,
     444,    -1,   411,    -1,    49,    -1,   436,   337,    -1,   335,
       5,    -1,   436,   111,    -1,   776,    -1,   178,   777,    -1,
     450,   777,    -1,   372,   238,    -1,   517,   777,    -1,   238,
      -1,   217,    -1,    -1,   776,    -1,   237,    -1,   217,    -1,
     216,    -1,   178,    -1,   450,    -1,    -1,   517,    -1,    -1,
     530,   782,    -1,   507,   782,    -1,    44,    -1,   425,    -1,
     200,    -1,   783,   575,   784,   973,    -1,   784,   973,    -1,
    1134,    -1,  1134,   573,   338,   574,    -1,    -1,  1127,    -1,
      -1,   581,  1134,    -1,  1116,    -1,   787,   575,  1116,    -1,
      -1,    13,   802,   485,  1128,   789,   795,    -1,    -1,    13,
      94,   794,   790,   701,    -1,    -1,    13,   374,   612,   791,
     613,    -1,    -1,    13,   179,   612,   792,   613,    -1,    -1,
      13,  1230,  1224,  1231,   542,  1128,   793,  1234,    18,  1236,
    1239,    -1,    -1,  1134,    -1,    -1,   124,   484,    -1,   215,
     484,    -1,   797,    -1,   795,   575,   797,    -1,     6,   801,
      -1,   796,   721,   804,    -1,     6,   722,    -1,   796,   573,
     719,   574,    -1,    -1,    53,   801,  1127,   798,   727,   804,
      -1,    -1,    -1,   312,   801,  1127,   799,   729,   747,   800,
     804,    -1,   129,   801,  1127,   803,    -1,   129,   170,   238,
     785,    -1,   129,   372,   238,    -1,   129,   776,  1127,    -1,
     123,   237,    -1,   137,   237,    -1,    13,   801,  1127,   436,
     111,  1118,    -1,    13,   801,  1127,   129,   111,    -1,   401,
     805,  1128,    -1,    83,   498,   751,   753,   758,    -1,   708,
      -1,   169,    -1,   966,    -1,    -1,    67,    -1,    -1,   214,
      -1,    -1,   411,    -1,    49,    -1,    -1,     8,  1134,    -1,
     164,    -1,    -1,   498,    -1,   145,    -1,    18,    -1,    -1,
     465,   445,   811,   807,   815,    -1,   469,   445,   811,    -1,
      -1,   445,   465,   811,   808,   815,    -1,   445,   469,   811,
      -1,   465,   500,   810,    -1,    -1,   548,    78,   447,    -1,
      -1,   812,   813,    -1,   814,    -1,   813,   575,   814,    -1,
      -1,   462,    -1,   398,    -1,    -1,   523,   816,    -1,   604,
      -1,   816,   575,   604,    -1,    -1,   410,  1159,   818,   999,
     175,  1131,    -1,    -1,    26,  1159,   820,   999,   498,  1131,
      -1,    -1,    57,  1159,   822,   999,   823,    -1,    -1,   382,
      -1,   156,    -1,    -1,   402,   838,  1159,   825,   999,   826,
      -1,    -1,   827,    -1,   828,    -1,   828,   827,    -1,   382,
      -1,   156,    -1,   528,    -1,    -1,    14,   838,  1159,   830,
     999,    -1,    -1,    58,  1159,   832,   999,   833,    -1,    -1,
     834,    -1,   835,    -1,   835,   834,    -1,   382,    -1,   159,
      -1,   299,    -1,   156,    -1,    54,    -1,   172,   525,    -1,
      -1,   348,   838,  1159,   837,   999,    -1,    -1,   336,    -1,
     258,    -1,    -1,   401,  1159,   840,   842,    -1,   401,   527,
     611,   841,    -1,  1137,   498,  1137,    -1,   841,   575,  1137,
     498,  1137,    -1,   843,    -1,   842,   575,   843,    -1,  1128,
     498,  1128,    -1,    47,   217,   845,   229,   847,    -1,   846,
      -1,   845,   575,   846,    -1,  1128,   852,    -1,  1134,    -1,
     111,    -1,    -1,   257,   217,   226,    47,   849,   850,    -1,
     851,    -1,   850,   575,   851,    -1,  1128,   852,   855,    -1,
      -1,   853,   854,    -1,    -1,   777,   573,   949,   574,    -1,
      -1,   214,   247,    -1,   857,    -1,   430,   859,    -1,   573,
     858,   574,  1212,    -1,   430,   861,    -1,   573,   858,   574,
      -1,    -1,   861,   860,  1209,    -1,    -1,    -1,   862,   866,
     870,   863,   864,   869,    -1,   969,   975,    -1,   991,    -1,
     865,    -1,   991,   865,    -1,   865,   991,    -1,   175,   922,
     958,   963,   960,   969,   975,   982,    -1,   175,   130,   958,
     975,    -1,    -1,   867,    -1,   867,   868,    -1,   868,    -1,
     471,    -1,   204,    -1,   125,    -1,   460,    -1,   455,    -1,
     456,    -1,   458,    -1,   459,    -1,   457,    -1,    12,    -1,
      -1,   172,   524,    -1,   262,   229,   438,   310,    -1,   870,
     575,   871,    -1,   871,    -1,   567,    -1,   872,   874,   873,
     875,    -1,    -1,    -1,  1122,    -1,   877,    -1,    -1,    18,
    1134,    -1,    18,  1131,    -1,  1134,    -1,  1131,    -1,    -1,
     573,   574,    -1,   877,   881,   877,    -1,   877,   553,   877,
      -1,   877,   882,   877,    -1,   333,   877,    -1,   878,   232,
     504,    -1,   878,   232,   883,   504,    -1,   878,   232,   158,
      -1,   878,   232,   883,   158,    -1,   878,   232,   520,    -1,
     878,   232,   883,   520,    -1,   878,    -1,   878,   232,   337,
      -1,   878,   232,   883,   337,    -1,   878,   146,   879,    -1,
     878,   885,   879,    -1,   878,   885,   886,   573,  1218,   574,
      -1,   879,    -1,   880,   229,   573,  1218,   574,    -1,   880,
     883,   229,   573,  1218,   574,    -1,   880,   229,   573,   877,
     574,    -1,   880,   229,   573,   877,   575,   911,   574,    -1,
     880,   883,   229,   573,   877,   574,    -1,   880,   883,   229,
     573,   877,   575,   911,   574,    -1,   880,   562,   880,    16,
     879,    -1,   880,   883,   562,   880,    16,   879,    -1,   880,
     448,   252,   880,    -1,   880,   252,   888,   962,    -1,   880,
     883,   252,   888,   962,    -1,   880,   395,   880,    -1,   880,
     883,   395,   880,    -1,   880,    -1,   880,   563,   880,    -1,
     880,   564,   880,    -1,   880,   439,   880,    -1,   880,   440,
     880,    -1,   880,   566,   880,    -1,   880,   565,   880,    -1,
     880,   566,   887,   951,    -1,   880,   565,   887,   951,    -1,
     880,   567,   880,    -1,   880,   568,   880,    -1,   880,   569,
     880,    -1,   880,   126,   880,    -1,   880,   313,   880,    -1,
     880,   570,   880,    -1,   888,    -1,   354,    -1,   351,    -1,
      16,    -1,    15,    -1,   333,    -1,   332,    -1,   576,    -1,
     332,    -1,   145,    -1,   184,    -1,   198,    -1,   244,    -1,
     271,    -1,   328,    -1,    12,    -1,    17,    -1,   225,   877,
      -1,  1124,    -1,   888,    64,  1136,    -1,  1119,    -1,  1117,
      -1,   901,    -1,   897,    -1,   888,   353,   888,    -1,   566,
     888,    -1,   565,   888,    -1,   571,   888,    -1,   884,   888,
      -1,   573,  1218,   574,    -1,   573,   877,   574,    -1,   573,
     877,   575,   911,   574,    -1,   424,   573,   877,   575,   911,
     574,    -1,   152,   573,  1218,   574,    -1,   577,  1134,   877,
     578,    -1,   289,   914,     9,   573,   880,   891,   574,    -1,
      20,   573,   877,   574,    -1,    32,   888,    -1,    51,   573,
     877,    18,   909,   574,    -1,   561,   918,   920,   919,   141,
      -1,    83,   573,   877,   575,   909,   574,    -1,    83,   573,
     877,   530,   752,   574,    -1,   111,   573,  1124,   574,    -1,
     535,   573,  1125,   574,    -1,   180,   573,   574,    -1,   181,
     573,   877,   574,    -1,   182,   573,   877,   575,   877,   574,
      -1,   183,   573,   877,   575,   877,   575,   877,   574,    -1,
       7,   573,   877,   575,   877,   574,    -1,     7,   573,   877,
     575,   225,   877,   951,   574,    -1,   404,   573,   877,   575,
     877,   574,    -1,    22,   573,   877,   574,    -1,    22,   573,
     877,   575,   877,   574,    -1,    56,   573,   911,   574,    -1,
      56,   573,   911,   530,   752,   574,    -1,    55,   573,   877,
     574,    -1,    62,   573,   911,   574,    -1,    65,   573,   877,
     574,    -1,    73,   573,   911,   574,    -1,    74,   573,   877,
     575,   911,   574,    -1,    84,   573,   877,   575,   877,   575,
     877,   574,    -1,    90,   876,    -1,    93,   876,    -1,    93,
     573,   877,   574,    -1,    91,   876,    -1,    98,   573,   877,
     575,   887,   951,   574,    -1,    99,   573,   877,   575,   887,
     951,   574,    -1,    94,   573,   574,    -1,   100,   573,   877,
     574,    -1,   105,   573,   877,   574,    -1,   136,   573,   877,
     575,   911,   574,    -1,   272,   573,   877,   575,   911,   574,
      -1,   140,   573,   877,   574,    -1,   140,   573,   877,   575,
     877,   574,    -1,   110,   573,   877,   575,  1132,   574,    -1,
     139,   573,   877,   575,  1132,   574,    -1,   118,   573,   877,
     574,    -1,   118,   573,   877,   575,   877,   574,    -1,   119,
     573,   877,   574,    -1,   119,   573,   877,   575,   877,   574,
      -1,   155,   573,   877,   575,   877,   575,   877,   574,    -1,
     155,   573,   877,   575,   877,   575,   877,   575,   877,   574,
      -1,   155,   573,   877,   575,   877,   575,   877,   575,   877,
     575,   877,   574,    -1,   171,   573,   877,   575,   338,   574,
      -1,   176,   573,   877,   574,    -1,   176,   573,   877,   575,
     877,   574,    -1,   162,   573,   877,   575,   911,   574,    -1,
     890,    -1,   190,   573,   954,   575,   877,   574,    -1,   209,
     573,   877,   574,    -1,   213,   573,   877,   575,   877,   575,
     877,   574,    -1,   223,   573,   877,   575,   877,   575,   877,
     575,   877,   574,    -1,   887,   951,   566,   877,    -1,   887,
      -1,   242,   573,   574,    -1,   242,   573,   877,   574,    -1,
     249,   573,   877,   575,   877,   574,    -1,   259,   573,   877,
     575,   877,   574,    -1,   259,   573,   877,   575,   877,   575,
     877,   574,    -1,   194,   573,   877,   575,   911,   574,    -1,
     246,   573,   877,   575,   911,   574,    -1,   264,   573,   877,
     574,    -1,   264,   573,   877,   575,   877,   574,    -1,   279,
     573,   877,   575,   877,   574,    -1,   279,   573,   877,   575,
     877,   575,   877,   574,    -1,   302,   573,   877,   574,    -1,
     306,   573,   877,   574,    -1,   313,   573,   877,   575,   877,
     574,    -1,   314,   573,   877,   574,    -1,   334,   876,    -1,
     334,   573,   877,   574,    -1,   361,   573,   877,   574,    -1,
     343,   573,   877,   574,    -1,   368,   573,   880,   229,   877,
     574,    -1,   380,   573,   877,   574,    -1,   388,   573,   877,
     574,    -1,   388,   573,   574,    -1,   405,   573,   877,   575,
     877,   575,   877,   574,    -1,   416,   573,   877,   575,   877,
     574,    -1,   419,   573,   877,   574,    -1,   419,   573,   877,
     575,   877,   574,    -1,   422,   573,   574,    -1,   473,   573,
     877,   575,   877,   574,    -1,   473,   573,   877,   575,   225,
     877,   951,   574,    -1,   428,   573,   877,   574,    -1,   475,
     573,   877,   575,   877,   575,   877,   574,    -1,   475,   573,
     877,   575,   877,   574,    -1,   475,   573,   877,   175,   877,
     172,   877,   574,    -1,   475,   573,   877,   175,   877,   574,
      -1,   476,   573,   877,   575,   877,   575,   877,   574,    -1,
     482,   876,    -1,   482,   573,   877,   574,    -1,   494,   573,
     877,   574,    -1,   491,   573,   877,   574,    -1,   491,   573,
     877,   575,   877,   574,    -1,   492,   573,   952,   575,   877,
     575,   877,   574,    -1,   493,   573,   952,   575,   877,   575,
     877,   574,    -1,   503,   573,   877,   574,    -1,   503,   573,
     245,   877,   175,   877,   574,    -1,   503,   573,   499,   877,
     175,   877,   574,    -1,   503,   573,    43,   877,   175,   877,
     574,    -1,   503,   573,   245,   175,   877,   574,    -1,   503,
     573,   499,   175,   877,   574,    -1,   503,   573,    43,   175,
     877,   574,    -1,   503,   573,   877,   175,   877,   574,    -1,
     505,   573,   877,   575,   877,   574,    -1,  1134,   581,  1134,
     573,   910,   574,    -1,    -1,  1130,   573,   889,   892,   574,
      -1,   518,   573,  1115,   575,   338,   575,   338,   575,   911,
     574,    -1,   519,   573,   574,    -1,   519,   573,   877,   574,
      -1,   527,   573,   574,    -1,   531,   876,    -1,   533,   876,
      -1,   532,   876,    -1,   544,   573,   877,   574,    -1,   544,
     573,   877,   575,   877,   574,    -1,   556,   573,   877,   574,
      -1,   554,   573,   877,   574,    -1,   554,   573,   877,   575,
     877,   574,    -1,    29,   573,   980,   575,   877,   574,    -1,
     157,   573,   951,   175,   877,   574,    -1,    80,   573,   877,
     575,   877,   574,    -1,   188,   573,   877,   574,    -1,   188,
     573,   877,   575,   877,   574,    -1,   189,   573,   877,   574,
      -1,   189,   573,   877,   575,   877,   574,    -1,   186,   573,
     911,   574,    -1,   256,   573,   911,   574,    -1,   317,   573,
     911,   574,    -1,   309,   573,   877,   574,    -1,   309,   573,
     877,   575,   877,   574,    -1,   315,   573,   877,   574,    -1,
     315,   573,   877,   575,   877,   574,    -1,   316,   573,   877,
     574,    -1,   316,   573,   877,   575,   877,   574,    -1,   318,
     573,   911,   574,    -1,   319,   573,   911,   574,    -1,   365,
     573,   877,   575,   877,   574,    -1,   364,   573,   877,   574,
      -1,   364,   573,   877,   575,   877,   574,    -1,   366,   573,
     877,   574,    -1,   366,   573,   877,   575,   877,   574,    -1,
     367,   573,   911,   574,    -1,   185,   573,   877,   574,    -1,
     185,   573,   877,   575,   877,   574,    -1,   254,   573,   877,
     574,    -1,   254,   573,   877,   575,   877,   574,    -1,    -1,
     548,   381,   154,    -1,   229,    41,   310,    -1,    -1,   893,
      -1,    -1,   894,   895,    -1,   896,    -1,   895,   575,   896,
      -1,   872,   877,   873,   875,    -1,    25,   573,   907,   574,
      -1,    25,   573,   125,   907,   574,    -1,    35,   573,   907,
     574,    -1,    36,   573,   907,   574,    -1,    38,   573,   907,
     574,    -1,    85,   573,   957,   567,   574,    -1,    85,   573,
     907,   574,    -1,    -1,    -1,    85,   573,   125,   898,   911,
     899,   574,    -1,   197,   573,  1115,   575,   338,   575,   338,
     575,   907,   574,    -1,   308,   573,   907,   574,    -1,   308,
     573,   125,   907,   574,    -1,   293,   573,   907,   574,    -1,
     293,   573,   125,   907,   574,    -1,   467,   573,   907,   574,
      -1,   540,   573,   907,   574,    -1,   468,   573,   907,   574,
      -1,   534,   573,   907,   574,    -1,   477,   573,   907,   574,
      -1,   477,   573,   125,   907,   574,    -1,    -1,   196,   573,
     904,   900,   911,   906,   905,   574,    -1,    -1,   580,   902,
     903,    -1,  1136,   437,   877,    -1,  1136,    -1,   580,  1149,
    1136,   786,    -1,    -1,   125,    -1,    -1,   432,  1116,    -1,
      -1,   970,    -1,    -1,   957,   908,   877,    -1,    32,   744,
      -1,    56,   744,   761,    -1,   326,   744,    -1,   443,    -1,
     443,   227,    -1,   522,    -1,   522,   227,    -1,   100,    -1,
     494,    -1,    97,    -1,   108,   739,    -1,    -1,   911,    -1,
      -1,   912,   913,    -1,   877,    -1,   913,   575,   877,    -1,
     915,    -1,   573,   915,   574,    -1,    -1,   916,   917,    -1,
    1124,    -1,   917,   575,  1124,    -1,    -1,   877,    -1,    -1,
     559,   877,    -1,   545,   877,   560,   877,    -1,   920,   545,
     877,   560,   877,    -1,   933,    -1,   924,    -1,   923,    -1,
     921,    -1,   923,   575,   921,    -1,   921,   932,   921,    -1,
     921,   471,   933,    -1,    -1,   921,   932,   921,   344,   925,
     877,    -1,    -1,   921,   471,   933,   344,   926,   877,    -1,
      -1,   921,   932,   921,   530,   927,   573,   950,   574,    -1,
     921,   324,   236,   933,    -1,    -1,   921,   249,   943,   236,
     921,   344,   928,   877,    -1,    -1,   921,   249,   943,   236,
     933,   929,   530,   573,   950,   574,    -1,   921,   324,   249,
     943,   236,   933,    -1,    -1,   921,   416,   943,   236,   921,
     344,   930,   877,    -1,    -1,   921,   416,   943,   236,   933,
     931,   530,   573,   950,   574,    -1,   921,   324,   416,   943,
     236,   933,    -1,   236,    -1,   219,   236,    -1,    88,   236,
      -1,    -1,   934,  1128,   956,   945,    -1,    -1,   577,  1134,
     921,   249,   355,   236,   921,   344,   935,   877,   578,    -1,
     942,   941,   938,    -1,   573,   941,   936,  1212,   574,   956,
      -1,    -1,   941,   937,   923,    -1,    -1,    -1,   939,   866,
     870,   940,   717,    -1,    -1,   430,    -1,    -1,   355,    -1,
      -1,   172,   236,    -1,    -1,   529,   946,    -1,   169,   946,
      -1,   214,   946,    -1,    -1,   776,   944,   947,   573,   948,
     574,    -1,    -1,   949,    -1,   949,   575,  1134,    -1,  1134,
      -1,   372,    -1,  1134,    -1,   950,   575,  1134,    -1,   953,
      -1,   101,    -1,   102,    -1,   103,    -1,   104,    -1,   206,
      -1,   207,    -1,   208,    -1,   304,    -1,   305,    -1,   427,
      -1,   555,    -1,   953,    -1,   174,    -1,   105,    -1,   544,
      -1,   209,    -1,   306,    -1,   314,    -1,   380,    -1,   428,
      -1,   302,    -1,   556,    -1,   100,    -1,   494,    -1,    97,
      -1,   491,    -1,    -1,    18,    -1,   145,    -1,    -1,   955,
    1134,    -1,    -1,    12,    -1,    -1,    -1,   546,   959,   877,
      -1,    -1,    -1,   201,   961,   877,    -1,   149,   888,    -1,
      -1,    -1,   195,    45,   964,   965,    -1,   964,   575,  1123,
     973,    -1,  1123,   973,    -1,    -1,   548,    89,    -1,   548,
     418,    -1,   352,    45,   967,    -1,   967,   575,   968,    -1,
     968,    -1,  1125,   973,    -1,    -1,   970,    -1,    -1,   352,
      45,   971,   972,    -1,   972,   575,  1123,   973,    -1,  1123,
     973,    -1,    -1,    19,    -1,   116,    -1,    -1,   976,    -1,
      -1,   976,    -1,   253,   977,    -1,   978,    -1,   978,   575,
     978,    -1,   978,   341,   978,    -1,  1117,    -1,   510,    -1,
     267,    -1,   338,    -1,    -1,   253,   978,    -1,   338,    -1,
     203,    -1,   267,    -1,   510,    -1,   107,    -1,   166,    -1,
     338,    -1,   510,    -1,   267,    -1,   107,    -1,   166,    -1,
      -1,    -1,   374,  1134,   983,   573,   984,   574,    -1,    -1,
     985,    -1,   985,   575,   986,    -1,   986,    -1,   872,   877,
      -1,    -1,   988,   989,    -1,   989,   575,   990,    -1,   990,
      -1,   580,  1136,    -1,  1136,    -1,    -1,   226,   992,   993,
      -1,    -1,   356,  1133,   994,  1104,  1107,    -1,   131,  1133,
      -1,   987,    -1,    -1,   128,   996,   911,    -1,   129,  1002,
    1159,  1001,   999,   803,    -1,    -1,   129,   217,  1134,   344,
    1128,   998,    -1,   129,    94,  1001,  1134,    -1,   129,   179,
    1001,  1134,   581,  1134,    -1,   129,   179,  1001,  1134,    -1,
     129,   374,  1001,   612,    -1,   129,   527,   611,  1189,    -1,
     129,   542,  1001,   999,   803,    -1,   129,   501,  1001,   612,
      -1,  1000,    -1,   999,   575,  1000,    -1,  1128,    -1,    -1,
     213,   152,    -1,    -1,   486,    -1,    -1,    -1,   223,  1004,
    1009,   802,  1011,  1005,  1013,  1029,    -1,    -1,    -1,   405,
    1007,  1010,  1011,  1008,  1013,    -1,    -1,   270,    -1,   113,
      -1,   204,    -1,  1038,    -1,   113,    -1,   226,  1012,    -1,
    1012,    -1,  1000,    -1,  1016,    -1,   573,   574,  1016,    -1,
     573,  1015,   574,  1016,    -1,    -1,   436,  1014,  1020,    -1,
    1015,   575,  1121,    -1,  1121,    -1,   535,  1019,    -1,   536,
    1019,    -1,    -1,   696,  1017,  1209,    -1,    -1,   573,   696,
     574,  1018,  1212,    -1,  1019,   575,  1024,    -1,  1024,    -1,
    1020,   575,  1021,    -1,  1021,    -1,  1125,  1022,  1028,    -1,
     145,    -1,   437,    -1,    -1,  1022,    -1,    -1,   573,  1025,
    1026,   574,    -1,    -1,  1027,    -1,  1027,   575,  1028,    -1,
    1028,    -1,   877,    -1,   111,    -1,    -1,    -1,   344,   132,
    1030,   238,   524,  1036,    -1,    -1,    -1,   524,  1032,  1038,
     802,   922,   436,  1034,  1033,   958,   969,   979,    -1,  1034,
     575,  1035,    -1,  1035,    -1,  1125,  1022,  1028,    -1,  1036,
     575,  1037,    -1,  1037,    -1,  1125,  1022,  1028,    -1,    -1,
     270,    -1,    -1,   115,  1040,  1048,  1041,    -1,    -1,   175,
    1128,  1042,   958,   969,   979,    -1,    -1,  1045,  1043,   175,
     922,   958,    -1,    -1,   175,  1045,  1044,   530,   922,   958,
      -1,  1046,    -1,  1045,   575,  1046,    -1,  1134,  1047,   956,
      -1,  1134,   581,  1134,  1047,   956,    -1,    -1,   581,   567,
      -1,    -1,  1049,  1048,    -1,   382,    -1,   270,    -1,   214,
      -1,   505,  1051,  1000,    -1,    -1,   485,    -1,    -1,  1053,
      -1,  1054,    -1,  1053,   575,  1054,    -1,    86,    -1,   300,
      -1,    40,   230,    -1,    81,   481,    -1,   359,   160,    -1,
     231,    -1,   480,    -1,   449,    -1,    12,    -1,    -1,   172,
     381,   338,    -1,    -1,   441,  1057,  1058,    -1,    95,  1069,
      -1,  1065,   483,  1064,  1069,    -1,  1065,   502,  1064,  1069,
      -1,   485,   466,  1064,  1069,    -1,   347,   483,  1064,  1069,
      -1,    -1,   143,   713,  1059,  1061,    -1,  1065,    66,  1066,
    1128,  1064,  1069,    -1,   329,   287,   172,   445,   548,   275,
     145,  1131,    16,   276,   145,   981,    16,   280,   145,   980,
      -1,  1062,   263,    -1,   445,   205,    -1,    -1,    33,   150,
    1067,  1068,  1060,   974,    -1,   778,  1066,  1128,  1064,   958,
      -1,    67,   506,    -1,   485,   506,    -1,  1063,   142,    -1,
     373,    -1,    85,   573,   567,   574,   543,    -1,    85,   573,
     567,   574,   147,    -1,   543,   974,    -1,   147,   974,    -1,
     378,    -1,   377,  1052,  1055,   974,    -1,  1148,   466,  1069,
      -1,   220,   466,    -1,   320,   466,    -1,  1065,   376,    -1,
    1148,   539,  1069,    -1,   751,  1069,    -1,    65,  1069,    -1,
      30,   263,    -1,   263,    -1,   193,    -1,   193,   172,  1137,
      -1,    87,    94,   706,  1134,    -1,    87,   485,  1128,    -1,
      87,   542,  1128,    -1,   287,   466,    -1,   445,   466,    -1,
      87,   374,   612,    -1,    87,   179,   612,    -1,   374,   466,
    1069,    -1,   179,   466,  1069,    -1,   374,    63,   612,    -1,
     179,    63,   612,    -1,   466,    -1,   263,    -1,   287,    -1,
      32,    -1,    -1,   470,    -1,    -1,  1066,  1134,    -1,    -1,
     177,    -1,   175,    -1,   229,    -1,    -1,   229,  1131,    -1,
      -1,   175,   981,    -1,    -1,   252,  1131,    -1,   546,   877,
      -1,    -1,  1073,  1128,  1071,  1075,    -1,    -1,  1073,  1074,
    1072,   856,    -1,   116,    -1,   117,    -1,    -1,   156,    -1,
      -1,  1116,    -1,  1134,    -1,    -1,   168,   838,  1077,  1078,
      -1,  1078,   575,  1079,    -1,  1079,    -1,    -1,  1159,  1080,
    1081,    -1,   483,   548,   390,   262,    -1,   381,    47,    -1,
     205,    -1,   373,    -1,   263,    -1,   466,    -1,   445,    -1,
     287,    -1,   120,    -1,   409,    -1,    -1,   999,    -1,    -1,
     408,  1083,  1084,    -1,  1084,   575,  1085,    -1,  1085,    -1,
     445,    -1,   287,    -1,   381,    47,    -1,    -1,   379,  1087,
    1088,    -1,  1062,   263,  1089,    -1,   498,  1131,    -1,    27,
     877,    -1,    -1,   239,  1091,  1092,   877,    -1,    -1,    77,
      -1,   381,    -1,   529,  1134,    -1,    -1,   257,    96,  1095,
    1096,    -1,   257,   485,  1128,   175,   287,    -1,    -1,    -1,
      -1,    -1,  1102,  1101,   218,  1133,  1097,  1103,   226,  1098,
     485,  1128,  1099,   754,  1100,  1104,  1107,  1110,  1111,  1114,
      -1,   175,   287,    -1,    -1,   258,    -1,    -1,    75,    -1,
     270,    -1,    -1,   405,    -1,   214,    -1,    -1,    66,  1105,
      -1,  1105,  1106,    -1,  1106,    -1,   488,    45,  1116,    -1,
     350,   138,    45,  1116,    -1,   138,    45,  1116,    -1,   148,
      45,  1116,    -1,    -1,   255,  1108,    -1,  1108,  1109,    -1,
    1109,    -1,   488,    45,  1116,    -1,   464,    45,  1116,    -1,
      -1,   214,   338,   255,    -1,    -1,   573,  1112,   574,    -1,
     573,   574,    -1,  1112,   575,  1113,    -1,  1113,    -1,  1125,
      -1,   580,  1136,    -1,    -1,   436,  1036,    -1,   489,    -1,
     325,    -1,   513,   489,    -1,  1115,  1132,    -1,  1132,    -1,
     203,    -1,    34,    -1,   362,    -1,  1119,    -1,   566,  1120,
      -1,   565,  1120,    -1,  1115,    -1,  1120,    -1,   337,    -1,
     158,    -1,   504,    -1,   203,    -1,    34,    -1,   513,   203,
      -1,   513,    34,    -1,   100,  1115,    -1,   494,  1115,    -1,
     491,  1115,    -1,   338,    -1,   267,    -1,   510,    -1,   107,
      -1,   166,    -1,  1125,    -1,  1122,    -1,  1134,   581,   567,
      -1,  1134,   581,  1134,   581,   567,    -1,   877,    -1,  1134,
      -1,  1126,    -1,  1134,    -1,  1126,    -1,  1134,   581,  1134,
      -1,   581,  1134,   581,  1134,    -1,  1134,   581,  1134,   581,
    1134,    -1,  1134,    -1,  1134,   581,  1134,   581,  1134,    -1,
    1134,   581,  1134,    -1,   581,  1134,    -1,  1134,    -1,  1134,
     581,  1134,    -1,   581,  1134,    -1,  1134,    -1,   210,    -1,
     212,    -1,   489,    -1,   489,    -1,   489,    -1,  1130,    -1,
    1138,    -1,  1130,    -1,  1139,    -1,  1134,    -1,  1131,    -1,
     251,    -1,  1136,    -1,  1136,   580,  1136,    -1,    91,   876,
      -1,  1139,    -1,    20,    -1,    26,    -1,    28,    -1,    46,
      -1,    47,    -1,    55,    -1,    57,    -1,    61,    -1,    68,
      -1,    70,    -1,    80,    -1,   106,    -1,   128,    -1,   141,
      -1,   151,    -1,   168,    -1,   199,    -1,   202,    -1,   241,
      -1,   335,    -1,   347,    -1,   370,    -1,   402,    -1,   408,
      -1,   410,    -1,   417,    -1,   426,    -1,   429,    -1,   443,
      -1,   445,    -1,   465,    -1,   469,    -1,   505,    -1,   515,
      -1,   552,    -1,   525,    -1,     5,    -1,     7,    -1,     8,
      -1,     9,    -1,    10,    -1,    11,    -1,    17,    -1,    23,
      -1,    24,    -1,    25,    -1,    30,    -1,    33,    -1,    37,
      -1,    40,    -1,    42,    -1,    41,    -1,    44,    -1,    50,
      -1,    52,    -1,    54,    -1,    59,    -1,    60,    -1,    63,
      -1,    65,    -1,    66,    -1,    69,    -1,    71,    -1,    72,
      -1,    75,    -1,    77,    -1,    78,    -1,    81,    -1,    86,
      -1,    89,    -1,    96,    -1,    97,    -1,   100,    -1,   105,
      -1,   112,    -1,   114,    -1,   120,    -1,   122,    -1,   124,
      -1,   131,    -1,   132,    -1,   133,    -1,   144,    -1,   143,
      -1,   142,    -1,   147,    -1,   149,    -1,   150,    -1,   154,
      -1,   156,    -1,   159,    -1,   160,    -1,   173,    -1,   123,
      -1,   137,    -1,   177,    -1,   163,    -1,   164,    -1,   165,
      -1,   174,    -1,   187,    -1,   186,    -1,   190,    -1,   193,
      -1,   191,    -1,   200,    -1,   205,    -1,   209,    -1,   211,
      -1,   228,    -1,   215,    -1,   216,    -1,   233,    -1,   234,
      -1,   220,    -1,   224,    -1,   230,    -1,   231,    -1,   398,
      -1,   243,    -1,   247,    -1,   250,    -1,   256,    -1,   258,
      -1,   261,    -1,   263,    -1,   292,    -1,   287,    -1,   274,
      -1,   278,    -1,   275,    -1,   276,    -1,   288,    -1,   277,
      -1,   280,    -1,   273,    -1,   286,    -1,   282,    -1,   281,
      -1,   283,    -1,   284,    -1,   285,    -1,   290,    -1,   291,
      -1,   294,    -1,   295,    -1,   299,    -1,   300,    -1,   301,
      -1,   302,    -1,   303,    -1,   306,    -1,   307,    -1,   312,
      -1,   310,    -1,   314,    -1,   317,    -1,   318,    -1,   319,
      -1,   320,    -1,   322,    -1,   321,    -1,   323,    -1,   326,
      -1,   327,    -1,   330,    -1,   329,    -1,   331,    -1,   340,
      -1,   341,    -1,   343,    -1,   345,    -1,   346,    -1,   358,
      -1,   359,    -1,   360,    -1,   361,    -1,   363,    -1,   365,
      -1,   367,    -1,   371,    -1,   373,    -1,   375,    -1,   376,
      -1,   377,    -1,   378,    -1,   380,    -1,   381,    -1,   382,
      -1,   383,    -1,   384,    -1,   385,    -1,   386,    -1,   387,
      -1,   392,    -1,   393,    -1,   396,    -1,   397,    -1,   400,
      -1,   403,    -1,   406,    -1,   409,    -1,   412,    -1,   413,
      -1,   418,    -1,   420,    -1,   421,    -1,   423,    -1,   424,
      -1,   425,    -1,   428,    -1,   434,    -1,   433,    -1,   435,
      -1,   444,    -1,   438,    -1,   442,    -1,   447,    -1,   448,
      -1,   449,    -1,   457,    -1,   456,    -1,   459,    -1,   462,
      -1,   466,    -1,   470,    -1,   472,    -1,   473,    -1,   474,
      -1,   478,    -1,   479,    -1,   480,    -1,   481,    -1,   483,
      -1,   484,    -1,   486,    -1,   487,    -1,   490,    -1,   500,
      -1,   502,    -1,   491,    -1,   492,    -1,   493,    -1,   494,
      -1,   506,    -1,   507,    -1,   508,    -1,   179,    -1,   511,
      -1,   512,    -1,   520,    -1,   523,    -1,   527,    -1,   528,
      -1,   539,    -1,   542,    -1,   536,    -1,   543,    -1,   544,
      -1,   549,    -1,   551,    -1,   556,    -1,    -1,   436,  1142,
    1141,  1143,    -1,    -1,   349,    -1,  1144,    -1,  1143,   575,
    1144,    -1,    -1,  1145,  1150,    -1,  1147,    -1,   191,    -1,
     258,    -1,   435,    -1,    -1,   345,    -1,    -1,   191,    -1,
     258,    -1,   435,    -1,    -1,   191,   581,    -1,   258,   581,
      -1,   435,   581,    -1,  1151,    -1,  1147,  1152,    -1,  1146,
    1153,  1022,  1156,    -1,  1146,   500,   233,   250,  1154,    -1,
     580,  1136,  1022,   877,    -1,   580,   580,  1149,  1153,  1022,
    1156,    -1,   751,   756,    -1,   321,  1022,   877,    -1,   321,
     753,   758,    -1,   361,  1022,  1155,    -1,   361,   172,  1137,
    1022,  1155,    -1,  1134,    -1,  1134,   581,  1134,    -1,   111,
     581,  1134,    -1,   390,   511,    -1,   390,    69,    -1,   403,
     390,    -1,   433,    -1,   489,    -1,   361,   573,   489,   574,
      -1,   343,   573,   489,   574,    -1,   877,    -1,   111,    -1,
     344,    -1,    12,    -1,    32,    -1,    -1,   262,  1159,  1158,
    1160,    -1,   485,    -1,   483,    -1,  1161,    -1,  1160,   575,
    1161,    -1,  1128,   956,  1162,    -1,   390,    -1,   550,    -1,
     270,   550,    -1,   390,   258,    -1,    -1,   521,  1164,  1159,
      -1,   199,  1128,   347,   956,    -1,   199,  1129,    61,    -1,
      -1,   199,  1129,   390,  1166,  1167,   958,   975,    -1,  1168,
      -1,  1134,  1169,    -1,   164,    -1,   330,    -1,   164,    -1,
     330,    -1,   371,    -1,   243,    -1,    -1,  1171,  1170,   573,
    1027,   574,    -1,   145,    -1,   184,    -1,   244,    -1,   198,
      -1,   271,    -1,   415,   611,  1173,    -1,  1177,   344,  1176,
    1188,   175,  1190,    -1,  1177,   344,   179,  1188,   175,  1190,
      -1,  1177,   344,   374,  1188,   175,  1190,    -1,    12,  1178,
     575,   192,   349,   175,  1190,    -1,   192,   611,  1175,    -1,
    1177,   344,  1176,  1188,   498,  1190,  1195,  1196,    -1,  1177,
     344,   179,  1188,   498,  1190,  1195,  1196,    -1,  1177,   344,
     374,  1188,   498,  1190,  1195,  1196,    -1,    -1,   485,    -1,
    1179,    -1,    12,  1178,    -1,    -1,   373,    -1,  1180,    -1,
    1179,   575,  1180,    -1,    -1,   430,  1181,  1192,    -1,    -1,
     223,  1182,  1192,    -1,    -1,   524,  1183,  1192,    -1,    -1,
     394,  1184,  1192,    -1,   115,    -1,   526,    -1,   217,    -1,
      13,    -1,    87,    -1,   129,    -1,   151,    -1,   400,    -1,
     442,    -1,   375,    -1,   163,    -1,   192,   349,    -1,   441,
      95,    -1,   478,    -1,    87,   486,   483,    -1,   262,   483,
      -1,   406,   445,    -1,   406,    60,    -1,    87,   542,    -1,
     441,   542,    -1,    87,   420,    -1,    13,   420,    -1,    87,
     527,    -1,    -1,    16,    -1,  1187,  1185,  1186,    -1,  1187,
      -1,   474,   489,    -1,   234,   489,    -1,    59,   489,    -1,
     567,    -1,  1134,   581,   567,    -1,   567,   581,   567,    -1,
    1128,    -1,  1137,    -1,  1189,   575,  1137,    -1,  1191,    -1,
    1190,   575,  1191,    -1,  1137,   211,    45,   489,    -1,  1137,
     211,    45,   361,   489,    -1,  1137,    -1,    -1,   573,  1193,
     574,    -1,  1193,   575,  1194,    -1,  1194,    -1,  1134,    -1,
      -1,   407,  1186,    -1,   407,   463,    -1,   407,   551,    -1,
     407,   331,    -1,    -1,   548,  1197,    -1,  1197,  1198,    -1,
    1198,    -1,   192,   349,    -1,   291,   980,    -1,   294,   980,
      -1,   290,   980,    -1,   295,   980,    -1,    -1,    28,  1200,
    1201,    -1,    -1,   549,    -1,    -1,    16,   335,    52,    -1,
      16,    52,    -1,    -1,   399,    -1,   335,   399,    -1,    -1,
     426,    -1,    70,  1201,  1202,  1203,    -1,   417,  1201,  1202,
    1203,    -1,   417,  1201,   498,  1204,  1134,    -1,   426,  1134,
      -1,   399,   426,  1134,    -1,    -1,  1210,    -1,    -1,   516,
    1216,  1211,   857,    -1,    -1,  1210,    -1,  1213,    -1,    -1,
    1214,  1215,    -1,   970,   974,    -1,   976,    -1,    -1,   125,
      -1,    12,    -1,    -1,   430,  1219,   859,  1217,  1220,    -1,
     573,  1219,   858,  1217,  1220,   574,    -1,    -1,    -1,  1226,
    1222,    -1,  1225,  1223,    -1,  1227,  1224,  1232,    -1,  1232,
      -1,  1240,    -1,  1249,    -1,  1243,    -1,  1232,    -1,  1240,
      -1,  1249,    -1,  1243,    -1,  1242,    -1,  1225,    -1,  1226,
      -1,    -1,   112,   145,  1137,    -1,  1228,    -1,  1228,  1229,
      -1,  1229,    -1,   354,   405,    -1,    11,   145,   512,    -1,
      11,   145,   301,    -1,    11,   145,   487,    -1,    -1,  1229,
      -1,    -1,   461,   429,   112,    -1,   461,   429,   228,    -1,
      -1,  1231,   542,  1128,  1233,  1234,    18,  1236,  1239,    -1,
      -1,   573,  1235,   574,    -1,  1134,    -1,  1235,   575,  1134,
      -1,    -1,  1237,  1238,    -1,   430,   872,   859,    -1,   573,
     872,   858,   574,  1212,    -1,    -1,   548,    58,   349,    -1,
     548,    50,    58,   349,    -1,   548,   258,    58,   349,    -1,
      -1,   501,   872,   612,   688,   689,   344,   872,  1128,   172,
     872,   134,   424,  1241,   647,    -1,    10,   872,   179,  1134,
     413,   718,   509,  1131,    -1,   872,   179,  1134,   413,   718,
     509,  1131,    -1,    -1,    -1,    -1,    -1,    -1,   872,   179,
     612,   573,  1244,   623,   574,  1245,   413,  1246,   729,  1247,
     614,  1248,   647,    -1,    -1,    -1,    -1,    -1,   374,   872,
     612,  1250,   573,  1251,   627,   574,  1252,   614,  1253,   647,
      -1,   552,  1256,  1255,  1257,    -1,   552,   141,  1255,  1259,
      -1,   552,   370,  1255,    -1,   552,    70,  1255,  1258,    -1,
     552,   417,  1255,    -1,   552,   392,    -1,  1116,    -1,  1116,
     575,  1116,    -1,  1116,   575,  1116,   575,   980,    -1,    28,
      -1,   465,    -1,    -1,   236,    -1,   412,    -1,    -1,   346,
     363,    -1,    -1,    -1,   479,  1260,  1261,    -1,    -1,   172,
     303,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1256,  1256,  1269,  1268,  1293,  1300,  1302,  1306,  1307,
    1312,  1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,
    1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
    1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
    1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1355,  1356,  1357,  1358,  1362,  1371,  1372,
    1377,  1386,  1393,  1403,  1402,  1413,  1415,  1419,  1420,  1423,
    1436,  1435,  1454,  1453,  1464,  1465,  1468,  1473,  1478,  1483,
    1488,  1492,  1497,  1501,  1505,  1509,  1513,  1518,  1522,  1526,
    1542,  1546,  1558,  1557,  1577,  1576,  1587,  1586,  1597,  1596,
    1609,  1608,  1616,  1624,  1638,  1655,  1675,  1676,  1680,  1681,
    1686,  1688,  1690,  1692,  1694,  1696,  1698,  1704,  1705,  1706,
    1710,  1714,  1722,  1721,  1734,  1736,  1739,  1741,  1745,  1749,
    1756,  1758,  1762,  1763,  1768,  1787,  1813,  1815,  1819,  1820,
    1824,  1850,  1851,  1852,  1853,  1857,  1858,  1862,  1863,  1868,
    1871,  1898,  1897,  1966,  1982,  1981,  2030,  2056,  2056,  2088,
    2089,  2094,  2096,  2101,  2124,  2132,  2149,  2150,  2154,  2158,
    2167,  2174,  2181,  2191,  2206,  2224,  2225,  2229,  2229,  2282,
    2281,  2310,  2309,  2313,  2314,  2316,  2316,  2327,  2329,  2331,
    2381,  2421,  2439,  2438,  2457,  2476,  2478,  2479,  2483,  2504,
    2527,  2532,  2547,  2527,  2566,  2568,  2569,  2573,  2574,  2579,
    2586,  2578,  2605,  2604,  2620,  2621,  2625,  2626,  2631,  2636,
    2630,  2655,  2660,  2654,  2677,  2687,  2692,  2691,  2727,  2728,
    2733,  2732,  2765,  2765,  2780,  2779,  2816,  2828,  2833,  2827,
    2859,  2858,  2881,  2883,  2888,  2890,  2892,  2897,  2898,  2899,
    2905,  2914,  2915,  2915,  2919,  2921,  2920,  2923,  2922,  2928,
    2944,  2927,  2958,  2959,  2962,  2963,  2966,  2967,  2970,  2971,
    2974,  2975,  2978,  2979,  2982,  2985,  2986,  2988,  2990,  2993,
    2994,  2997,  2998,  2999,  3002,  3003,  3004,  3005,  3006,  3007,
    3008,  3009,  3010,  3025,  3031,  3032,  3033,  3034,  3039,  3044,
    3049,  3064,  3065,  3066,  3067,  3068,  3069,  3073,  3090,  3106,
    3116,  3117,  3118,  3119,  3120,  3121,  3124,  3125,  3126,  3129,
    3130,  3131,  3134,  3135,  3138,  3139,  3140,  3141,  3144,  3145,
    3149,  3150,  3154,  3155,  3162,  3167,  3172,  3177,  3194,  3198,
    3204,  3206,  3210,  3214,  3215,  3219,  3224,  3223,  3245,  3246,
    3247,  3248,  3250,  3251,  3253,  3255,  3256,  3258,  3260,  3263,
    3265,  3268,  3269,  3271,  3273,  3274,  3275,  3276,  3289,  3290,
    3292,  3294,  3306,  3308,  3310,  3312,  3313,  3314,  3315,  3316,
    3317,  3319,  3321,  3323,  3323,  3325,  3325,  3327,  3328,  3337,
    3338,  3339,  3342,  3343,  3344,  3345,  3346,  3350,  3354,  3355,
    3359,  3360,  3364,  3365,  3366,  3367,  3368,  3372,  3373,  3374,
    3375,  3376,  3379,  3381,  3382,  3386,  3387,  3388,  3391,  3398,
    3399,  3402,  3403,  3406,  3407,  3408,  3411,  3412,  3415,  3416,
    3417,  3418,  3421,  3422,  3425,  3426,  3429,  3430,  3433,  3434,
    3435,  3436,  3438,  3439,  3445,  3451,  3457,  3463,  3464,  3480,
    3486,  3490,  3491,  3495,  3503,  3507,  3508,  3511,  3512,  3516,
    3525,  3529,  3530,  3533,  3543,  3544,  3548,  3549,  3552,  3553,
    3556,  3557,  3558,  3559,  3568,  3569,  3572,  3573,  3576,  3577,
    3578,  3587,  3589,  3591,  3596,  3595,  3607,  3608,  3611,  3618,
    3629,  3630,  3633,  3634,  3637,  3638,  3639,  3640,  3641,  3644,
    3645,  3646,  3647,  3648,  3651,  3655,  3656,  3668,  3669,  3672,
    3673,  3676,  3677,  3681,  3682,  3683,  3686,  3687,  3700,  3701,
    3705,  3706,  3707,  3710,  3711,  3715,  3718,  3719,  3722,  3728,
    3742,  3743,  3746,  3747,  3750,  3751,  3759,  3758,  3782,  3781,
    3795,  3794,  3813,  3812,  3832,  3830,  3850,  3851,  3853,  3854,
    3855,  3856,  3857,  3860,  3868,  3869,  3873,  3878,  3877,  3885,
    3894,  3884,  3906,  3915,  3919,  3928,  3937,  3943,  3949,  3958,
    3967,  3985,  4006,  4011,  4015,  4022,  4023,  4026,  4027,  4031,
    4032,  4033,  4037,  4038,  4039,  4042,  4043,  4044,  4045,  4053,
    4052,  4063,  4071,  4070,  4080,  4090,  4099,  4100,  4107,  4107,
    4113,  4114,  4118,  4119,  4120,  4124,  4125,  4142,  4143,  4148,
    4147,  4158,  4157,  4168,  4167,  4177,  4178,  4179,  4184,  4183,
    4195,  4196,  4199,  4200,  4203,  4204,  4205,  4209,  4208,  4221,
    4220,  4237,  4238,  4241,  4242,  4245,  4246,  4247,  4248,  4249,
    4250,  4254,  4253,  4265,  4266,  4267,  4272,  4271,  4277,  4284,
    4289,  4297,  4298,  4301,  4313,  4322,  4323,  4326,  4339,  4340,
    4345,  4344,  4354,  4355,  4358,  4371,  4371,  4381,  4382,  4391,
    4392,  4401,  4410,  4412,  4415,  4445,  4449,  4448,  4470,  4478,
    4470,  4484,  4485,  4486,  4487,  4488,  4491,  4498,  4505,  4507,
    4518,  4519,  4522,  4523,  4529,  4530,  4531,  4532,  4538,  4544,
    4550,  4564,  4567,  4569,  4576,  4586,  4587,  4588,  4602,  4628,
    4633,  4638,  4639,  4642,  4643,  4644,  4645,  4646,  4650,  4651,
    4655,  4706,  4713,  4756,  4762,  4768,  4774,  4780,  4786,  4792,
    4798,  4802,  4808,  4814,  4820,  4826,  4832,  4835,  4841,  4851,
    4857,  4865,  4871,  4881,  4887,  4895,  4905,  4911,  4920,  4926,
    4935,  4938,  4944,  4950,  4956,  4962,  4968,  4974,  4980,  4986,
    4992,  4998,  5004,  5010,  5016,  5022,  5025,  5025,  5026,  5026,
    5027,  5027,  5028,  5028,  5030,  5031,  5032,  5033,  5034,  5035,
    5038,  5039,  5043,  5048,  5049,  5058,  5059,  5060,  5061,  5062,
    5068,  5070,  5076,  5082,  5088,  5094,  5095,  5102,  5109,  5115,
    5117,  5126,  5132,  5138,  5145,  5151,  5157,  5163,  5176,  5182,
    5195,  5208,  5221,  5234,  5240,  5246,  5252,  5258,  5264,  5270,
    5276,  5282,  5288,  5294,  5300,  5307,  5315,  5322,  5329,  5336,
    5343,  5349,  5355,  5362,  5368,  5374,  5381,  5387,  5394,  5400,
    5406,  5412,  5418,  5424,  5430,  5436,  5442,  5448,  5454,  5460,
    5466,  5475,  5482,  5495,  5501,  5507,  5513,  5519,  5526,  5537,
    5544,  5551,  5557,  5563,  5569,  5576,  5583,  5589,  5595,  5602,
    5609,  5615,  5621,  5627,  5633,  5640,  5647,  5655,  5661,  5667,
    5673,  5680,  5687,  5693,  5699,  5708,  5714,  5721,  5727,  5733,
    5739,  5745,  5751,  5757,  5763,  5769,  5778,  5787,  5793,  5799,
    5805,  5811,  5817,  5823,  5829,  5835,  5841,  5847,  5853,  5859,
    5865,  5871,  5888,  5887,  6030,  6036,  6043,  6049,  6056,  6063,
    6070,  6077,  6088,  6094,  6100,  6109,  6115,  6122,  6131,  6133,
    6135,  6137,  6139,  6141,  6145,  6148,  6151,  6153,  6155,  6157,
    6159,  6161,  6163,  6166,  6169,  6171,  6173,  6175,  6177,  6179,
    6182,  6184,  6186,  6188,  6193,  6194,  6195,  6199,  6200,  6204,
    6204,  6215,  6219,  6226,  6257,  6263,  6269,  6275,  6281,  6287,
    6296,  6303,  6305,  6302,  6312,  6318,  6329,  6335,  6341,  6347,
    6353,  6359,  6365,  6371,  6377,  6384,  6383,  6400,  6399,  6414,
    6422,  6430,  6443,  6444,  6448,  6453,  6459,  6462,  6476,  6475,
    6491,  6492,  6493,  6494,  6495,  6496,  6497,  6498,  6499,  6500,
    6501,  6505,  6506,  6510,  6510,  6520,  6521,  6524,  6525,  6528,
    6528,  6538,  6539,  6542,  6543,  6546,  6547,  6550,  6558,  6568,
    6569,  6578,  6583,  6584,  6604,  6606,  6610,  6608,  6625,  6623,
    6641,  6639,  6646,  6655,  6653,  6671,  6670,  6680,  6691,  6689,
    6708,  6707,  6718,  6728,  6729,  6730,  6735,  6735,  6754,  6752,
    6771,  6793,  6841,  6840,  6863,  6881,  6863,  6888,  6892,  6918,
    6919,  6921,  6923,  6926,  6927,  6933,  6940,  6949,  6948,  6955,
    6956,  6960,  6969,  6978,  6989,  7000,  7012,  7013,  7014,  7015,
    7016,  7017,  7018,  7019,  7020,  7021,  7022,  7023,  7026,  7027,
    7046,  7047,  7048,  7049,  7050,  7051,  7052,  7053,  7054,  7058,
    7059,  7060,  7061,  7064,  7066,  7067,  7070,  7071,  7079,  7081,
    7085,  7087,  7086,  7100,  7103,  7102,  7117,  7123,  7138,  7140,
    7143,  7145,  7149,  7150,  7163,  7181,  7185,  7186,  7190,  7203,
    7205,  7209,  7208,  7241,  7243,  7247,  7248,  7249,  7254,  7260,
    7264,  7265,  7269,  7273,  7280,  7287,  7296,  7300,  7306,  7312,
    7322,  7326,  7334,  7335,  7336,  7337,  7338,  7339,  7343,  7344,
    7345,  7346,  7347,  7350,  7353,  7352,  7382,  7383,  7386,  7387,
    7390,  7405,  7405,  7416,  7417,  7421,  7440,  7473,  7472,  7485,
    7484,  7493,  7505,  7516,  7515,  7532,  7539,  7539,  7553,  7560,
    7583,  7604,  7616,  7620,  7626,  7636,  7637,  7640,  7648,  7649,
    7653,  7654,  7662,  7671,  7661,  7681,  7688,  7680,  7698,  7710,
    7711,  7712,  7716,  7717,  7720,  7721,  7724,  7733,  7734,  7735,
    7737,  7736,  7746,  7747,  7750,  7751,  7752,  7752,  7753,  7753,
    7757,  7758,  7761,  7763,  7766,  7774,  7775,  7779,  7780,  7785,
    7784,  7797,  7798,  7801,  7806,  7814,  7815,  7823,  7825,  7825,
    7833,  7842,  7832,  7864,  7865,  7868,  7875,  7876,  7879,  7888,
    7889,  7895,  7894,  7908,  7907,  7916,  7915,  7923,  7922,  7932,
    7933,  7936,  7946,  7962,  7963,  7967,  7968,  7971,  7972,  7973,
    7976,  7986,  7988,  7990,  7992,  7995,  7996,  7999,  8003,  8007,
    8011,  8015,  8019,  8023,  8027,  8031,  8039,  8042,  8051,  8050,
    8064,  8072,  8081,  8090,  8099,  8109,  8108,  8111,  8121,  8131,
    8135,  8140,  8139,  8144,  8154,  8159,  8165,  8170,  8175,  8177,
    8179,  8181,  8183,  8185,  8193,  8202,  8204,  8206,  8208,  8217,
    8225,  8233,  8235,  8237,  8247,  8254,  8260,  8268,  8276,  8280,
    8284,  8291,  8298,  8306,  8314,  8324,  8337,  8351,  8364,  8365,
    8367,  8369,  8372,  8373,  8376,  8377,  8380,  8381,  8384,  8385,
    8388,  8389,  8391,  8393,  8400,  8412,  8411,  8426,  8425,  8435,
    8436,  8439,  8440,  8444,  8445,  8446,  8461,  8460,  8472,  8473,
    8476,  8476,  8477,  8478,  8479,  8480,  8481,  8482,  8483,  8484,
    8485,  8486,  8489,  8490,  8494,  8493,  8502,  8503,  8506,  8507,
    8508,  8512,  8511,  8521,  8525,  8529,  8541,  8541,  8549,  8550,
    8551,  8556,  8566,  8565,  8581,  8599,  8610,  8614,  8624,  8598,
    8629,  8638,  8639,  8642,  8643,  8655,  8659,  8660,  8661,  8663,
    8665,  8668,  8669,  8672,  8677,  8684,  8689,  8695,  8697,  8700,
    8701,  8704,  8709,  8715,  8717,  8724,  8725,  8726,  8729,  8731,
    8736,  8737,  8746,  8747,  8753,  8776,  8786,  8793,  8812,  8820,
    8832,  8847,  8868,  8869,  8870,  8879,  8880,  8881,  8888,  8894,
    8900,  8906,  8912,  8936,  8959,  8960,  8961,  8964,  8971,  8978,
    8982,  8990,  9005,  9006,  9009,  9017,  9030,  9033,  9074,  9078,
    9088,  9092,  9162,  9179,  9205,  9206,  9222,  9232,  9235,  9241,
    9247,  9256,  9266,  9267,  9295,  9310,  9326,  9341,  9342,  9353,
    9354,  9365,  9366,  9367,  9370,  9383,  9395,  9409,  9410,  9411,
    9412,  9413,  9414,  9415,  9416,  9417,  9418,  9419,  9420,  9421,
    9422,  9423,  9424,  9425,  9426,  9427,  9428,  9429,  9430,  9431,
    9432,  9433,  9434,  9435,  9436,  9437,  9438,  9439,  9440,  9441,
    9442,  9443,  9444,  9445,  9455,  9456,  9457,  9458,  9459,  9460,
    9461,  9462,  9463,  9464,  9465,  9466,  9467,  9468,  9469,  9470,
    9471,  9472,  9473,  9474,  9475,  9476,  9477,  9478,  9479,  9480,
    9481,  9482,  9483,  9484,  9485,  9486,  9487,  9488,  9489,  9490,
    9491,  9492,  9493,  9494,  9495,  9496,  9497,  9498,  9499,  9500,
    9501,  9502,  9503,  9504,  9505,  9506,  9507,  9508,  9509,  9510,
    9511,  9512,  9513,  9514,  9515,  9516,  9517,  9518,  9519,  9520,
    9521,  9522,  9523,  9524,  9525,  9526,  9527,  9528,  9529,  9530,
    9531,  9532,  9533,  9534,  9535,  9536,  9537,  9538,  9539,  9540,
    9541,  9542,  9543,  9544,  9545,  9546,  9547,  9548,  9549,  9550,
    9551,  9552,  9553,  9554,  9555,  9556,  9557,  9558,  9559,  9560,
    9561,  9562,  9563,  9564,  9565,  9566,  9567,  9568,  9569,  9570,
    9571,  9572,  9573,  9574,  9575,  9576,  9577,  9578,  9579,  9580,
    9581,  9582,  9583,  9584,  9585,  9586,  9587,  9588,  9589,  9590,
    9591,  9592,  9593,  9594,  9595,  9596,  9597,  9598,  9599,  9600,
    9601,  9602,  9603,  9604,  9605,  9606,  9607,  9608,  9609,  9610,
    9611,  9612,  9613,  9614,  9615,  9616,  9617,  9618,  9619,  9620,
    9621,  9622,  9623,  9624,  9625,  9626,  9627,  9628,  9629,  9630,
    9631,  9632,  9633,  9634,  9635,  9636,  9637,  9638,  9639,  9640,
    9641,  9642,  9643,  9644,  9645,  9646,  9647,  9648,  9649,  9650,
    9651,  9652,  9653,  9654,  9655,  9656,  9657,  9658,  9659,  9660,
    9661,  9662,  9663,  9664,  9665,  9666,  9667,  9668,  9669,  9670,
    9671,  9672,  9673,  9674,  9675,  9676,  9677,  9678,  9679,  9680,
    9687,  9686,  9700,  9701,  9704,  9705,  9708,  9708,  9787,  9788,
    9789,  9790,  9794,  9795,  9799,  9800,  9801,  9802,  9806,  9807,
    9808,  9809,  9813,  9814,  9817,  9901,  9920,  9930,  9938,  9951,
    9966,  9983, 10007, 10017, 10055, 10098, 10112, 10113, 10114, 10115,
   10119, 10120, 10129, 10141, 10142, 10143, 10149, 10155, 10168, 10167,
   10183, 10184, 10187, 10188, 10191, 10203, 10204, 10205, 10206, 10211,
   10210, 10231, 10243, 10256, 10255, 10277, 10278, 10282, 10283, 10287,
   10288, 10289, 10290, 10292, 10291, 10302, 10303, 10304, 10305, 10306,
   10312, 10317, 10324, 10337, 10349, 10356, 10361, 10369, 10382, 10396,
   10398, 10401, 10402, 10409, 10411, 10415, 10416, 10419, 10419, 10420,
   10420, 10421, 10421, 10422, 10422, 10423, 10424, 10425, 10426, 10427,
   10428, 10429, 10430, 10431, 10432, 10433, 10434, 10435, 10436, 10437,
   10438, 10439, 10440, 10441, 10442, 10443, 10444, 10445, 10450, 10451,
   10455, 10456, 10460, 10470, 10480, 10493, 10507, 10520, 10533, 10546,
   10547, 10556, 10557, 10566, 10593, 10595, 10602, 10606, 10609, 10610,
   10613, 10641, 10642, 10646, 10650, 10654, 10661, 10662, 10665, 10666,
   10670, 10671, 10677, 10683, 10689, 10699, 10698, 10708, 10709, 10713,
   10714, 10715, 10719, 10720, 10721, 10725, 10726, 10730, 10740, 10747,
   10757, 10766, 10780, 10781, 10786, 10785, 10826, 10827, 10828, 10832,
   10832, 10856, 10857, 10861, 10862, 10863, 10867, 10872, 10877, 10884,
   10905, 10927, 10929, 10931, 10936, 10937, 10938, 10939, 10943, 10944,
   10945, 10946, 10947, 10957, 10958, 10963, 10976, 10989, 10991, 10993,
   10998, 11003, 11005, 11007, 11013, 11014, 11020, 11021, 11023, 11029,
   11028, 11043, 11044, 11048, 11055, 11065, 11065, 11083, 11092, 11105,
   11106, 11108, 11110, 11123, 11121, 11187, 11198, 11216, 11245, 11249,
   11257, 11269, 11212, 11299, 11323, 11328, 11337, 11298, 11358, 11362,
   11366, 11370, 11374, 11378, 11384, 11391, 11398, 11407, 11408, 11412,
   11413, 11414, 11418, 11419, 11423, 11424, 11424, 11429, 11430
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "END_OF_INPUT", "ABORT_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "ATAN",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BENCHMARK_SYM", "BERKELEY_DB_SYM", "BIGINT", "BINARY",
  "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR",
  "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM",
  "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED",
  "CAST_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPRESSED_SYM", "CONCAT", "CONCAT_WS", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONVERT_SYM",
  "CONVERT_TZ_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURTIME", "DATABASE",
  "DATABASES", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DECODE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_DECRYPT_SYM", "DES_ENCRYPT_SYM", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSEIF_SYM",
  "ELT_FUNC", "ENABLE_SYM", "ENCLOSED", "ENCODE_SYM", "ENCRYPT", "END",
  "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SET", "EXTENDED_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FIELD_FUNC",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FORMAT_SYM", "FOR_SYM",
  "FOUND_SYM", "FRAC_SECOND_SYM", "FROM", "FROM_UNIXTIME", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "FUNC_ARG0", "FUNC_ARG1", "FUNC_ARG2",
  "FUNC_ARG3", "GE", "GEOMCOLLFROMTEXT", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GREATEST_SYM", "GROUP",
  "GROUP_CONCAT_SYM", "GROUP_UNIQUE_USERS", "GT_SYM", "HANDLER_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INNER_SYM", "INNOBASE_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT",
  "INSERT_METHOD", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_SYM", "KILL_SYM", "LABEL_SYM",
  "LANGUAGE_SYM", "LAST_INSERT_ID", "LAST_SYM", "LE", "LEADING",
  "LEAST_SYM", "LEAVES", "LEAVE_SYM", "LEFT", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEFROMTEXT", "LINES", "LINESTRING", "LOAD",
  "LOCAL_SYM", "LOCATE", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGS_SYM", "LOG_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM",
  "LOOP_SYM", "LOW_PRIORITY", "LT", "MAKE_SET_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_POS_WAIT", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SYM", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MICROSECOND_SYM", "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM",
  "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS", "MIN_SYM",
  "MLINEFROMTEXT", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MPOINTFROMTEXT", "MPOLYFROMTEXT", "MULTILINESTRING",
  "MULTIPOINT", "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEW_SYM", "NEXT_SYM", "NONE_SYM", "NOT2_SYM", "NOT_SYM",
  "NOW_SYM", "NO_SYM", "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM",
  "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM", "OJ_SYM", "OLD_PASSWORD",
  "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARTIAL", "PASSWORD",
  "PARAM_MARKER", "PHASE_SYM", "POINTFROMTEXT", "POINT_SYM",
  "POLYFROMTEXT", "POLYGON", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PURGE", "QUARTER_SYM",
  "QUERY_SYM", "QUICK", "RAID_0_SYM", "RAID_CHUNKS", "RAID_CHUNKSIZE",
  "RAID_STRIPED_SYM", "RAID_TYPE", "RAND", "READS_SYM", "READ_SYM", "REAL",
  "RECOVER_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "RENAME", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESOURCES", "RESTORE_SYM",
  "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUND", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_COUNT_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE",
  "SMALLINT", "SNAPSHOT_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "START_SYM", "STATUS_SYM",
  "STD_SYM", "STDDEV_SAMP_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBSTRING",
  "SUBSTRING_INDEX", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM",
  "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE", "TABLE_SYM",
  "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGER_SYM", "TRIGGERS_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "UDF_SONAME_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDO_SYM", "UNICODE_SYM", "UNION_SYM",
  "UNIQUE_SYM", "UNIQUE_USERS", "UNIX_TIMESTAMP", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VAR_SAMP_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VIEW_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WORK_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM",
  "XOR", "YEARWEEK", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "TABLE_REF_PRIORITY", "ELSE", "THEN_SYM", "CASE_SYM", "BETWEEN_SYM",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "NEG",
  "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'",
  "$accept", "query", "$@1", "opt_end_of_input", "verb_clause",
  "statement", "deallocate", "deallocate_or_drop", "prepare",
  "prepare_src", "execute", "$@2", "execute_using", "execute_var_list",
  "execute_var_ident", "help", "$@3", "change", "$@4", "master_defs",
  "master_def", "master_file_def", "create", "$@5", "$@6", "$@7", "$@8",
  "$@9", "clear_privileges", "sp_name", "sp_a_chistics", "sp_c_chistics",
  "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@10",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@11", "$@12",
  "sp_cursor_stmt", "$@13", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "opt_value", "sp_hcond", "sp_decl_idents",
  "sp_opt_default", "sp_proc_stmt", "$@14", "$@15", "$@16", "$@17", "$@18",
  "sp_opt_fetch_noise", "sp_fetch_list", "sp_if", "$@19", "$@20", "$@21",
  "sp_elseifs", "case_stmt_specification", "simple_case_stmt", "$@22",
  "$@23", "searched_case_stmt", "$@24", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@25", "$@26",
  "searched_when_clause", "$@27", "$@28", "else_clause_opt",
  "sp_labeled_control", "$@29", "sp_opt_label", "sp_labeled_block", "$@30",
  "sp_unlabeled_block", "$@31", "sp_block_content", "$@32",
  "sp_unlabeled_control", "$@33", "$@34", "$@35", "trg_action_time",
  "trg_event", "create2", "create2a", "$@36", "create3", "$@37", "$@38",
  "create_select", "$@39", "$@40", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "row_types", "raid_types",
  "merge_insert_types", "opt_select_from", "udf_type", "field_list",
  "field_list_item", "column_def", "key_def", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@41",
  "type", "$@42", "$@43", "spatial_type", "char", "nchar", "varchar",
  "nvarchar", "int_type", "real_type", "float_options", "precision",
  "field_options", "field_opt_list", "field_option", "opt_field_length",
  "field_length", "opt_precision", "opt_attribute", "opt_attribute_list",
  "attribute", "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "$@44", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "key_type", "key_type_fulltext_or_spatial",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "fulltext_or_spatial", "opt_unique", "key_alg",
  "opt_btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_component", "string_list", "alter", "$@45", "$@46", "$@47", "$@48",
  "$@49", "ident_or_empty", "alter_list", "add_column", "alter_list_item",
  "$@50", "$@51", "$@52", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@53", "$@54", "start",
  "start_transaction_opts", "slave_thread_opts", "$@55",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "restore", "$@56", "backup", "$@57", "checksum",
  "$@58", "opt_checksum_type", "repair", "$@59", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@60", "check", "$@61",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@62", "opt_no_write_to_binlog", "rename", "$@63", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "$@64",
  "preload_list", "preload_keys", "cache_keys_spec", "$@65",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_init2", "$@66", "select_part2", "$@67", "$@68",
  "select_into", "select_from", "select_options", "select_option_list",
  "select_option", "select_lock_type", "select_item_list", "select_item",
  "remember_name", "remember_end", "select_item2", "select_alias",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "interval_expr",
  "simple_expr", "$@69", "geometry_function", "fulltext_options",
  "udf_expr_list", "udf_expr_list2", "$@70", "udf_expr_list3", "udf_expr",
  "sum_expr", "$@71", "$@72", "$@73", "variable", "$@74", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "in_sum_expr", "$@75", "cast_type", "opt_expr_list", "expr_list", "$@76",
  "expr_list2", "ident_list_arg", "ident_list", "$@77", "ident_list2",
  "opt_expr", "opt_else", "when_list", "table_ref", "join_table_list",
  "derived_table_list", "join_table", "$@78", "$@79", "$@80", "$@81",
  "$@82", "$@83", "$@84", "normal_join", "table_factor", "$@85", "$@86",
  "select_derived", "$@87", "select_derived2", "$@88", "$@89",
  "get_select_lex", "select_derived_init", "opt_outer", "opt_for_join",
  "opt_key_definition", "key_usage_list", "$@90", "key_list_or_empty",
  "key_usage_list2", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "$@91", "having_clause", "$@92", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@93", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "ulonglong_num", "procedure_clause", "$@94", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@95",
  "select_var_list", "select_var_ident", "into", "$@96",
  "into_destination", "$@97", "do", "$@98", "drop", "$@99", "table_list",
  "table_name", "if_exists", "opt_temporary", "insert", "$@100", "$@101",
  "replace", "$@102", "$@103", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@104", "fields",
  "insert_values", "$@105", "$@106", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@107",
  "opt_values", "values", "expr_or_default", "opt_insert_update", "$@108",
  "update", "$@109", "$@110", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@111", "single_multi", "$@112", "$@113", "$@114", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@115", "show_param",
  "$@116", "$@117", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@118", "$@119", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@120",
  "flush_options", "flush_option", "$@121", "opt_table_list", "reset",
  "$@122", "reset_options", "reset_option", "purge", "$@123",
  "purge_options", "purge_option", "kill", "$@124", "kill_option", "use",
  "load", "$@125", "load_data", "$@126", "$@127", "$@128", "$@129",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_ignore_lines", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@130",
  "opt_option", "option_value_list", "option_type_value", "$@131",
  "option_type", "option_type2", "opt_var_type", "opt_var_ident_type",
  "ext_option_value", "sys_option_value", "option_value",
  "internal_variable_name", "isolation_types", "text_or_password",
  "set_expr_or_default", "lock", "$@132", "table_or_tables",
  "table_lock_list", "table_lock", "lock_option", "unlock", "$@133",
  "handler", "$@134", "handler_read_or_scan", "handler_scan_function",
  "handler_rkey_function", "$@135", "handler_rkey_mode", "revoke",
  "revoke_command", "grant", "grant_command", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@136", "$@137", "$@138", "$@139", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "$@140", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@141", "union_opt",
  "union_order_or_limit", "$@142", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_algorithm_opt", "view_suid",
  "view_tail", "$@143", "view_list_opt", "view_list", "view_select",
  "$@144", "view_select_aux", "view_check_option", "trigger_tail", "$@145",
  "udf_tail", "sf_tail", "$@146", "$@147", "$@148", "$@149", "$@150",
  "sp_tail", "$@151", "$@152", "$@153", "$@154", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@155", "opt_migrate", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   124,    38,    45,    43,    42,    47,    37,
      94,   126,   818,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   583,   584,   585,   584,   584,   586,   586,   587,   587,
     588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   588,   588,   588,   588,   589,   590,   590,
     591,   592,   592,   594,   593,   595,   595,   596,   596,   597,
     599,   598,   601,   600,   602,   602,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   604,   604,
     604,   604,   606,   605,   607,   605,   608,   605,   609,   605,
     610,   605,   605,   611,   612,   612,   613,   613,   614,   614,
     615,   615,   615,   615,   615,   615,   615,   616,   616,   616,
     617,   617,   619,   618,   620,   620,   621,   621,   622,   622,
     623,   623,   624,   624,   625,   626,   627,   627,   628,   628,
     629,   630,   630,   630,   630,   631,   631,   632,   632,   633,
     633,   635,   634,   634,   636,   634,   634,   638,   637,   639,
     639,   640,   640,   641,   642,   642,   643,   643,   644,   644,
     644,   644,   644,   645,   645,   646,   646,   648,   647,   649,
     647,   650,   647,   647,   647,   651,   647,   647,   647,   647,
     647,   647,   652,   647,   647,   653,   653,   653,   654,   654,
     656,   657,   658,   655,   659,   659,   659,   660,   660,   662,
     663,   661,   665,   664,   666,   666,   667,   667,   669,   670,
     668,   672,   673,   671,   674,   674,   676,   675,   677,   677,
     679,   678,   681,   680,   683,   682,   684,   685,   686,   684,
     687,   684,   688,   688,   689,   689,   689,   690,   690,   690,
     690,   691,   692,   691,   693,   694,   693,   695,   693,   697,
     698,   696,   699,   699,   700,   700,   701,   701,   702,   702,
     703,   703,   704,   704,   705,   706,   706,   707,   707,   708,
     708,   709,   709,   709,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   710,   711,   712,   713,
     714,   714,   714,   714,   714,   714,   715,   715,   715,   716,
     716,   716,   717,   717,   718,   718,   718,   718,   719,   719,
     720,   720,   721,   721,   722,   722,   722,   722,   722,   722,
     723,   723,   724,   725,   725,   726,   728,   727,   729,   729,
     729,   729,   729,   729,   729,   729,   729,   729,   729,   729,
     729,   729,   729,   729,   729,   729,   729,   729,   729,   729,
     729,   729,   729,   729,   729,   729,   729,   729,   729,   729,
     729,   729,   729,   730,   729,   731,   729,   729,   729,   732,
     732,   732,   732,   732,   732,   732,   732,   733,   734,   734,
     735,   735,   736,   736,   736,   736,   736,   737,   737,   737,
     737,   737,   738,   738,   738,   739,   739,   739,   740,   741,
     741,   742,   742,   743,   743,   743,   744,   744,   745,   745,
     745,   745,   746,   746,   747,   747,   748,   748,   749,   749,
     749,   749,   749,   749,   749,   749,   749,   749,   749,   750,
     750,   751,   751,   752,   752,   753,   753,   754,   754,   755,
     755,   756,   756,   757,   758,   758,   759,   759,   760,   760,
     761,   761,   761,   761,   761,   761,   762,   762,   763,   763,
     763,   763,   764,   764,   766,   765,   767,   767,   768,   768,
     769,   769,   770,   770,   771,   771,   771,   771,   771,   772,
     772,   772,   772,   772,   773,   774,   774,   775,   775,   776,
     776,   777,   777,   778,   778,   778,   779,   779,   780,   780,
     781,   781,   781,   782,   782,   782,   783,   783,   784,   784,
     785,   785,   786,   786,   787,   787,   789,   788,   790,   788,
     791,   788,   792,   788,   793,   788,   794,   794,   795,   795,
     795,   795,   795,   796,   797,   797,   797,   798,   797,   799,
     800,   797,   797,   797,   797,   797,   797,   797,   797,   797,
     797,   797,   797,   797,   797,   801,   801,   802,   802,   803,
     803,   803,   804,   804,   804,   805,   805,   805,   805,   807,
     806,   806,   808,   806,   806,   809,   810,   810,   812,   811,
     813,   813,   814,   814,   814,   815,   815,   816,   816,   818,
     817,   820,   819,   822,   821,   823,   823,   823,   825,   824,
     826,   826,   827,   827,   828,   828,   828,   830,   829,   832,
     831,   833,   833,   834,   834,   835,   835,   835,   835,   835,
     835,   837,   836,   838,   838,   838,   840,   839,   839,   841,
     841,   842,   842,   843,   844,   845,   845,   846,   847,   847,
     849,   848,   850,   850,   851,   853,   852,   854,   854,   855,
     855,   856,   857,   857,   858,   858,   860,   859,   862,   863,
     861,   864,   864,   864,   864,   864,   865,   865,   866,   866,
     867,   867,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   869,   869,   869,   870,   870,   870,   871,   872,
     873,   874,   874,   875,   875,   875,   875,   875,   876,   876,
     877,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     877,   878,   878,   878,   878,   878,   878,   879,   879,   879,
     879,   879,   879,   879,   879,   879,   879,   879,   879,   879,
     879,   880,   880,   880,   880,   880,   880,   880,   880,   880,
     880,   880,   880,   880,   880,   880,   881,   881,   882,   882,
     883,   883,   884,   884,   885,   885,   885,   885,   885,   885,
     886,   886,   887,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   889,   888,   888,   888,   888,   888,   888,   888,
     888,   888,   888,   888,   888,   888,   888,   888,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   890,   890,   890,   891,   891,   891,   892,   892,   894,
     893,   895,   895,   896,   897,   897,   897,   897,   897,   897,
     897,   898,   899,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   900,   897,   902,   901,   903,
     903,   903,   904,   904,   905,   905,   906,   906,   908,   907,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   910,   910,   912,   911,   913,   913,   914,   914,   916,
     915,   917,   917,   918,   918,   919,   919,   920,   920,   921,
     921,   922,   923,   923,   924,   924,   925,   924,   926,   924,
     927,   924,   924,   928,   924,   929,   924,   924,   930,   924,
     931,   924,   924,   932,   932,   932,   934,   933,   935,   933,
     933,   933,   937,   936,   939,   940,   938,   941,   942,   943,
     943,   944,   944,   945,   945,   945,   945,   947,   946,   948,
     948,   949,   949,   949,   950,   950,   951,   951,   951,   951,
     951,   951,   951,   951,   951,   951,   951,   951,   952,   952,
     953,   953,   953,   953,   953,   953,   953,   953,   953,   954,
     954,   954,   954,   955,   955,   955,   956,   956,   957,   957,
     958,   959,   958,   960,   961,   960,   962,   962,   963,   963,
     964,   964,   965,   965,   965,   966,   967,   967,   968,   969,
     969,   971,   970,   972,   972,   973,   973,   973,   974,   974,
     975,   975,   976,   977,   977,   977,   978,   978,   978,   978,
     979,   979,   980,   980,   980,   980,   980,   980,   981,   981,
     981,   981,   981,   982,   983,   982,   984,   984,   985,   985,
     986,   988,   987,   989,   989,   990,   990,   992,   991,   994,
     993,   993,   993,   996,   995,   997,   998,   997,   997,   997,
     997,   997,   997,   997,   997,   999,   999,  1000,  1001,  1001,
    1002,  1002,  1004,  1005,  1003,  1007,  1008,  1006,  1009,  1009,
    1009,  1009,  1010,  1010,  1011,  1011,  1012,  1013,  1013,  1013,
    1014,  1013,  1015,  1015,  1016,  1016,  1017,  1016,  1018,  1016,
    1019,  1019,  1020,  1020,  1021,  1022,  1022,  1023,  1023,  1025,
    1024,  1026,  1026,  1027,  1027,  1028,  1028,  1029,  1030,  1029,
    1032,  1033,  1031,  1034,  1034,  1035,  1036,  1036,  1037,  1038,
    1038,  1040,  1039,  1042,  1041,  1043,  1041,  1044,  1041,  1045,
    1045,  1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,  1049,
    1050,  1051,  1051,  1052,  1052,  1053,  1053,  1054,  1054,  1054,
    1054,  1054,  1054,  1054,  1054,  1054,  1055,  1055,  1057,  1056,
    1058,  1058,  1058,  1058,  1058,  1059,  1058,  1058,  1058,  1058,
    1058,  1060,  1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,
    1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,
    1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,  1058,
    1058,  1058,  1058,  1058,  1058,  1058,  1061,  1061,  1062,  1062,
    1063,  1063,  1064,  1064,  1065,  1065,  1066,  1066,  1067,  1067,
    1068,  1068,  1069,  1069,  1069,  1071,  1070,  1072,  1070,  1073,
    1073,  1074,  1074,  1075,  1075,  1075,  1077,  1076,  1078,  1078,
    1080,  1079,  1079,  1079,  1079,  1079,  1079,  1079,  1079,  1079,
    1079,  1079,  1081,  1081,  1083,  1082,  1084,  1084,  1085,  1085,
    1085,  1087,  1086,  1088,  1089,  1089,  1091,  1090,  1092,  1092,
    1092,  1093,  1095,  1094,  1094,  1097,  1098,  1099,  1100,  1096,
    1096,  1101,  1101,  1102,  1102,  1102,  1103,  1103,  1103,  1104,
    1104,  1105,  1105,  1106,  1106,  1106,  1106,  1107,  1107,  1108,
    1108,  1109,  1109,  1110,  1110,  1111,  1111,  1111,  1112,  1112,
    1113,  1113,  1114,  1114,  1115,  1115,  1115,  1115,  1116,  1116,
    1116,  1117,  1118,  1118,  1118,  1119,  1119,  1119,  1119,  1119,
    1119,  1119,  1119,  1119,  1119,  1119,  1119,  1120,  1120,  1120,
    1120,  1120,  1121,  1121,  1122,  1122,  1123,  1124,  1124,  1125,
    1125,  1126,  1126,  1126,  1127,  1127,  1127,  1127,  1128,  1128,
    1128,  1129,  1130,  1130,  1131,  1132,  1133,  1134,  1134,  1135,
    1135,  1136,  1136,  1136,  1137,  1137,  1137,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1141,  1140,  1142,  1142,  1143,  1143,  1145,  1144,  1146,  1146,
    1146,  1146,  1147,  1147,  1148,  1148,  1148,  1148,  1149,  1149,
    1149,  1149,  1150,  1150,  1151,  1151,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1153,  1153,  1153,  1154,  1154,  1154,  1154,
    1155,  1155,  1155,  1156,  1156,  1156,  1156,  1156,  1158,  1157,
    1159,  1159,  1160,  1160,  1161,  1162,  1162,  1162,  1162,  1164,
    1163,  1165,  1165,  1166,  1165,  1167,  1167,  1168,  1168,  1169,
    1169,  1169,  1169,  1170,  1169,  1171,  1171,  1171,  1171,  1171,
    1172,  1173,  1173,  1173,  1173,  1174,  1175,  1175,  1175,  1176,
    1176,  1177,  1177,  1178,  1178,  1179,  1179,  1181,  1180,  1182,
    1180,  1183,  1180,  1184,  1180,  1180,  1180,  1180,  1180,  1180,
    1180,  1180,  1180,  1180,  1180,  1180,  1180,  1180,  1180,  1180,
    1180,  1180,  1180,  1180,  1180,  1180,  1180,  1180,  1185,  1185,
    1186,  1186,  1187,  1187,  1187,  1188,  1188,  1188,  1188,  1189,
    1189,  1190,  1190,  1191,  1191,  1191,  1192,  1192,  1193,  1193,
    1194,  1195,  1195,  1195,  1195,  1195,  1196,  1196,  1197,  1197,
    1198,  1198,  1198,  1198,  1198,  1200,  1199,  1201,  1201,  1202,
    1202,  1202,  1203,  1203,  1203,  1204,  1204,  1205,  1206,  1206,
    1207,  1208,  1209,  1209,  1211,  1210,  1212,  1212,  1212,  1214,
    1213,  1215,  1215,  1216,  1216,  1216,  1217,  1218,  1218,  1219,
    1220,  1221,  1221,  1221,  1222,  1222,  1222,  1222,  1223,  1223,
    1223,  1223,  1223,  1224,  1224,  1225,  1226,  1227,  1227,  1227,
    1228,  1229,  1229,  1229,  1230,  1230,  1231,  1231,  1231,  1233,
    1232,  1234,  1234,  1235,  1235,  1237,  1236,  1238,  1238,  1239,
    1239,  1239,  1239,  1241,  1240,  1242,  1242,  1244,  1245,  1246,
    1247,  1248,  1243,  1250,  1251,  1252,  1253,  1249,  1254,  1254,
    1254,  1254,  1254,  1254,  1255,  1255,  1255,  1256,  1256,  1257,
    1257,  1257,  1258,  1258,  1259,  1260,  1259,  1261,  1261
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     1,     2,     0,     4,     0,     2,     3,     1,     2,
       0,     3,     0,     5,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     0,     7,     0,    11,     0,    10,     0,     6,
       0,     3,     4,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     1,     3,     0,     2,     0,     2,     0,
       3,     0,     5,     1,     1,     0,     2,     1,     1,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     2,     2,
       4,     4,     0,     4,     0,     0,     5,     0,     7,     0,
       0,     6,     0,     1,     0,     1,     1,     2,     1,     1,
       0,     1,     1,     2,     1,     0,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     1,     1,     3,     4,     4,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     2,     2,     7,     5,     8,     8,     2,     2,
       0,     1,     2,     0,     1,     2,     0,     4,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     1,     2,     1,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       1,     2,     1,     1,     1,     1,     0,     1,     3,     3,
       3,     3,     0,     1,     0,     1,     2,     1,     1,     2,
       2,     4,     1,     3,     2,     1,     2,     2,     2,     2,
       1,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     0,     1,
       0,     2,     1,     2,     3,     2,     0,     1,     0,     1,
       1,     2,     0,     1,     0,     4,     1,     4,     3,     1,
       0,     1,     2,     1,     3,     3,     2,     2,     2,     1,
       1,     2,     2,     2,     1,     2,     2,     2,     2,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     0,     1,
       0,     2,     2,     1,     1,     1,     4,     2,     1,     4,
       0,     1,     0,     2,     1,     3,     0,     6,     0,     5,
       0,     5,     0,     5,     0,    11,     0,     1,     0,     2,
       2,     1,     3,     2,     3,     2,     4,     0,     6,     0,
       0,     8,     4,     4,     3,     3,     2,     2,     6,     5,
       3,     5,     1,     1,     1,     0,     1,     0,     1,     0,
       1,     1,     0,     2,     1,     0,     1,     1,     1,     0,
       5,     3,     0,     5,     3,     3,     0,     3,     0,     2,
       1,     3,     0,     1,     1,     0,     2,     1,     3,     0,
       6,     0,     6,     0,     5,     0,     1,     1,     0,     6,
       0,     1,     1,     2,     1,     1,     1,     0,     5,     0,
       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     5,     1,     3,     2,     1,     1,
       0,     6,     1,     3,     3,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     0,     3,     0,     0,
       6,     2,     1,     1,     2,     2,     8,     4,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     2,     4,     3,     1,     1,     4,     0,
       0,     1,     1,     0,     2,     2,     1,     1,     0,     2,
       3,     3,     3,     2,     3,     4,     3,     4,     3,     4,
       1,     3,     4,     3,     3,     6,     1,     5,     6,     5,
       7,     6,     8,     5,     6,     4,     4,     5,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     4,     4,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     1,     1,     3,
       2,     2,     2,     2,     3,     3,     5,     6,     4,     4,
       7,     4,     2,     6,     5,     6,     6,     4,     4,     3,
       4,     6,     8,     6,     8,     6,     4,     6,     4,     6,
       4,     4,     4,     4,     6,     8,     2,     2,     4,     2,
       7,     7,     3,     4,     4,     6,     6,     4,     6,     6,
       6,     4,     6,     4,     6,     8,    10,    12,     6,     4,
       6,     6,     1,     6,     4,     8,    10,     4,     1,     3,
       4,     6,     6,     8,     6,     6,     4,     6,     6,     8,
       4,     4,     6,     4,     2,     4,     4,     4,     6,     4,
       4,     3,     8,     6,     4,     6,     3,     6,     8,     4,
       8,     6,     8,     6,     8,     2,     4,     4,     4,     6,
       8,     8,     4,     7,     7,     7,     6,     6,     6,     6,
       6,     6,     0,     5,    10,     3,     4,     3,     2,     2,
       2,     4,     6,     4,     4,     6,     6,     6,     6,     4,
       6,     4,     6,     4,     4,     4,     4,     6,     4,     6,
       4,     6,     4,     4,     6,     4,     6,     4,     6,     4,
       4,     6,     4,     6,     0,     3,     3,     0,     1,     0,
       2,     1,     3,     4,     4,     5,     4,     4,     4,     5,
       4,     0,     0,     7,    10,     4,     5,     4,     5,     4,
       4,     4,     4,     4,     5,     0,     8,     0,     3,     3,
       1,     4,     0,     1,     0,     2,     0,     1,     0,     3,
       2,     3,     2,     1,     2,     1,     2,     1,     1,     1,
       2,     0,     1,     0,     2,     1,     3,     1,     3,     0,
       2,     1,     3,     0,     1,     0,     2,     4,     5,     1,
       1,     1,     1,     3,     3,     3,     0,     6,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     2,     0,     4,     0,    11,
       3,     6,     0,     3,     0,     0,     5,     0,     1,     0,
       1,     0,     2,     0,     2,     2,     2,     0,     6,     0,
       1,     3,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     2,     2,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       0,     1,     2,     1,     3,     3,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     0,     6,     0,     1,     3,     1,
       2,     0,     2,     3,     1,     2,     1,     0,     3,     0,
       5,     2,     1,     0,     3,     6,     0,     6,     4,     6,
       4,     4,     4,     5,     4,     1,     3,     1,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     6,     0,     5,     0,     6,     1,
       3,     3,     5,     0,     2,     0,     2,     1,     1,     1,
       3,     0,     1,     0,     1,     1,     3,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     0,     3,     0,     3,
       2,     4,     4,     4,     4,     0,     4,     6,    16,     2,
       2,     0,     6,     5,     2,     2,     2,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     2,     2,     3,     2,
       2,     2,     1,     1,     3,     4,     3,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       0,     1,     0,     2,     0,     1,     1,     1,     0,     2,
       0,     2,     0,     2,     2,     0,     4,     0,     4,     1,
       1,     0,     1,     0,     1,     1,     0,     4,     3,     1,
       0,     3,     4,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     1,     1,
       2,     0,     3,     3,     2,     2,     0,     4,     0,     1,
       1,     2,     0,     4,     5,     0,     0,     0,     0,    18,
       2,     0,     1,     0,     1,     1,     0,     1,     1,     0,
       2,     2,     1,     3,     4,     3,     3,     0,     2,     2,
       1,     3,     3,     0,     3,     0,     3,     2,     3,     1,
       1,     2,     0,     2,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     0,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     0,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     1,     2,     4,     5,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     2,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     4,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     3,     8,     8,     8,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     0,     1,
       3,     1,     2,     2,     2,     1,     3,     3,     1,     1,
       3,     1,     3,     4,     5,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     2,     1,
       2,     2,     2,     2,     2,     0,     3,     0,     1,     0,
       3,     2,     0,     1,     2,     0,     1,     4,     4,     5,
       2,     3,     0,     1,     0,     4,     0,     1,     1,     0,
       2,     2,     1,     0,     1,     1,     0,     5,     6,     0,
       0,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     1,     0,     3,     3,     0,
       8,     0,     3,     1,     3,     0,     2,     3,     5,     0,
       3,     4,     4,     0,    14,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     2,  2014,   643,     0,  1955,     0,     0,     0,     0,
       0,  1957,   100,    58,  1271,  1379,  1380,  1193,  1210,     0,
     643,   103,     0,    70,  1212,  1416,     0,     0,   643,     0,
    1411,     0,     0,   643,  1215,  1404,     0,   103,  1957,     0,
     678,  1792,  1308,     0,     0,     0,  1291,  1849,  1260,     0,
       0,     0,     0,     3,     8,    19,     0,    36,    24,    28,
      14,    18,    13,    10,    50,    51,    43,    12,    16,    40,
      11,    15,    33,    39,    34,    35,    47,   671,    22,    23,
      29,    41,    54,    20,    52,    49,    21,  1381,    25,    42,
      37,    30,    55,    31,    48,    32,    53,    27,    44,    26,
       9,    17,    45,    46,    38,    56,     0,   546,     0,   578,
       0,     0,  2015,  2005,   645,   644,     0,  1841,  1840,   611,
    1957,     0,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1528,
    1571,  1572,  1573,  1529,  1530,  1574,  1575,  1576,  1577,  1579,
    1578,  1580,  1531,  1532,  1581,  1582,  1583,  1533,  1534,  1584,
    1585,  1535,  1586,  1587,  1588,  1536,  1589,  1537,  1590,  1591,
    1592,  1593,  1594,  1538,  1595,  1596,  1597,  1598,  1599,  1600,
    1601,  1539,  1602,  1603,  1604,  1605,  1621,  1606,  1540,  1607,
    1608,  1609,  1622,  1541,  1612,  1611,  1610,  1613,  1614,  1615,
    1542,  1616,  1617,  1618,  1619,  1624,  1625,  1626,  1543,  1620,
    1627,  1623,  1775,  1629,  1628,  1630,  1632,  1631,  1544,  1633,
    1545,  1634,  1635,  1512,  1636,  1513,  1638,  1639,  1642,  1643,
    1637,  1644,  1645,  1640,  1641,  1546,  1647,  1648,  1649,  1650,
    1651,  1652,  1653,  1663,  1656,  1658,  1659,  1661,  1657,  1662,
    1666,  1665,  1667,  1668,  1669,  1664,  1655,  1660,  1670,  1671,
    1654,  1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1680,
    1682,  1681,  1683,  1684,  1685,  1686,  1687,  1689,  1688,  1690,
    1691,  1692,  1694,  1693,  1695,  1547,  1696,  1697,  1698,  1699,
    1700,  1548,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1549,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
    1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1646,  1726,
    1550,  1727,  1728,  1551,  1729,  1552,  1730,  1731,  1553,  1732,
    1733,  1734,  1735,  1736,  1737,  1554,  1738,  1555,  1740,  1739,
    1741,  1743,  1744,  1556,  1742,  1557,  1745,  1746,  1747,  1749,
    1748,  1750,  1751,  1558,  1752,  1559,  1753,  1754,  1755,  1756,
    1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1768,
    1769,  1770,  1771,  1766,  1767,  1560,  1772,  1773,  1774,  1776,
    1777,  1561,  1778,  1779,  1563,  1780,  1781,  1784,  1782,  1783,
    1785,  1786,  1787,  1788,  1562,  1789,   122,  1517,   105,  1518,
    1527,     0,   613,   629,  1958,  1959,   275,   516,   517,   274,
     519,   103,  2005,     0,   271,   272,     0,     0,  1285,  1013,
    1208,  1208,     0,  1208,  1211,  1208,   103,  1208,     0,    63,
    1386,     0,     0,     0,     0,  1511,     0,  1218,  1418,  1422,
       0,     0,  1838,     0,     0,     0,     0,   103,   646,     0,
    1269,     0,   609,     0,  1959,  1970,   672,   676,   688,  1793,
    1790,  1364,   598,   598,   598,   596,   598,  1292,     0,     0,
    1269,  1421,  2057,     0,     0,     0,  2053,     0,  2058,     0,
     678,     0,     0,     1,     5,     0,     0,  1617,  1377,  1375,
    1508,     0,   538,   547,   542,   540,     0,     0,  2016,  2003,
    2004,   627,     0,  1956,     0,   655,   665,   124,     0,    72,
       0,     0,     0,  1962,     0,     0,     0,     0,   101,   709,
     709,  2005,  2007,  2009,   275,   273,     0,     0,  1289,  1288,
    1287,     0,  1285,  1194,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1208,    65,     0,  1883,  1898,  1899,  1895,
    1900,  1901,  1905,     0,  1897,  1889,     0,  1904,  1893,  1902,
       0,  1887,     0,  1903,  1908,  1891,  1896,  1875,     0,  1881,
    1885,  1510,  1113,  1852,  1853,     0,  1523,  1514,  1522,  1521,
      71,  1220,  1221,  1219,   577,  1419,  1420,     0,  1433,     0,
       0,     0,   641,     0,  1359,  1358,     0,  1412,  1971,     0,
       0,   618,  1223,  1270,     0,  1222,  1409,     0,  1408,  1405,
    1407,     0,  1883,  1870,     0,  1965,  1962,  1972,   701,   694,
     693,   696,   697,   700,   698,   699,   695,   692,   709,   689,
     691,  1796,     0,     0,   452,     0,  1372,     0,     0,     0,
    1372,     0,  1148,  1365,     0,  1805,  1343,   515,   514,     0,
     513,  1806,  1342,  1358,     0,     0,     0,  1327,     0,  1293,
    1332,  1807,     0,  1361,     0,  1148,  1372,     0,  1309,     0,
       0,     0,     0,   592,   602,   594,   589,     0,   595,   591,
    1290,  1207,  1850,   577,  1470,  1469,  1515,  2054,  1468,  2062,
    2064,  2050,  2052,  2059,   674,     0,  1976,     6,    57,     0,
    1383,  2012,  2013,  2011,   468,   106,   106,   536,     0,     0,
       0,     0,     0,  1205,     0,     0,   657,   667,   126,   123,
     104,     0,   615,   631,  1961,     0,     0,  1963,  1967,   771,
     770,     0,    98,   718,  1524,  1935,   102,  1931,  2010,   709,
     709,   709,     0,  1992,     0,  1998,  1999,  2002,  2001,  2000,
       0,  1991,  1994,  1995,  1997,  1996,  2016,  2008,     0,     0,
     520,     0,  1272,  1275,  1279,  1283,  1286,  1565,  1528,     0,
    1573,     0,     0,  1481,     0,     0,     0,     0,  1533,     0,
       0,  1587,     0,     0,  1538,     0,     0,     0,   718,   718,
     718,     0,     0,     0,  1600,  1601,  1490,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1478,     0,  1491,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
    1630,     0,     0,     0,  1480,  1635,     0,     0,     0,     0,
       0,     0,     0,  1650,     0,     0,  1488,     0,     0,  1019,
       0,  1677,  1679,     0,     0,     0,  1683,     0,     0,  1684,
    1685,  1686,  1465,   773,     0,   718,  1477,  1487,  1698,  1704,
    1471,     0,  1706,     0,  1707,     0,  1714,     0,     0,     0,
       0,     0,     0,  1736,  1738,     0,     0,  1755,     0,     0,
       0,   718,  1464,  1768,  1769,  1770,  1771,     0,  1479,  1560,
    1489,     0,     0,     0,  1780,   718,   718,   718,     0,     0,
       0,  1786,     0,  1789,  1023,     0,     0,     0,     0,   772,
       0,   987,     0,  1015,   730,   736,   750,     0,   858,   765,
     852,   788,   787,  1014,  1475,   786,   785,  1476,   783,  1498,
    1517,  1497,  1209,  1198,  1200,     0,  1201,  1204,  1929,  1202,
     579,     0,     0,    64,  1400,  1394,  1396,  1399,  1395,     0,
    1401,  1398,  1397,  1841,  1387,  1389,  1390,  1884,  1882,  1916,
    1915,     0,  1917,  1913,  1906,  1936,  1910,  1936,  1912,  1911,
    1936,  1907,  1914,  1936,  1879,     0,  1114,  1115,     0,  1851,
       0,  1509,     0,  1417,  1434,     0,  1435,  1423,  1431,   660,
       0,  1113,  1839,  1842,     0,     0,    60,    61,     0,   648,
       0,   647,   651,     0,     0,     0,  1226,  1216,  1225,  1410,
       0,     0,  1882,  1879,  1966,     0,  1968,  1983,   677,  1973,
     707,   679,   706,     0,   690,  1791,  1794,  1802,  1341,  1368,
     451,     0,     0,  1340,  1324,     0,   275,     0,     0,     0,
       0,  1310,  1315,   309,     0,  1331,  1149,     0,  1372,     0,
    1335,  1348,  1336,     0,  1362,     0,  1372,  1305,     0,     0,
    1297,  1302,  1298,     0,  1304,  1303,  1306,  1294,  1295,  1320,
    1349,  1362,  1325,  1330,  1339,  1366,  1367,     0,  1319,  1326,
       0,  1337,  1362,  1362,  1372,  1372,   605,   604,   603,   599,
     600,   605,     0,  1056,     0,     0,  2051,  2065,  2049,  2060,
    2061,  2048,   675,  1977,   673,  1978,     0,     7,     4,  1378,
    1376,  1384,  1385,   469,   468,   266,   269,   268,     0,   543,
     541,   468,  2006,     0,     0,   628,     0,     0,   659,   654,
     658,   656,   510,   509,   512,     0,   666,     0,   127,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    73,    74,    87,   617,   616,
     614,   639,   638,   636,     0,   637,   635,   630,   632,   633,
    1960,  1964,   276,   468,     0,  1526,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1993,    92,     0,     0,     0,
       0,  1277,  1273,  1283,     0,     0,     0,  1113,     0,     0,
       0,  1118,     0,   802,  1118,  1118,  1118,     0,     0,  1013,
    1013,     0,  1013,     0,     0,     0,     0,  1118,   826,   829,
       0,   827,     0,     0,     0,     0,     0,  1484,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1013,     0,     0,
       0,     0,   992,     0,     0,     0,     0,   782,     0,     0,
       0,     0,  1013,     0,     0,     0,     0,  1019,     0,  1017,
       0,  1118,     0,     0,  1118,     0,     0,     0,     0,     0,
    1013,  1013,  1013,   723,     0,   874,     0,     0,     0,     0,
       0,  1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1118,  1118,     0,     0,     0,  1118,     0,   895,
       0,  1486,     0,     0,     0,  1485,     0,     0,  1483,  1482,
    1466,     0,     0,     0,   918,   920,   919,  1118,     0,  1118,
       0,     0,     0,  1024,     0,   791,   790,   792,  1989,     0,
       0,     0,     0,     0,     0,   769,   768,   767,   766,     0,
       0,     0,   774,     0,   775,   776,     0,   777,   778,   779,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   793,
    1087,  1088,  1089,  1090,  1100,  1091,  1092,  1093,  1102,  1107,
    1094,  1095,  1103,  1104,  1105,  1096,  1106,  1101,  1097,  1108,
       0,  1086,     0,     0,     0,  1467,   912,     0,     0,  1196,
       0,   581,   580,  1203,   579,     0,    66,    68,  1393,     0,
       0,  1402,  1909,     0,  1890,  1894,  1888,  1892,     0,     0,
    1880,     0,  1886,  1117,  1625,  1693,     0,  1120,  1855,  1213,
    1430,  1432,     0,     0,  1424,     0,     0,   642,    62,     0,
       0,  1413,     0,     0,     0,     0,   620,  1224,     0,  1406,
       0,     0,     0,     0,     0,  1969,  1985,  1984,  1974,   709,
    1139,   710,   712,   711,  1497,  1796,  1799,  1800,  1803,  1801,
       0,  1798,  1797,  1812,     0,  1370,  1373,  1374,     0,     0,
    1351,  1350,  1346,  1347,     0,  1158,  1159,  1157,  1152,  1153,
    1156,  1355,  1353,  1344,     0,  1372,     0,  1354,  1352,  1299,
    1300,  1301,     0,  1148,     0,  1372,  1362,     0,  1372,  1372,
    1334,  1338,     0,   593,   602,   590,   597,  1068,  1067,     0,
    1032,     0,  1031,  1030,  1029,     0,  1067,  2055,  2063,  2067,
       0,  1148,  1982,  1980,   267,  1247,  1247,     0,     0,     0,
       0,     0,     0,     0,   107,   116,   575,   575,  1247,  1247,
     575,  1247,  1247,  1247,     0,     0,  1247,     0,     0,   575,
       0,  1247,   573,     0,     0,  1247,  1247,  1247,   575,     0,
    1247,  1247,  1247,  1247,  1247,   585,  1247,  1247,  1247,   572,
     279,   301,   302,   537,     0,   551,   574,  2017,  2018,   544,
     612,  1206,     0,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   640,   634,    99,   468,   719,  1525,     0,  1932,     0,
    2043,     0,     0,   105,  2019,   277,    96,   523,   525,   524,
     522,   521,     0,     0,  1120,     0,  1280,  1056,  1284,  1283,
    1281,     0,     0,     0,  1119,  1118,     0,   998,  1166,  1167,
    1163,  1164,  1162,  1165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   971,     0,
     998,     0,   832,     0,     0,     0,     0,     0,     0,  1497,
       0,     0,     0,     0,     0,  1989,     0,     0,     0,     0,
       0,     0,   809,     0,     0,     0,     0,     0,     0,     0,
    1111,  1109,  1112,  1110,     0,     0,   993,   985,     0,     0,
       0,     0,   859,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1020,  1021,  1118,     0,     0,     0,
    1118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   881,
       0,     0,     0,     0,     0,   886,     0,     0,     0,     0,
       0,     0,     0,  1118,     0,     0,     0,  1099,     0,  1098,
       0,     0,     0,     0,     0,     0,     0,     0,   915,     0,
     917,     0,     0,  1500,  1499,     0,     0,     0,     0,     0,
    1025,   678,     0,   795,  1013,   794,     0,  1808,   988,   990,
       0,   721,   720,   722,   733,   726,   731,   724,   728,     0,
     780,  1570,   734,     0,   762,     0,  1127,   763,   748,   753,
     754,     0,     0,   751,   752,   756,   858,   755,   858,   759,
     760,   761,   764,     0,     0,     0,     0,     0,   784,   789,
    1016,   959,  1501,  1199,  1197,  1930,  1195,    69,     0,     0,
    1388,  1403,  1391,  1940,     0,  1939,  1925,  1928,  1508,     0,
       0,     0,  1865,  1859,  1866,  1868,  1862,  1867,  1869,  1860,
    1861,  1856,  1863,  1121,  1150,     0,     0,   661,   662,   665,
       0,  1845,  1846,  1844,  1843,  1415,  1414,     0,   649,   652,
     653,   625,   624,   626,   619,   621,   622,   259,  1230,     0,
       0,     0,  1236,  1217,  1227,   610,     0,     0,     0,     0,
       0,   705,  1056,  1187,   702,   683,  1150,  1140,   682,   713,
       0,  1795,     0,  1766,  1823,     0,     0,     0,     0,     0,
    1813,  1369,     0,  1321,     0,  1345,  1357,  1356,  1316,     0,
       0,     0,  1314,  1363,     0,  1333,  1296,  1313,  1120,  1362,
    1311,  1312,   607,   606,   601,  1067,  1056,     0,     0,  1053,
    1069,     0,  1069,  1056,  1056,     0,  1056,  1113,  1064,     0,
       0,  2066,  1141,  1981,  1245,  1246,  1248,     0,     0,   110,
     113,   111,     0,   112,     0,     0,   576,   530,   511,   511,
     555,     0,   340,   530,   530,   504,   553,     0,     0,     0,
       0,     0,     0,     0,     0,  1247,     0,   566,   549,     0,
       0,     0,     0,   567,     0,   550,  1247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   588,   587,   586,
       0,     0,     0,     0,   280,   468,   343,     0,   582,   340,
     346,  1504,  2021,  1083,     0,  1082,   128,    80,    76,    88,
    1171,  1172,  1170,  1168,  1169,    89,    78,    79,    83,    82,
      84,    85,    86,    81,    77,    90,    91,    75,     0,  1933,
       0,     0,   243,   242,     0,  2037,     0,  2021,     0,   343,
      93,  1436,   278,   281,     0,    94,  1056,  1139,  1283,  1120,
       0,  1113,     0,   801,   816,     0,     0,   964,     0,     0,
     966,   967,   968,     0,   820,     0,   818,   821,   822,   823,
    1013,     0,     0,     0,     0,  1013,   970,     0,   828,     0,
       0,   833,   834,     0,   807,     0,   841,     0,   843,     0,
    1013,     0,   837,     0,   798,     0,     0,  1013,     0,   849,
       0,   810,     0,     0,   950,     0,   933,   929,     0,   931,
       0,     0,  1013,  1013,     0,   854,     0,     0,   860,  1013,
       0,   952,     0,   934,     0,   866,     0,  1013,     0,  1018,
       0,     0,     0,   977,   870,   871,     0,   975,   936,     0,
       0,   873,   938,     0,   940,     0,   935,   942,   943,   875,
     877,   876,   945,     0,     0,   947,     0,   949,     0,   879,
     880,     0,     0,     0,   884,     0,  1013,   889,   979,   981,
       0,     0,     0,     0,     0,   983,   896,   898,     0,     0,
       0,   897,     0,     0,     0,     0,     0,     0,     0,   902,
       0,     0,   916,   982,   808,   980,   921,     0,   924,     0,
     923,     0,     0,     0,     0,  1986,  1986,     0,   799,     0,
       0,     0,     0,     0,  1502,   727,   732,   725,   729,     0,
       0,     0,     0,   746,   745,     0,   758,   757,     0,  1127,
     749,     0,   857,     0,   958,   709,  1013,     0,    67,  1392,
    1937,     0,     0,     0,     0,     0,     0,     0,     0,  1854,
    1151,  1257,  1516,  1425,     0,   669,  1847,  1848,     0,   623,
     688,     0,  1249,  1234,  1241,  1235,     0,     0,     0,  1233,
    1493,  1492,  1499,  1972,     0,     0,     0,     0,  1975,  1120,
    1120,  1181,     0,     0,   680,   685,   681,   684,     0,   708,
     717,   716,  1494,  1501,     0,     0,     0,     0,   454,   456,
     455,   464,     0,   453,     0,     0,  1808,     0,   460,   462,
     461,  1818,   459,  1371,  1148,  1329,  1328,  1155,  1154,     0,
    1307,  1323,  1372,     0,  1979,  1062,     0,  1055,  1054,  1070,
       0,  1056,  1069,  1069,     0,  1035,  1034,  1261,  1264,     0,
    1033,  1073,  1060,   688,  2056,  2068,     0,   467,   466,   308,
     463,   307,   115,   114,   120,   121,   345,   531,   505,   506,
       0,     0,     0,   511,   339,   530,   338,   341,   520,     0,
       0,   291,   288,   557,   294,   290,   306,     0,     0,   295,
     530,   564,   565,   579,   284,     0,   320,   321,   319,   303,
     286,   287,   559,  1135,  1137,  1145,   293,   292,   289,   298,
     299,   317,   316,   297,   318,   570,   315,   313,   310,   312,
     311,   314,   296,   285,  1402,   552,     0,   328,   330,   331,
    1507,     0,   584,   554,     0,   332,   333,     0,     0,     0,
       0,   668,     0,  1934,     0,  2044,   246,   244,   245,     0,
     130,   326,   327,   325,   324,     0,     0,   249,     0,   247,
       0,     0,  1438,  1437,   248,   262,   468,   282,     0,     0,
    1120,  1160,  1276,  1282,     0,     0,     0,   965,   999,     0,
     426,   426,  1009,  1007,   415,   426,  1003,  1008,  1005,     0,
       0,     0,     0,     0,     0,     0,   972,   969,     0,     0,
       0,  1501,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   996,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     954,  1022,   978,   976,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   984,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1026,
     804,  1990,  1990,   796,  1809,  1810,  1811,   532,   989,     0,
     739,  1013,   737,  1126,   743,     0,     0,   747,     0,   913,
       0,   960,   961,     0,  1012,  1503,  1938,  1927,  1926,  1941,
    1941,  1941,     0,  1122,     0,  1214,  1436,   663,     0,   664,
     650,   709,  1231,  1243,     0,  1251,     0,     0,  1228,  1238,
       0,     0,     0,  1237,     0,  1872,  1873,  1871,  1150,  1128,
       0,     0,  1192,     0,  1188,   703,     0,   715,   714,     0,
    1825,     0,  1824,  1836,  1837,  1834,  1835,  1833,  1814,     0,
    1820,  1819,     0,     0,     0,  1830,  1821,     0,     0,  1322,
       0,  1317,   608,     0,  1056,  1069,  1056,  1042,     0,     0,
    1056,  1038,  1036,  1040,     0,  1120,     0,     0,     0,     0,
    1057,   709,  1496,  1142,  1145,   342,   530,   507,   508,   520,
       0,     0,     0,     0,     0,   464,   304,   563,   562,   305,
       0,     0,  1146,  1147,  1138,     0,   556,   343,   583,   484,
     411,   360,   351,   426,   354,   353,   397,   368,   365,   415,
     413,   383,   415,   415,   390,   389,   407,   393,   373,   470,
     470,   372,   410,   470,   394,   392,   396,     0,   398,   415,
     403,   391,   395,   412,   388,   385,   409,   426,   426,   366,
     369,   408,   470,     0,   401,   426,   434,   371,   470,   476,
       0,     0,   426,   432,  1506,  2023,     0,  2025,  1081,     0,
     141,   709,     0,   131,   133,   134,     0,  2025,     0,   252,
     277,   263,     0,   283,     0,  1145,   528,     0,  1278,     0,
    1274,   782,   813,   817,   926,     0,  1000,   427,   470,     0,
    1010,   417,   416,  1002,  1004,  1006,   803,   819,   824,   928,
     806,   805,     0,     0,     0,     0,   839,   842,   844,   835,
     840,   838,     0,   927,   851,   848,   850,   811,     0,   951,
     930,   932,   853,   864,   994,   997,     0,     0,     0,   865,
     861,   953,   862,     0,   867,   836,   868,     0,     0,     0,
       0,   937,   872,   939,   941,   946,   944,   948,   878,   815,
       0,   883,   885,   797,   782,   887,     0,   893,   891,     0,
       0,   899,     0,     0,   908,     0,   906,     0,   907,     0,
     909,   910,     0,   922,   925,  1027,     0,  1987,     0,     0,
     991,   735,     0,   741,  1013,   738,   744,   710,   709,   911,
       0,  1946,  1946,  1946,  1256,  1255,     0,  1254,  1258,     0,
     670,   260,     0,     0,     0,  1252,  1240,  1976,  1229,  1232,
    1501,  1874,   687,     0,  1123,  1191,  1189,     0,  1182,  1184,
    1186,     0,  1495,     0,     0,  1829,  1815,   465,     0,     0,
       0,     0,  1816,     0,  1113,  1063,     0,     0,  1029,  1056,
    1056,     0,  1029,     0,     0,     0,  1263,  1139,  1265,  1071,
    1075,  1076,  1074,  1065,     0,  1144,     0,     0,     0,     0,
     569,     0,   582,   571,   434,  1136,   300,   329,   490,   359,
     352,   370,   419,   414,     0,   419,   419,   476,   478,   472,
     476,     0,   379,   397,   374,     0,   470,   387,   378,   399,
     402,   404,   406,   419,     0,   470,   367,   376,   363,   419,
     442,     0,     0,     0,   438,     0,   483,     0,   445,   347,
     435,   437,     0,     0,   400,   470,   356,   477,   476,   358,
     470,   476,   419,     0,   433,   419,     0,  2022,     0,  2029,
       0,     0,   144,   142,   143,     0,   137,   139,   134,     0,
    2038,     0,     0,  2036,  2029,   250,  1976,  1436,     0,   255,
      97,     0,   527,     0,     0,  1161,     0,     0,     0,     0,
       0,  1001,     0,     0,   973,   830,   831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   800,     0,
       0,     0,     0,     0,     0,     0,   905,   903,   904,     0,
    1028,  1988,   533,   740,     0,   713,   962,     0,     0,  1945,
    1943,     0,  1944,  1942,  1918,     0,  1877,  1878,  1876,  1864,
       0,     0,  1426,  1150,  1242,  1244,  1250,  1239,     0,  1124,
    1139,  1439,  1185,     0,   704,  1827,  1826,  1828,  1822,     0,
       0,     0,     0,  1061,  1056,  1043,     0,  1047,  1052,  1048,
       0,  1039,  1037,     0,  1160,     0,  1077,  1150,  1145,     0,
       0,     0,   335,     0,     0,     0,     0,     0,   568,  1472,
     558,   560,     0,     0,     0,   485,   486,   491,   493,   423,
     424,   425,   380,   420,   422,     0,   382,   350,   471,   479,
     480,     0,   475,   473,   476,   375,   405,   381,     0,   377,
     364,   448,   447,   718,   440,   450,     0,     0,   446,   436,
     444,   439,   355,   357,   361,   362,   348,     0,   349,  1505,
    2024,     0,   545,   709,   709,  2026,  2035,  2045,   141,     0,
       0,     0,   132,   135,  2020,   253,   251,     0,  1972,  1145,
       0,    95,   814,   430,   428,   431,   429,     0,   825,   845,
       0,   812,   995,   986,  1118,   855,     0,   863,   869,   956,
     955,   882,   888,   892,   890,   894,   900,   901,  1013,   742,
     963,  1924,  1923,  1922,  1919,     0,     0,     0,     0,     0,
       0,  1947,  1949,  1253,     0,     0,   261,   702,   322,  1132,
    1145,     0,  1150,     0,  1447,  1183,  1832,  1831,  1817,     0,
       0,     0,     0,     0,     0,     0,  1084,  1262,  1072,     0,
    1066,  1143,     0,     0,   520,  1474,  1473,   582,   496,   497,
     498,     0,     0,     0,   489,   492,   421,     0,   534,   481,
     474,     0,   449,   718,   443,     0,     0,     0,   678,     0,
     108,   138,     0,   709,  2039,   257,   256,   526,   529,     0,
       0,     0,     0,     0,  1920,  1950,  1953,  1951,  1952,  1954,
    1948,     0,     0,   323,     0,     0,  1129,  1131,  1125,  1173,
       0,     0,     0,     0,  1440,  1442,     0,  1190,     0,  1058,
    1044,     0,  1049,     0,  1041,     0,  1079,     0,   520,   334,
     561,   500,     0,   499,     0,   494,   495,   490,     0,   470,
       0,   470,   441,     0,  2030,     0,  2027,     0,  2046,   140,
       0,     0,  1976,   418,   846,     0,   974,   856,   914,  1259,
    1267,     0,  1427,  1133,  1134,  1145,     0,   686,     0,     0,
       0,     0,  1441,     0,     0,  1448,  1450,     0,     0,     0,
       0,  1085,     0,  1080,   337,   336,   502,   503,   501,   487,
     488,   384,   535,   386,  2031,  2032,  1976,   118,   117,   109,
       0,   177,     0,  2040,   258,     0,     0,     0,   457,  1130,
    1174,  1445,  1446,     0,  1443,     0,     0,  1449,     0,     0,
    1046,  1051,  1078,  2028,   119,     0,   195,   181,     0,     0,
       0,   179,   209,  2047,     0,     0,   183,   207,   208,   184,
     187,   188,     0,  1519,     0,  1520,  2033,   108,   847,  1266,
    1268,     0,  1428,     0,  1444,  1452,  1451,     0,  1059,   194,
     197,     0,     0,   200,   190,   189,   191,     0,     0,     0,
     178,   177,   177,   237,   186,   234,   233,   226,   177,  2041,
     458,  1439,   709,     0,   196,     0,     0,     0,   180,   210,
     221,   224,   216,   177,     0,   177,     0,   149,     0,     0,
    2034,   177,  1447,     0,     0,  1177,  1179,     0,   192,     0,
       0,     0,     0,   177,   217,     0,     0,     0,   147,   240,
       0,   145,   228,   228,  2042,  1453,  1180,  1175,   709,  1318,
       0,   182,   201,   218,   224,   214,   222,   177,     0,   236,
     148,     0,   238,     0,   177,     0,   227,   229,   231,     0,
    1455,  1178,   193,   198,   177,     0,   215,     0,     0,   213,
       0,   177,   160,   159,     0,   151,   173,   235,     0,   150,
       0,     0,  1462,     0,   177,   219,     0,   177,     0,   177,
       0,     0,     0,     0,     0,   146,  1454,  1457,     0,     0,
    1459,  1460,     0,  1429,   199,   204,     0,   211,   177,   241,
       0,   154,   174,   175,     0,   157,  1461,  1456,     0,  1463,
     200,   177,   203,   177,   239,     0,     0,   152,   166,   153,
     164,   156,     0,  1458,   205,   177,   177,   172,   170,   177,
     161,   168,   163,     0,   169,   176,   167,     0,   158,     0,
     155,   171,   165,   162
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    52,   475,  1098,    53,    54,    55,    56,    57,   986,
      58,   534,   933,  1406,  1407,    59,   426,    60,   711,  1145,
    1146,  1147,    61,  1625,  2499,  2084,  1163,   402,   421,  1622,
    1109,  3438,  1544,  3489,  1545,    62,   497,   709,  1127,  1128,
    2802,  2803,  3082,  2804,  3075,  3076,  3077,  3078,  3634,  3583,
    3611,  3635,  3672,  3705,  3711,  3712,  3654,  3719,  3720,  3721,
    3727,  3722,  3655,  3707,  3584,  3524,  3557,  3553,  3525,  3620,
    3552,  3642,  3576,  3577,  3644,  3685,  3702,  3526,  3527,  3558,
    3601,  3528,  3559,  3624,  3581,  3625,  3645,  3686,  3582,  3602,
    3648,  3605,  3529,  3588,  3636,  3530,  3589,  3531,  3532,  3566,
    3587,  3564,  3586,  3651,  3631,  2074,  2479,  2080,  2489,  3086,
    2494,  3268,  3442,  1902,  2300,  3153,  2812,  1613,  1104,  1105,
     403,   404,   405,   505,  2081,  1579,  2082,  2083,  1581,  1582,
    1032,  2452,  2443,  2429,  3316,  2485,  2456,  2457,  2458,  2459,
    2406,  2407,  1991,  1992,  2039,  2467,  2786,  3014,  3034,  2787,
    2788,  2789,  2790,  2791,  2792,  2793,  2830,  2831,  3212,  3213,
    3214,  2826,  2827,  3065,  3049,  3050,  3051,  3234,  3021,  2340,
    2341,  3542,  2350,  2351,  2388,  2680,  2389,  1108,  3022,  3059,
    3222,  3052,  2466,  3008,  3205,  3353,  3206,  3207,  3208,  3425,
    1993,  1994,  2405,  1124,  1125,   657,   406,   407,  1180,  1630,
    2814,  2815,  2396,  2920,  3357,    63,  1111,   694,   696,   695,
    2042,   482,  1583,  1584,  1585,  2724,  2730,  3347,  1996,   111,
    1403,  2463,  2030,    64,  1081,  1076,    65,   668,   663,   664,
    1079,  1080,  1513,  1953,    66,   601,    67,   492,    68,   500,
    1150,    69,   994,  1894,  1895,  1896,    70,   701,    71,   501,
    1157,  1158,  1159,    72,   984,   116,    73,   590,   989,   991,
     992,    74,   494,   495,  1119,    75,  1433,  1877,  1878,   706,
     707,  1126,  2639,    76,    77,   472,   446,   607,   447,   448,
    1460,  1914,  3317,   618,   619,   620,  2324,  1011,  1012,  1013,
    1919,  1461,  2329,  1165,  2935,   904,   905,   906,  1340,  1341,
    3053,   907,  1350,  1813,   908,   909,  1841,   910,  2880,  2273,
    2274,  2275,  2621,  2622,   911,  2115,  2843,  2153,   912,  1333,
    1798,  1707,  3110,  2864,  1646,  2098,  2519,  2623,   523,   524,
     913,  1258,  1259,  1260,  1724,  1324,  2244,  1790,  1520,  1521,
    1522,  1523,  2984,  2983,  2985,  3331,  3176,  3333,  3180,  1964,
    1524,  1525,  3468,  2364,  2694,  2382,  2383,  3187,  1955,  1526,
    2370,  3186,  2710,  2990,  3339,  3472,  2044,  3335,  1390,  1768,
    1391,  1704,   968,   969,  1647,  1874,  2288,  3160,  3321,  2263,
    2954,  3319,  3396,  1586,  2433,  2434,  1916,  1917,  2386,  2713,
    2734,  1035,  3318,  2290,  1488,  1489,  2820,  3710,  2055,  3457,
    3543,  3594,  3595,  3596,  2662,  2663,  2958,  2959,  1918,  2321,
    2664,  3161,    78,   409,    79,  1844,  1851,   703,   526,   418,
      80,   427,  1875,    81,   440,  1448,   574,   594,   997,   998,
    1903,  2301,  2308,  1904,  2313,  2947,  2303,  2642,  2643,  1976,
    1977,  2304,  2645,  2944,  2936,  2937,  2635,  3151,    82,   460,
    2705,  2377,  2378,  3449,  3450,   595,    83,   408,   752,  1634,
    1185,  1633,   753,   754,  1187,   521,   522,    84,   458,  1056,
    1057,  1058,  1503,    85,   451,   658,  1484,  2354,  1938,   586,
     660,  1495,   661,  1496,  1475,  1933,  1023,    86,   690,   689,
      87,   478,  1100,    88,   535,   944,   945,  1411,  1852,    89,
     441,   599,   600,    90,   435,   587,  1441,    91,   428,   577,
      92,    93,   578,   977,  2636,  3315,  3498,  3571,  1432,   978,
    2495,  3324,  3404,  3405,  3407,  3465,  3466,  3640,  3662,  3679,
    3680,  3683,   914,   677,   915,  3198,   916,   917,  2309,  2310,
    2714,   918,  3451,   919,  2397,   671,   424,   920,   568,   678,
    2293,   921,  3534,   724,   725,   389,   390,    94,   621,   450,
    1015,  1016,  1017,  1470,  1471,   662,  2252,  1472,  1473,  1930,
    1925,  2966,  2686,  2678,    95,   581,   946,   982,   983,  1883,
      96,   459,    97,   970,  1427,  1428,  1871,  2287,  1872,    98,
     603,    99,   557,  1421,   558,   948,   559,   560,   960,   955,
     963,   957,  3305,  3143,  3144,  1859,   929,   726,   727,  1414,
    1854,  1855,  2931,  3146,  3311,  3312,   100,   120,   395,   503,
     718,  1005,   101,   102,   103,   104,  1008,  1093,  1910,  1094,
    1095,  1096,  1533,  1458,  2601,  1331,  1792,  2917,   508,   741,
     733,   488,   489,   490,   511,   512,   112,   113,   734,   735,
    2077,  2470,  2796,  3069,  3070,  3255,  3252,   736,  3568,   737,
     738,  2480,  3261,  3441,  3537,  3591,   739,  2071,  2800,  3370,
    3491,   105,   679,   469,  1091,  1086,  1088,  1529,  1971
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3258
static const int yypact[] =
{
    2913, -3258,   376,   801,  -156, -3258,   516, 43126,     8,  -156,
    -156,   219,   967, -3258, -3258, -3258, -3258, -3258,  2777, 43126,
     801, -3258, 21602, -3258, -3258, -3258,    54,  -156,   801, 43126,
   -3258,   375,   876,   801, -3258, -3258,  -156, -3258,   219, 43126,
   -3258,   472, -3258,   999,  -142,   394,   465, -3258, -3258, 43126,
    2585,  -171,   974,  1050, -3258, -3258,   698, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, 22152, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,   944, 43126, 43126, -3258,
   43126,   666, -3258,  1074, -3258, -3258,  -156, -3258, -3258, -3258,
     219, 21602, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,   533, -3258,
   -3258,   820, -3258, -3258, -3258,  1228,  1076, -3258, -3258, -3258,
   -3258, -3258,   401,   848, -3258,   852,  1133,  1145,   193, -3258,
    1158,  1158, 43126,  1158, -3258,  1158, -3258,  1158,  -156, -3258,
   -3258,  3666, 43126,  1040,   319,   409, 38176,   164,   361, -3258,
    1184, 21602, -3258,  -156,  1238,   218, 43126, -3258, -3258,  -156,
     650,   904, -3258,  4106,    58, -3258, -3258, -3258,  2664, -3258,
   -3258,  4466, -3258, -3258, -3258,   885, -3258, -3258, 21602,  -156,
    1171, -3258, -3258,   127,   127,   127, -3258,   127, -3258,   127,
   -3258,  -171,   887, -3258, -3258,   864, 43126,  -151, -3258, -3258,
     874,   -89, -3258, -3258, -3258, -3258, 21602,  1335,  1024, -3258,
   -3258, -3258, 21602, -3258,   124, -3258, -3258,   924, 43126, -3258,
   21602, 21602,   118,   -35,   946, 43126, 35976,  1094, -3258,   393,
     770,  1074,  1500, -3258,  1076, -3258, 43126, 43126, -3258, -3258,
   -3258, 39826,   193, -3258, 13716,  1362, 43126, 43126,  1183, 43126,
   43126, 35976, 21602,  1158,  1006,  3757,  1169,  1127,  1168, -3258,
   -3258, -3258, -3258,  1200, -3258, -3258,  1068, -3258, -3258, -3258,
     242, -3258,    80, -3258, -3258, -3258, -3258, -3258,  1214,   988,
   -3258, -3258,   102, -3258, -3258, 43126, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1359, -3258, -3258, 13716,   173,  1554,
    1409, 21602, -3258,   515, -3258, -3258,  1351, -3258, -3258, 35976,
   21602, -3258, -3258, -3258, 19389, -3258, -3258,  1571, -3258,  1046,
   -3258, 21602,  1169, -3258,  1283,  1212,   -35,  1119, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,  1084,  2664,
   -3258, -3258,  1395,  1506, -3258,  1224,   157,  1156,  1091,  1313,
     157, 38176,  1420, -3258,    83, -3258,  1514, -3258, -3258,  1222,
   -3258, -3258, -3258,  1227,  1249,  1438,  1256, -3258,   100,  2617,
   -3258, -3258,     5, -3258,   581,  1420,   157,   131, -3258,  1482,
    1606,   501,  -178, -3258,   -93, -3258, -3258,  1674, -3258, -3258,
   -3258, -3258, -3258,  1359, -3258, -3258, -3258,  1181, -3258,  1418,
    1294, -3258, -3258,    24, -3258,  1201,   -30,  1774, -3258,   299,
   36526, -3258, -3258, -3258,  1677, -3258, -3258, -3258, 35976,  1361,
    1260, 21602,   720, -3258, 40376, 21602, -3258,    69, 13716, -3258,
   -3258,  4603,   -11,   160, -3258,  1759,  1406, -3258, -3258, -3258,
   -3258,  1663, -3258,  1251,  1248,  1624,  1271, -3258, -3258, -3258,
   -3258, -3258,  1671, -3258,  1310, -3258, -3258, -3258, -3258, -3258,
    1678, -3258, -3258, -3258, -3258, -3258,  1024, -3258, 21602,  1526,
    -184, 21602, -3258,  1298, -3258,  1299, -3258,  1311,  1317,  1322,
    1343,  1352, 16601, -3258,  1366,  1369,  1374,  1389,  1401,  1405,
    1410,  1411,  1415,  1419,  1424,  1429,  1435,  1442,  1251,  1251,
    1443,  1444,  1445,  1446,   791,  1451, -3258,  1458,  1461,  1463,
    1465,  1468,  1469,  1474,  1479,  1489,  1491, -3258,  1493, -3258,
    1496,  1501,  1504,  1508,  1511,  1518,  1519,  1520,  1522,  1535,
    1539,  1540,  1543,  1549, -3258,  1550,  1552,  1553, 13716,  1563,
    1565,  1577,  1581,  1584,  1587,  1590, -3258,  1595,  1596,  1597,
    1603,  1604,  1612,  1613,  1614,  1618,  1619,  1620,  1630,  1634,
    1636,  1641, -3258, -3258, 13716,  1642, -3258, -3258,  1643,  1645,
   -3258,  1646,  1649,  1650,  1652,  1657,  1658,  1660,  1661,  1673,
    1679,  1682,  1688,  1689,  1691,  1692,  1695,  1698,  1699,  1700,
    1702,  1709, -3258,  1002,  1713,  1720,  1051,  1732, -3258,  1734,
   -3258,   171,  1738,  1739,  1740,  1251,  1251,  1251,  1741,  1743,
    1744,  1745,  1751,  1757, 13716, 16601, 16601, 16601,  9100, -3258,
   43126, -3258, 43126,  2589,  3803, -3258,  3642, 16601,  3744,   362,
   -3258, -3258, -3258,  1360,  1488, -3258, -3258, -3258, -3258, -3258,
    1760,  1385, -3258, -3258,  1408, 21602, -3258, -3258, -3258,  1475,
      78, 21602,  1498, -3258, -3258, -3258, -3258, -3258, -3258,  2008,
   -3258, -3258, -3258,  1562,  1484, -3258, -3258, -3258, -3258, -3258,
   -3258,  1605, -3258, -3258, -3258,  1762, -3258,  1762, -3258, -3258,
    1762, -3258, -3258,  1762,   671,  4429, -3258, -3258, 43126, -3258,
   43676, -3258, 19389,  2589, -3258,  1852, -3258, -3258,  1886, -3258,
    1911,   180,  1653, -3258, 21602, 38176, -3258, -3258,   111,  1675,
    1761,  1676, -3258,  1791, 21602, 21602, -3258, -3258, -3258, -3258,
     904,   -10,  1763,   707, -3258, 43126, -3258,   237, -3258, -3258,
   -3258,  1767, -3258, 13716, -3258,  1775, -3258,  1034, -3258,  2007,
   -3258,  1839, 13716, -3258, -3258,  1765,  1076, 43126, 43126, 21602,
   21602, -3258, -3258, -3258,   800, -3258, -3258, 43126,   157, 35976,
   -3258, -3258, -3258,  2169,   131, 43126,   157, -3258,  2122,  1873,
   -3258, -3258, -3258,  2198, -3258, -3258,  2189,  1788, -3258, -3258,
   -3258,   131, -3258, -3258, -3258, -3258, -3258, 21602, -3258, -3258,
     131, -3258,   131,   131,   157,   157,  1844, -3258, -3258,  1804,
   -3258,  1844,  1930,   566,   127,  2019, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,   578, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,    91, -3258, -3258, -3258,  1453,  2586,
    2586,  1580, -3258,   166, 21602,  1813,  1839, 21602, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258,  1816, -3258,  1812,  1817,  2589,
    2246,  2250,  2251,  2252,  2258,  2259,  2260,  2262,  2266,  2271,
    2272,  2275,  2280,  2283,  2284,  1851, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1889, -3258, -3258, -3258, -3258,  1755,
   -3258, -3258, -3258,    96,  1861, -3258, 38176,  2391, 35976,  2264,
   43126, 43126, 43126, 21602, 43126, -3258, -3258, 21602,   321,   321,
    2093,  1298, -3258,    73, 43126,  2270, 26018,    97, 13716, 13716,
   13716,   316,   701,  2375,  2437,  2437,  2437, 13716, 13716, -3258,
   -3258, 13716, -3258, 13716, 13716, 13716, 13716,   847, -3258, -3258,
    9677, -3258,  1882, 13716, 13716,  1971, 13716,  1488, 13716, 13716,
   22702, 13716, 13716, 13716, 13716, 13716,   363, 13716,  3744, 13716,
   13716, 13716,  1901, 13716, 13716, 13716, 13716, -3258, 13716, 13716,
     234, 13716,  2351,   694, 13716, 13716, 13716, -3258, 10254, 13716,
   13716, 13716, -3258, 13716, 13716, 13716, 13716, -3258,  2475, -3258,
   22702,   872, 13716, 13716,   911, 13716, 13716, 13716, 13716, 13716,
   -3258, -3258, -3258, -3258,  9677, -3258, 13716, 13716, 13716, 13716,
   13716, -3258, 16601, 13716, 10831, 13716, 13716, 13716, 13716,  1918,
   13716, 13716,  2437,  2437, 13716, 13716, 13716,   941,  9677, -3258,
   13716,  1488,  2975,  2975, 13716,  1488,  7946, 13716, -3258, -3258,
   -3258,   694, 11408,  1919, -3258, -3258, -3258,  2437, 22702,  2437,
   13716, 13716, 13716,  2589,  1950,  2375,  2375,  2375, -3258,  9100,
     184,  1922, 13716, 23802,  1923, -3258, -3258, -3258, -3258, 13716,
   13716, 13716, -3258, 16601, -3258, -3258,  2674, -3258, -3258, -3258,
   14293, 16601,  1939, 16601, 16601, 16601, 16601, 16601,  2268, 16601,
   16601, 16601, 16601, 16601, 16601, 16601, 16601, 16601,   -32,  2375,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
    1948, -3258, 38176, 16601, 13716, -3258, -3258, 43126, 43126, -3258,
   35976, -3258, -3258, -3258,    78, 38176,  1949, -3258, -3258,  2136,
    3757, 21602, -3258, 43126, -3258, -3258, -3258, -3258, 19939, 19939,
   -3258, 19939, -3258, -3258,    64,    84,  3560,  1981, -3258, -3258,
   -3258, -3258,  2313, 21602, -3258,   652, 21602,  1813, -3258, 13716,
    1839, -3258, 35976, 35976, 21602, 21602,   298, -3258,  2533, -3258,
    1839,  2344, 19939, 19939, 19939, -3258, -3258, -3258, -3258, -3258,
     934, -3258,  2589, -3258,  1956, -3258, -3258, -3258, -3258, -3258,
   40926,   390, -3258, -3258,  1839,  2366, -3258,  2589,  1968, 43126,
   -3258, -3258, -3258, -3258,   -19, -3258, -3258, -3258, -3258,   419,
   -3258, -3258, -3258, -3258,  2104,   157, 43126, -3258, -3258, -3258,
   -3258, -3258,  2172,  1420,  2617,   157,   131, 21602,   157,   157,
   -3258, -3258,  1324, -3258,   -93, -3258, -3258, -3258, -3258, 43126,
    2633,  2121,  1986, -3258, -3258, 21602, -3258,  1988, -3258,  2388,
    2523,  1420, -3258, -3258, -3258,    36,    36,  1839,  2111,  2113,
    2114,  2117,  2120,  2154, -3258, -3258,  2853,  2521,    36,    36,
    2521,    36,    36,    36,  2101,  2478,    36,  2360,  2124,  1167,
    2369,    36, -3258,  2125,  2489,    36,    36,    36,  2521,  2567,
      36,    36,    36,    36,    36,   135,    36,    36,    36, -3258,
    3922, -3258, -3258,  2039, 20491, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, 41476, -3258, 13716,   701,  1839,  1839,  1635,  1839,
     701,  1839,  1839,  1839,  1839,  1839,   701,  1839,  1839,   701,
    4603, -3258, -3258, -3258,   113, -3258, -3258,   653, -3258, 43126,
   -3258,   328,  2042,  -137, -3258,  3469, -3258, -3258, -3258, -3258,
   -3258, -3258, 21602,  2087,  1981, 26018, -3258,   566, -3258,  2038,
   -3258,   281,   225,   200, -3258,  2437,  2047, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  2049,  2048,  2053,  2054,   511,  1357,
    -222,  2057,  1505,  2059,   325,   680,   217,   795, -3258,  2060,
    2069,  1537, -3258,   799,   822,  1566,  1625,   875,  2064,  2062,
     230,   250,   881,   896,   254, -3258,  2067,   951,  2471,   985,
    1012,   266, -3258,  1631,  1041,  1108,   277,  2074,   283,   334,
   -3258, -3258, -3258, -3258,  2075,  1125, -3258, -3258,  -200,  1655,
    1132,  1139, -3258,  1686,  1159,  1165,   366,  2077,  1190,   368,
    1225,  1241,  2079,  2076,  2083, -3258,  2437,  2085,  1714,  1716,
    2437,  2086,   373,  1257,  1746,   380,   385,  2089,  2091,  2095,
    1766,  1770,  1792,   433,  1259,   517,  2096,  3335,  1798, -3258,
    1802,  1266,  1268,  1272,   531, -3258,  1278,  1807,  2100,  2103,
    1285,   238,  1291,  2437,  2107,  1811,   583, -3258,  2092, -3258,
    2109,  1859, 11985, 12562, 13139,  1116,  1301,  -199, -3258,  1866,
   -3258,  2115,  2116, -3258,  2062,  2119,   625,   629,  1870, 13716,
     718, -3258,  -171, -3258, -3258, -3258,   106,   861, -3258,  2241,
   43126,  1404,   115, -3258, -3258, -3258, -3258, -3258, -3258,   665,
   -3258,  2102, -3258,  2123,  2129,  9100,   909,  2129,  3034,  3003,
    3003, 16601,  2828,  3427,  3063,  1000,  3744,  1000,  3744,  2129,
    2129,  2129, -3258,  2138, 16601, 16601, 16601, 13716, -3258,  2375,
    2589,  2128,   678, -3258, -3258, -3258, -3258, -3258,  1498,  2432,
   -3258,  1813, -3258, -3258,   913, -3258,  2135, -3258,  2141,  2190,
    2197,  2215, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1420,  2533,  2230,  2148, -3258, -3258,
    2178,  2479, -3258, -3258, -3258,  2589, -3258,  2245, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,   195, -3258, -3258,  2163,
    2163, 18278, -3258, -3258, -3258, -3258,  2402,  2583,  2588,  2591,
     299, -3258,    48, -3258,   767,  2528,  1420, -3258,  2593, 38726,
   26570, -3258,  2180,  2538,  2188,    36, 34326,   688, 24355, 34876,
   -3258, -3258,  1635, -3258,     9, -3258, -3258, -3258, -3258,   800,
     800,  2236, -3258, -3258,  2440, -3258, -3258, -3258,  1981,   131,
   -3258, -3258, -3258,  2206, -3258, -3258,   566,  2552,  2557, -3258,
    2449,    19,  2449,   566,   566, 22702,   566,  1527, -3258,   701,
    2502, -3258, -3258, -3258, -3258, -3258, -3258, 37076, 35426, -3258,
   -3258, -3258,  2710, -3258,  2712,   182, -3258, 23252,   580,   580,
   -3258,    61,   145, 23252, 23252, -3258, -3258, 23252,  1635,   701,
   23252,   701,  1839,  1839,  1477,    36,   701, -3258, -3258,  2571,
    2573, 23252, 23252, -3258, 38176, -3258,    36,   123,  1635,  1635,
   23252, 22702,  2363,  1839,   701,   701,  2635, -3258, -3258, -3258,
   21602,   307, 38176,  2240, -3258,  4682, 17728, 43126,   302,    89,
   -3258,  2234,  2256, -3258,   987, -3258,  2589, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,  2335, -3258,
    2418,  2267, -3258, -3258,   169, -3258,   798,  2256, 21602, 17178,
   -3258,    99, -3258,  3143,  2273, -3258,   566,  2483,    90,  1981,
    2282,    97, 14870, -3258, -3258, 13716,  2263, -3258, 13716, 13716,
   -3258, -3258, -3258,  2659, -3258, 37626, -3258, -3258, -3258, -3258,
   -3258, 13716, 37626,  2659, 13716, -3258, -3258,  2285, -3258,  2629,
    2629, -3258, -3258,  1488, -3258, 43126, -3258, 13716, -3258, 13716,
   -3258,  1488, -3258, 13716, -3258, 13716, 13716, -3258,  2518, -3258,
   13716, -3258, 13716, 13716, -3258, 13716, -3258, -3258, 13716, -3258,
   13716, 13716, -3258, -3258,  2519, -3258, 13716, 13716, -3258, -3258,
   13716, -3258, 13716, -3258, 13716, -3258, 13716, -3258, 13716, -3258,
   16601, 22702,  2291, -3258, -3258, -3258,  2292, -3258, -3258, 13716,
   13716, -3258, -3258, 13716, -3258, 13716, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, 13716, 13716, -3258, 13716, -3258, 13716, -3258,
   -3258, 13716, 13716, 13716, -3258, 13716, -3258, -3258, -3258, -3258,
   15447, 13716, 13716, 13716,  2293, -3258, -3258, -3258, 13716, 13716,
   13716, -3258, 13716,  1180, 13716,  1753, 13716,  2507, 13716, -3258,
   13716,  2532, -3258, -3258, -3258, -3258, -3258, 13716, -3258, 13716,
   -3258,   323, 13716, 13716,  2733, -3258, -3258,  2303, -3258,  2298,
    2300,  2305, 38176, 13716, -3258, -3258, -3258, -3258, -3258,   363,
     686,  2314, 16601, -3258,  3034, 16601, -3258, -3258,  9100,   909,
    3034,  2860, -3258,  2315, -3258, -3258,  2318, 43126, -3258, -3258,
   -3258, 43126,  2326, 27122, 35976, 35976, 35976,  2322, 13716, -3258,
   -3258,  2554, -3258, -3258, 21602,  2682, -3258, -3258, 35976, -3258,
    2664, 22702, -3258,  2325, -3258,  2325,  -145,  2327,  1022, -3258,
   -3258, -3258,  2323,  1119,  2728, 35976, 35976, 35976, -3258,  1981,
    1981,   657,  2381,  2679, -3258, -3258, -3258, -3258, 42026, -3258,
   -3258, -3258, -3258,   849, 43126,  2660, 43126,  8523, -3258, -3258,
   -3258,  2845, 13716, -3258, 35976,   869,   861,    36, -3258, -3258,
   -3258, -3258, -3258, -3258,  1420, -3258, -3258, -3258, -3258,  2638,
   -3258, -3258,   157,  1324,   499, -3258,  2715, -3258, -3258, -3258,
    2678,   566,  2449,  2449,  2683,  2578,   -33,  2340, -3258,    36,
    2633,   203, -3258,  2664, -3258, -3258, 13716, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   13716,  2685,  2686,   580, -3258, 23252, -3258, -3258,  -184,  2352,
      26, -3258, -3258, -3258, -3258, -3258, -3258, 35426,  1839, -3258,
   23252, -3258, -3258,   133, -3258,  1839, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258,  2367, -3258,   754, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, 21602, -3258,  1031, -3258, -3258, -3258,
   -3258, 43126, -3258, -3258, 21602, -3258, -3258,  4128, 43126, 43126,
    2911, -3258, 43126, -3258,   798, -3258, -3258, -3258, -3258,  2594,
   43126, -3258, -3258, -3258, -3258,  2435,  2927, -3258, 21602, -3258,
    2373,  1056, -3258, -3258, -3258,  2930,  4583, -3258, 43126,  2376,
    1981,  2700, -3258, -3258, 13716,  1881,  1893, -3258,  2589,  1929,
    2389,  2389, -3258, -3258,  2392,  2389,  2741, -3258,  2745,  2400,
    2404,  2407,  1941,  2410,  2413,  1314, -3258, -3258,  3744,  3744,
    2414,  2409,  1980,  1985,  2419,  2421,  1995,  1330,  2005,  2423,
    2424,  2011,  2017,  1365,  2029,  2033,  2099,  2118,  2425,  2483,
    2417,  1373,  1384,  2429,  2126,  2132,   690,  2151,  2430,   692,
    3441, -3258, -3258, -3258,  2157,  2159,  2165,  2167,  2174,  2181,
    2196,  2211,  2222,  1393,  2226,  2233,  2431, 13716,  2238,  1205,
     746,  1400, -3258,  2242,  1416,  1486,  2269, 13716,  2281, 13716,
    2286, 13716,  2288,  2310,  2433,  2332,  2354, 13716,   865,  2589,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258,  2428,  2589,  2438,
   -3258, -3258, -3258,   362, -3258,   750,  2439, -3258, 16601, -3258,
   13716,  2445, -3258,  2441, -3258, -3258, -3258, -3258, -3258,   382,
     382,   382, 16024,  2589,  2892, -3258,     3, -3258,  2779, -3258,
   -3258,  1084,  2457, -3258,    36, 16024,  2163,  2606, -3258, -3258,
    -145, 22702, 26570, -3258, 35976,  1271,  1271,  1271,  1420,  2843,
    2230,  2230, -3258, 24908, -3258, -3258,  2602, -3258, -3258, 27674,
   -3258,  1147, -3258, -3258, 16601,  1461, -3258,  2589, -3258, 37076,
   -3258,  2589,    36,  2470,  2480, -3258, -3258, 42576, 13716, -3258,
    2900, -3258, -3258,  2481,   566,  2697,   566, -3258,  2818,  2821,
     566, -3258, -3258, -3258, 22702,  1981, 16024,   580,   580,   580,
   -3258,  1084,  2589,  2487,   754,  2589, 23252, -3258, -3258,  -184,
    2485, 43126,  2952,  2962, 23252,  2845, -3258, -3258, -3258, -3258,
    4128, 22702, -3258, -3258, -3258,  2501, -3258, 17728, -3258, -3258,
   -3258,  2389,  2389,  2389, -3258, -3258, -3258, -3258, -3258,  2392,
    2707, -3258,  2392,  2392, -3258, -3258, -3258, -3258, -3258,   206,
    2570, -3258, -3258,   206, -3258, -3258, -3258,    23,   676,  2392,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258,  2389,  2389, -3258,
   -3258, -3258,   206,  2389, -3258,  2389,  3123, -3258,   301,    56,
    2389,  2389,  2389,  2505,  2498, -3258,  1069, -3258, -3258,  2574,
     138, -3258,  2512,  2513, -3258, -3258,  1839, -3258,  2525, -3258,
    3922, -3258,   402, -3258,  1075,   754,  2514, 43126, -3258,   800,
   -3258,  3744, -3258, -3258, -3258,    47, -3258, -3258,   206,   855,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, 13716,  2527,  2535,  2537, -3258, -3258, -3258, -3258,
   -3258, -3258, 13716, -3258, -3258, -3258, -3258, -3258, 13716, -3258,
   -3258, -3258, -3258, -3258,  2684, -3258,  2754, 13716, 13716, -3258,
   -3258, -3258, -3258, 13716, -3258, -3258, -3258, 13716,  3092,  2753,
    2563, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   13716, -3258, -3258, -3258,  3744, -3258, 13716, -3258, -3258, 13716,
   13716, -3258, 13716, 13716, -3258,  2378, -3258,  2384, -3258,  2393,
   -3258, -3258,  2800, -3258, -3258,  2589, 13716, -3258,  2565, 43126,
   -3258, -3258,  2566, -3258, -3258, -3258, -3258,  2589, -3258, -3258,
     893,  2596,  2596,  2596,  1461,  2589,  1092, -3258, -3258,  2922,
   -3258,  1767, 22702, 16024,  2576,  2582, -3258,   -30, -3258, -3258,
    2577,  1271, -3258,  3109,  2958, -3258, -3258, 38176,  2587, -3258,
   -3258,  2851, -3258,    74,  2773, -3258, -3258, -3258,   869,  2675,
    2688,    36,  2589,  1839,  1827,  1986,  2932,  2894,  2641,   566,
     566,  3271,  2642, 13716, 13716,  2607, -3258,  2483, -3258,  3013,
   -3258, -3258, -3258,  1767, 13716, -3258,  2615,  2619, 43126,  1123,
   -3258,  3256,   302, -3258,  3123, -3258, -3258, -3258,   -70, -3258,
   -3258, -3258,   825, -3258,  2620,   825,   825,  3158,   201, -3258,
    3158, 37626, -3258,  1224, -3258,  2654,   206, -3258, -3258,  2655,
   -3258, -3258, -3258,   825,  2631,   206, -3258, -3258, -3258,   825,
   -3258, 38176,  1839,  3213, -3258,  2681, -3258,  3091,  2968, -3258,
    3123, -3258,  2970,  2872, -3258,   206, -3258, -3258,  3158, -3258,
     206,  3158,   825,  2875, -3258,   825, 43126, -3258, 43126,  2662,
     436,  1839, -3258, -3258, -3258,  2643,  2640, -3258, -3258, 21602,
   -3258, 43126,  4128, -3258,  2662, -3258,   -30,    99,  2606, -3258,
   -3258, 43126, -3258,  2878,  1131, -3258,  2647,  2648,  2649,  2650,
    2652, -3258,  1162,  2406, -3258, -3258, -3258,   766,  2436,   127,
    2656,  2653,  2443,  1507,  2448,  2463,  2921,  3078, -3258,  2472,
    2663,  2474,  2482,  2491,  2524,  2529, -3258, -3258, -3258,  2658,
    2589, -3258, -3258, -3258,  2666, 38726, -3258,  2747,  2756, -3258,
   -3258,  2757, -3258, -3258,   125,  1574, -3258, -3258, -3258, -3258,
   16024,  3004, -3258,   993, -3258, -3258, -3258, -3258, 13716, -3258,
    2483,  3184, -3258, 24908, -3258, -3258, -3258, -3258, -3258,  2677,
    2691,  8523,  3240, -3258,   566, -3258,  2732, -3258, -3258, -3258,
    2736,  2589,  2589, 43126,  2700,  3022, -3258,   993,   754, 43126,
   43126,  1185, -3258,   694,   694,   694,  1928,  1928, -3258, -3258,
   -3258, -3258,   621,    29, 43126, -3258, -3258,   953, -3258, -3258,
   -3258, -3258, -3258,   825, -3258,   127, -3258, -3258, -3258, -3258,
   -3258, 37626, -3258, -3258,  3158, -3258, -3258, -3258,   127, -3258,
   -3258, -3258, -3258,  1251, -3258, -3258,  2937,  2740, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258,  2704, -3258, -3258,
   -3258,   727, -3258, -3258, -3258, -3258, -3258, -3258,   833, 43126,
    3108,  2869, -3258, -3258, -3258, -3258, -3258,  2711,  1119,   754,
    2713, -3258, -3258, -3258, -3258, -3258, -3258,  2946, -3258, -3258,
   13716, -3258, -3258, -3258,  2437, -3258, 13716, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258,   152,  2939,   701,   701,   701,
     701,  1574, -3258, -3258,  2767,  2808, -3258,   767, -3258,  -230,
     754, 13716,  1420,  1110,  3040, -3258, -3258, -3258, -3258,  3020,
    3470, 13716,  2724, 13716,  2725,  1197, -3258, -3258, -3258,  2729,
   -3258, -3258,  1209,  1274,  -184, -3258, -3258,   302, -3258, -3258,
   -3258,   786,   786,  1288, -3258, -3258, -3258,  1303, -3258, -3258,
   -3258,  1329, -3258,  1251, -3258,  3247,  2957,  3249, -3258,  -171,
   -3258, -3258,  4128, -3258, -3258, -3258, -3258, -3258, -3258,  2735,
     779,  2737,  2536,  2748, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, 22702, 21602, -3258,   322, 13716, -3258, -3258,  2589,  2951,
    3281,  3282,  3191,  3286,  1110, -3258,  -144, -3258,  3189, -3258,
    2589, 43126,  2589, 43126, -3258, 43126, 41476,  2941,  -184, -3258,
   -3258, -3258,  3331, -3258,    95, -3258, -3258,   953, 43126,   206,
     127,   206, -3258,  2989, -3258,  2991, -3258,  2768,  4077, -3258,
    3207,  4128,   -30, -3258, -3258, 13716, -3258, -3258, -3258,  2770,
   -3258,    36, -3258, -3258, -3258,   754, 43126, -3258,   127,   127,
    3301,   127, -3258,  3303,  3305,  -144, -3258,  1635, 13716,  1332,
    1349, -3258,  2778,  2782, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,   -30, -3258, -3258, -3258,
    3241, 32666,  2940, -3258, -3258,  2540, 22702, 16024,  1477, -3258,
   -3258, -3258, -3258,   127, -3258,   127,   127, -3258,  3350,   136,
   -3258, -3258, -3258, -3258, -3258, 43126,    76, -3258, 44226, 44226,
   43126, -3258,  2823, -3258,  3911,   488, -3258, -3258, -3258, -3258,
   -3258, -3258,  3341, -3258,  2790, -3258, -3258, -3258, -3258, -3258,
   -3258, 35426, -3258,  2802, -3258, -3258, -3258,  3093, -3258, -3258,
   -3258,  3202, 43126, -3258, -3258, -3258, -3258, 13716, 13716,  2835,
   -3258, 32666, 32666, -3258, -3258, -3258, -3258,  3353, 32666,  4077,
   -3258,  3184,  2809,  3242, -3258,  3160,  3248, 13716,  2589,  2589,
   -3258,   731, -3258, 29891,  2811, 33221, 13716, -3258,   488,  3341,
   -3258, 32666,  3040, 13716,  2814,  2824, -3258,   701, -3258,  3187,
     898,  2856, 13716, 32666, -3258,  3261,  3136,  2831, -3258,  2825,
    2579,  3302, 44226, 44226, -3258,  3198,  2589, -3258, -3258, -3258,
   43126, -3258, -3258, -3258,   783, -3258,  2589, 30446,  2854, -3258,
   -3258, 13716, -3258, 39276, 31001,  2838, -3258, -3258, -3258,  3081,
    2847, -3258,  2857, -3258, 32666, 13716, -3258,  3290,  2876, -3258,
    2426, 32666, -3258, -3258,  3239,  2864,  1036, -3258,  2861, -3258,
    3188, 18830,  3009, 43126, 28226,  2589,  2885, 32666,  3047, 31556,
    3280, 43126,  4128,  3285,  3291, -3258, -3258, -3258, 38176,  1355,
   -3258, -3258, 22702, -3258, -3258,    92,  2893, -3258, 28781, -3258,
    2907, -3258, -3258,  3347,  2580, -3258, -3258, -3258, 21043,  2770,
   -3258, 32666, -3258, 32666, -3258, 33776, 13716, -3258,  2926, -3258,
   -3258, -3258,  3911, -3258, -3258, 32111, 29336, -3258, -3258, 25461,
   -3258, -3258, -3258,  3293, -3258,  2589, -3258,  1488, -3258, 33776,
   -3258, -3258, -3258, -3258
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3258, -3258, -3258, -3258, -3258, -3257, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1621, -3258, -3258, -3258, -3258, -3258,
    1858, -1435, -3258, -3258, -3258, -3258, -3258, -3258,   907,    66,
    2774,   -66, -3155, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258,   397,   391, -3258, -3258,   220, -3258, -3258,  -350,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,  -253,  -215,
   -3258, -3258, -3258, -3258,   922, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258,  -219, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258,  -139, -3258, -3258,   -94, -3258,
   -3258,  -136, -3258, -3258,  -117, -3258, -3258, -3258, -3258,   -92,
   -3258,   -90, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
     412, -3258, -3258, -1861, -3258, -3258, -3258, -3258,  2343,  -975,
   -3258,  3105, -3258,  -388,   704,  1935, -1951, -1046,  -623,  -622,
   -1690, -3258, -3258, -3258,   329,  1043,  1439,   784,  1938,  1983,
    1497,  1541, -3258, -3258,   811, -3258, -2662, -3258, -3258, -3258,
     780, -3258,   781, -3258, -3258, -3258, -1418,   749,  -930, -3258,
     326,  -986,  1049, -3258,   539, -3258,   494, -3258,  -447, -2050,
   -1952, -3258, -3258, -3258,   507,   824,   873, -3258, -2524, -1634,
   -3258, -3258,   139, -3258, -3258, -3258,   132, -3258,   353,   210,
   -3258, -3258, -3258, -1499, -1754, -3258, -3258, -3258, -2349,  2395,
   -2542,   484, -1904, -3258,   349, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1544, -3258, -3258, -3258,  -190,   190,
   -1348, -2759, -3258, -3258, -3258, -3258, -3258, -3258,  1118, -3258,
   -3258,  2068,  2504, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258,  1690, -3258, -3258, -3258, -3258, -3258,
   -3258,  2450, -3258, -3258, -3258,  1515, -3258, -3258, -3258, -3258,
    2143, -3258, -3258,  2883, -3258, -3258, -3258, -3258,  1296,  1712,
   -3258, -3258, -3258,  2903,  1697,  -470, -1766, -3258,  3138, -3258,
   -3258, -3258, -1321, -1504, -3258,  2992,   293, -1413,  2155,  -501,
     689, -3258,   482,  -762,  4328, -3258, -1309, -1171, -3258, -3258,
    -502, -3258, -3258, -3258, -1271,  -738, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258,   691, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -1157, -3258,  1509, -3258, -1104, -3258,
   -3258, -3258,  2361, -3258, -3258, -3258, -3258, -3258, -1920, -1400,
     927, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -1894, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -1392, -3258,
   -1813, -3258, -3258,  -810, -3258, -3258,   207, -2298, -1214,  2321,
     631, -3258, -3258,  -962,  2427, -1571, -3258, -3258, -3258,  1356,
   -3258, -3258, -3258, -3258, -3258,   905, -2042, -1067, -3258, -3258,
   -2602,  -628, -1841,  -604, -3258, -1855,   451, -1179, -1901, -3258,
   -3258, -3258, -3258,    20, -3258, -3258, -3258,   476,  1726, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,  -328,  -372,  1789, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,  2670,  2651,
    1772, -3258, -3258, -2043, -3258, -3258,  1749, -3258,   709, -1873,
    3410,  1007, -3258, -3258,  1010, -2642, -3258, -3258, -3258, -3258,
   -3258, -3258,   948,   -24,   165,  3203, -3258, -3258, -3258, -3258,
   -3258, -3258,  2914,  2488, -1430,  3144, -3258, -3258, -3258, -3258,
   -3258,  2173, -3258, -3258, -3258, -3258, -3258, -3258, -3258,  3216,
   -3258,  -991, -3258,  -520, -3258, -3258,  -607, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258,  2274, -3258,  1215, -3258,
   -3258, -3258,  2673, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
    1044,   105, -3258,   278,    93, -3258,   223, -3258, -3258, -3258,
     -15, -3258,  -763,  -685, -1023,   647, -2689, -1247,  1048,  2687,
   -2823, -1154, -1283, -1308, -1536,    21, -3258,    -7,  -525,  -908,
    -709,  2743, -2117,  -423,  -511, -3258,  1513, -3258, -3258, -3258,
   -3258,  2227, -3258, -3258, -3258, -3258,  1364, -3258, -3258, -3258,
    1008, -3258,   729,   530, -3258, -3258,  3473, -3258,  2278, -3258,
   -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258, -3258,
   -3258, -3258, -3258,  2717,  3260,  3114, -3258,  2760, -3258, -3258,
   -3258, -3258, -3258,   424, -3258,  1047, -3258,   810,  2562,   879,
   -3258,  1450,  -676,  -972, -3258,   421, -3258, -3258,  1149,  3289,
    3128, -3258, -3258, -3258, -3258, -3258, -2252,  -600, -3258, -2334,
   -3258, -3258, -3258, -3258,  1490, -1169,  2411,  1141, -3258, -3258,
   -3258,  3224,  3339,  3344, -3258, -3258,   352, -3258,  3263,  -309,
   -3258,  1672, -3258,   945, -3258, -3258,   673,  3245, -3258, -3258,
    3252, -3258, -3258, -3258, -3258, -3258,  3253, -3258, -3258, -3258,
   -3258, -3258,  1210, -3258, -3258, -3258, -3258, -3258, -3258
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2017
static const yytype_int16 yytable[] =
{
     387,   685,   721,   570,   656,  1101,  1395,  1009,   732,   740,
    1783,  1490,   387,  1654,  1688,   387,  1208,  1209,  1211,  1435,
     928,  1217,   387,  1031,  1193,  2245,  2391,  1063,  1036,  1531,
    2693,  2353,   387,  2289,  1804,  1782,  2366,  1655,  1656,  1657,
    2307,  1812,   387,   423,  2376,  2501,  2380,  1995,  2040,  1064,
    1669,  1036,  2337,  2342,  2345,  2520,  1846,  1686,   987,  2720,
    2011,  2653,  2523,  2087,  2988,  1580,  1678, -1857,  3004,  2375,
    1505,  1106,  1107,   386,   502,  2326, -1508,  1952,   990,  3029,
     387,  1508,  1509,  1275,  2357,  2358,   670, -1858,  3057,  2408,
    2409,  1826,  1828, -1509,  -539,  1660,  1661,  2411,  1663,  -264,
     387,   387,  -254,   387,  1727, -1116,  1725,  1731,   479,  1299,
    1301,  1747,  2995,  1305,   387,   966,  -265,  2430,  2431,  2400,
     966,  1335,  1336,  1314,  1315,  1316,   748,  1401, -1921,  1534,
    1335,  1336,  2497,  1697,  1968,  1758,  1759,  1067,  1439,  1915,
    1764,  3304,   496,  3165,  3351,  1148,  1037,  2400,  1717,  2374,
     429,  1335,  1336,  2027,  3097,  2722,  2355,  1325,  1326,  1327,
    1781,   674,  1785,  1045,   702,  1450,  1737,  1738,  1739,  1369,
     714,  3188,   712,   713,   484,   961,   485,  1746,  2319,  2999,
    1814,  1974,  1401,  1817,  1818,  1819,  1820,  1112,  1822,  1823,
    1824,  1825,  1827,  1829,  1830,  1831,  1832,  1833,   966,  1335,
    1336,   742,  1103,  2400,   930,  1308,  3477,  1103,  1033,  2091,
    1059,  3137,   691,  3092,  1151,  1335,  1336,  2492,  2490,  3202,
    1834,  3219,   996, -1979,  1103,  1640,  3017,  3700,  1169,  1170,
    1171,  2401,  1335,  1336,  2398,  2399,  3027,  2089,  3018,  3028,
    1335,  1336,   967,  3200,  1936,  1335,  1336,   967,   974,  1456,
     584,  3550,  3019,  1335,  1336,  2371,   624,   625,  3037,   470,
    1089,   624,   625,  2648,  3056,  1335,  1336,  3560,  2372,  1335,
    1336,   430, -1116,  1001,  3203,  3094,  2076,   571,  1587, -1382,
    2028,  1335,  1336,  3488,  2476,  1897,  1122,  2426,  1074,   676,
     676,  1961,  1335,  1336,  2394,   391,  1335,  1336,  1335,  1336,
     716,  3155,   958,   454,  3101,  1077,  1065,  1123,  2105,  1395,
    2461,  2702,  3199,  2492,  3098,  -344,  1152, -1857,  3394,  1153,
    3463,  3017, -1979,  1178,  2424,   967, -1508,   117,  1644,   118,
     675,  1700,  1154,  3018,  1701,  3320,  2072, -1858,  1335,  1336,
    1335,  1336,  2453, -1509,  3464,  3395,  1179,  3019,   975,  1335,
    1336,  1891,  2106,   704,  3199,  2073,   624,   625,   455,  3072,
    1066,  1075,  1457,  1835,   717,  1627,  2427,  3073,   572,  1078,
    2997,  1149,  2707,  1115,  1309,  2154,  2231,  2361,  2446,  2447,
     563,  1335,  1336,  1335,  1336,  3099,  3138,   106,  1335,  1336,
    1899,  1900,  2477,  1395,  1588,  1335,  1336,  1395,   692,  1527,
    1335,  1336,   471,   729,  1368,   387,  3551,   518,  2493,  1021,
    2395,  3453,   106,  2211,  3488,   387,  2047,  2708,  2448,   387,
    3263,  2057, -1382,   693,   387, -1508,  1392,  2063,  2647,   387,
    2066,  1492,  3478,  2402,   573,  2373,  1090,  1175,   575,  1498,
    2449,  1645, -1509,   976,   498,   624,   625,  1937,  1335,  1336,
   -1116,   387,   580,   715,  1891,  3728,  3191,  1337,  2428,  1155,
    1338,  2410,  2723,   519,  2413,  2725,  2462,  1510,  1511,   387,
     107,  1060,  2450,  1975,  2688,  2422,  2423,  2697,  1517,   387,
    1708,  1106,  1107,  2464,  2432,   387,  1007,  1337,  2096,  1402,
    1338,   387,  1532,   387,   387,  3074,  1476,  2703,   387,   387,
    2040,  2719,  3225,  3204,  2493,   585,  2706,   697,  3313,   387,
     387,  3229,  2320,   487,   387,  1948,  2727,  -344,  2502,   387,
     387,  1628,   387,   387,   387,   387,  1335,  1336,  1493,  2103,
    1836,  3242,  1335,  1336,  1580,  1337,  3244,  1995,  1338,   431,
    1106,  1107,  1156,  2040,  1402,  2813,  1335,  1336,  1777,  1038,
    1507,  1337,  2356,  3352,  1338,   108,   605,  3100,   387,  2698,
    2699,  3030,  1438,  2365,  1117,  1117,  1046,  1070,  1337,  2172,
   -1116,  1338,  3455,  2176,   387,   520,  1337,  1892,  2403,  1338,
    1995,  1337,   387,   387,  1338,  3166,  3341,   387,  3420,  1337,
     109,  1590,  1338,  1783,   387,   926,   927,  2327,  1335,  1336,
     996,  1337,   981,  1404,  1338,  1337,  2214,  2948,  1338,  1440,
   -1857,   993,  2266,  3157,  2267,  1816,   676,  1337,  2311, -1508,
    1338,  1518,   962,   996,   387,  1519,  3141, -1116,  1337,  2825,
   -1858,  1338,  1337,  2029,  1337,  1338, -1509,  1338,  1479,  1534,
    1335,  1336,  -511, -1857,  1335,  1336,  2261,  3342,  3343,  2718,
    2264,  3701, -1508,  1117,  1635,  1839,  1437,  1783,  2091,  1339,
    1310,  1536,  -344, -1858,  2270,  2271,  1446,  3377,  1339, -1509,
    -539,  2090, -1116, -1921,  1337,  -264,  1337,  1338,  -254,  1338,
    1892, -1116,  2379,   387,  2248,  1337,  2500,   959,  1338,  1339,
    2247,   387,  -265,  2478,   387,  1335,  1336,   387,   387,   705,
    2451,  1335,  1336,  1022, -1921,  1335,  1336,  1335,  1336,   564,
    3439,  1926,  -136,  1783,  3548,  1393,  3220,  1337,  3397,  1337,
    1338,  3020,  1338,  1893,  1337,  1702,   496,  1338,  1703,    40,
   -1116,  1337,  2709,   121,  1338,  1117,  1337,  1339,  2435,  1338,
    3454,   387,   576,  1616,   387,  1591,  1629,  2112,  2658,  2659,
     110,  1927,  3265,  1339,   513,   507, -1508,  3561,  1793,  1794,
    1939,  1335,  1336,   592,   972,  1335,  1336,   730,   394,  1176,
    1339,  2943,  1182,  2732,  2094,  2095,  2977,  3365,  1339,  3493,
    2981,  1335,  1336,  1339,  1337,  3366,  2307,  1338,  2660,  2930,
    2384,  1339,  2113,  1328,  1335,  1336,  2641,  1122,  3348,  2093,
    1395,   436,  2978,  1339,  2126,  2127,  2982,  1339,  1648,  2968,
    1335,  1336,  2996,  2212,  1335,  1336,  3020,  2952,  1123,  1339,
    2412,   449,  2414,  2255,  2128,  2129,  1893,  2419,  2132,  2133,
    1339,  1034,  1897,  1974,  1339,  3421,  1339,  1335,  1336,   456,
    2139,  2140,  3054,  2437,  1809,  2439,  2440,  2444,  2528,  2529,
    1418,  2144,  2145,  3499,   699,  3540,  2092,  2147,  2148,  1644,
    2344,  -577,  1337,  1083,   747,  1338,  3253,  1649,  1337,  1395,
    2733,  1338,    51,  1117,  2825,  1945,  1339,  1071,  1339,  2711,
    1335,  1336,  1337,  2597,  1644,  1338,  1452,  1339,  1942,  1845,
    1335,  1336,  3562,   387,   731,   387,  1335,  1336,  1947,  1036,
    2110,  1950,  1951,  1973,  1650,  3481,  2481,  3483,  2149,  2150,
    1799,  1335,  1336,  1335,  1336,  1886,  1490,  1490,   387,  1339,
     593,  1339,  1880,  1644,   387,  1905,  1339,  1036,  2692,  2818,
    1530,  1887,  1888,  1339,  1337, -2016,  1685,  1338,  1339,  2322,
    2161,  2162,  2165,  2166,   443,  3184,  1399,  2178,  2179,  1931,
     457,  3089,  3137,  1644,  2182,  2183,  2614,  1168,  2362,  2184,
    2185,   387,  3097,   387,  3095,   387,  1335,  1336,  1651,  1838,
    1928,  3224,  1668,  1392,   473,  3088,  1337,   387,   387,  1338,
    1337,  3349,  1847,  1338,  1072,  3367,  1339,   387,   387,  1580,
     565,  1106,  1107,  1783,  1940,  3419,  1517,  1726,   387,  2560,
    1335,  1336,  2256,  1073,   567,  2381,  2521,  2192,  2193,  3254,
    3693,  2526,  1979,  2661,  2068,  1007,  3376,  2561,  2644,   842,
     387,   387,   387,   387,  1929,  2482,  2534,  1335,  1336,  2323,
     387,  1337,   387,  2539,  1338,  3563,  1730,  1337,   387,  1652,
    1338,  1337,  1881,  1337,  1338,  1419,  1338,  1061,  2548,  2549,
    1482,  1483,  2249,   474,  3072,  2553,  1335,  1336,  2262,   114,
     387,   396,  3073,  2558,  1339,  3350,  1763,  1485,   476,  3475,
    1339,  2048,  2049, -1976,  2056,  2728,  2058,  2059,  2060,  2061,
    2062,  1453,  2064,  2065,  1339,  3177,  3178,  1062,  1506,   481,
    2609,  2195,  2196,  1480,  1481,   985,  2269,  1337,  3171,  2616,
    1338,  1337,  2576,  1491,  1338,  2204,  2205,   387,  3494,  1912,
     387,  1497,  3673,  3469,   498,  3470,   842,  1337,  3322,  2250,
    1338,  3422,  3098,  1335,  1336,  1975,  1351,  3138,  3674,  2503,
    1337,  1335,  1336,  1338,  2987,  1589,  1339,   115,  1486,  1518,
    1335,  1336,  2069,  1519,   730,   397,  1337,  1335,  1336,  1338,
    1337,   486,  3513,  1338,  1335,  1336,  1420,  2217,  2218,   387,
    1913,   387,   850,   387,   387,   387,   387,   387,  1912,  2257,
     387,  3359,  2624,  1337,  1335,  1336,  1338,   387,  1339,   387,
    1335,  1336,  1339,   872,  -518,  2258,   487,   444,  2040,  2483,
    3074,   596,  1420,  3102,  1624,  1335,  1336,  3423,  1626,  2236,
    2237,  2040,  1882,  2238,  2239,  1335,  1336,  1215,  2989,  2989,
    2989,  1653,  2683,   387,  3031,  2530,  1337,  3032,  1116,  1338,
    1335,  1336,  3424,  2535,  3139,  1466,  1337,  3267,  2941,  1338,
    2684,   699,  1337,  1339,  1986,  1338,  1620,  1621,  1995,  1339,
    1335,  1336,  3202,  1339,   502,  1339,  1034,  1337,  3400,  1337,
    1338,  2276,  1338,   387,  3330,  2111,  1335,  1336,  3401,  2277,
    2610,  2611,  1393,  2242,  2872,  2873,  2876,  2877,  3209,   493,
    2484,   731,  1335,  1336,  1335,  1336,  3580,  2243,   719,   720,
     872,  1335,  1336,  1335,  1336,   597,  1530,  1335,  1336,   504,
    3603,  2228,  1467,  1335,  1336,  1117,  2251,  3203,  2993,  1339,
    1335,  1336,  1337,  1339,  1215,  1338,  1335,  1336,   506,  2926,
    1487,   387, -2016,  1354,  2844,  2845,  1335,  1336,   499,  1339,
    2898,  2899,  2246,   531,  2923,  2924,   387,   842,  3623,  1335,
    1336,  3012,  1339,   514,  3015,  3016,  1337,  2009,   399,  1338,
    3279,  3280,  3603,  1783,   589,  1335,  1336,  3210,  1339,   598,
     516,  3033,  1339,  3444,  3445,  2587,  3140,  1997,  2685,   117,
    2000,   118,   517,  1337,  1216,  3100,  1338,  3141,  2311,  2012,
    2114,   525,  1335,  1336,  2119,  1339,   842,  2896,  2020,  1468,
    1335,  1336,  3211,  3218,  1122,   387,  3223,   562,  1335,  1336,
     387,   387,  1337,   387,  2330,  1338,  1783,  2120,   387,  1335,
    1336,  3554,  3555,   437,   387,  1123,   387,  1026,  1335,  1336,
     579,   387,   387,   583,   387,  1335,  1336,   398,  1339,  1335,
    1336,  2379,  2276,  1783,  3243,  2916,   387,  3245,  1339,   387,
    2669,  1335,  1336,   667,  1339,   387,   387,   387,   387,  1857,
    1857,   593,  1857,   687,  3142,   387,   387,   387,  2435,  1339,
    2123,  1339,  -270,   399,  1879,   565,  2130,   981,  3622,  1337,
    3402,   686,  1338,   387,   452,   993,  1890,  1337,   453,  1469,
    1338,  2131,   387,  1857,  1857,  1857,  1337,  2415,  2416,  1338,
     698,  3399,  2865,  1337,   400,   699,  1338,  2280,  2281,   387,
    1337,   872,  1027,  1338,   401,  3637,  3637,   708,  2438,   728,
     387,  1335,  1336,  2343,  1339,  2347,  2352,  2922,   624,   625,
    1337,   106,   387,  1338,   922,  1215,  1337,  1535,   387,  1338,
    1335,  1336,  1335,  1336,  2613,  2828,  2135,   925,  1949,  2833,
   -1116,  1337,   624,   625,  1338,   420,   932,  2963,  1339,  2010,
     872,  1337,   947,   433,  1338,   966,  1967,   949,   439,   954,
    2964,   956,  1335,  1336,  2390,  2343,  1337,  2417,   964,  1338,
    2137,  2471,  2472,   965,  1215,  1339,  3508,  1364,  1365,  1366,
    1367,   665,   666,   109,   669,  1300,  1337,   387,  3497,  1338,
    2965,  1335,  1336,  -548,   980,   387,  1546,  2138,   950,  3570,
    3360,  1033,  1337,  1547,  1339,  1338,  2650,  2651,  3403,  1132,
    1133,   979,  3436,  1548,  1549,  2736,  2737,  3096,  1337,  1033,
    1337,  1338,   387,  1338,   988, -1116,  2142,  1337,   999,  1337,
    1338,  1000,  1338,  1337,  1304,   387,  1338,  1003,   387,  1337,
    2810,  2737,  1338,  1550,  1783,  1007,  1337,  1551,  1004,  1338,
    1335,  1336,  1337,  3067,  3068,  1338,  1335,  1336,  1552,  3090,
    3091,  1010,  1337,  2085,   951,  1338,  1019,  1553,  1018,  2644,
    1020,  1339,  1024,  1554,  1025,  1337,  3149,  3150,  1338,  1339,
    1335,  1336,   967,  1034,   680,   681,  1555,   682,  1339,   683,
    3120,  1337,  2343,  2143,  1338,  1339,  1039,  1028,  1040,  2343,
    2229,  1103,  1339,  1041,  1556,   952, -1116,  3192,  3091, -1116,
    2152,  1335,  1336,  1557,  1558,  3271,  3091,  2156,  1337,  1559,
     953,  1338,  1339,  1009,  2157,  1042,  1337,  1560,  1339,  1338,
    1143,  1144, -1116,  1561,  1337,  1043,  2689,  1338, -1116,  1335,
    1336,  1335,  1336,  1339,  2159,  1337,  3275,  3277,  1338,  1044,
    2160, -1116,  2050,  1339,  1337,  1068, -1116,  1338,  1069,  1562,
    1036,  1337,  1082, -1116,  1338,  2691,  1084,  3011,  1339,  3344,
    3091,  1335,  1336, -1116,  1085,  2164,  3306,  1337,  1335,  1336,
    1338,  3414,  3415,  1087,  2620,  1092, -1116,  1097,  1339,  2897,
   -1116,  1335,  1336,  3417,  3091,  1335,  1336,  2640,  1103, -1116,
    1113,  3035,  3036,   387,  1339,  1563,  1490,  1564,  1029,  3039,
    2167,  2051,  1114,  2667,  1565,  1161,  3062,  1335,  1336,  1151,
    1339,  1160,  1339,  1335,  1336,  1162,  2168,  1335,  1336,  1339,
    3134,  1339,  1335,  1336,  1164,  1339,  1335,  1336,  1166,  2607,
   -1116,  1339,  2180,  2682,  2194,  1167,  1415,  1337,  1339,  1416,
    1338,  2201,  1417,  2202,  1339,   966,  1168,  2203,  3418,  3091,
    1172, -1116,  1173,  2206,  1339,  1030,  1337,  1174,  1337,  1338,
    2210,  1338,  3427,  3428,  3307,  3308,  2213,  1339,  3309,  3310,
    1177, -1116,  1566,  1184,  1335,  1336,  2230,  3429,  3430, -1116,
    1186,  1335,  1336,  1339,  1188,  1335,  1336,  1567,  1337,  2842,
    1189,  1338,  1568,  2726,   387,  1190,  1335,  1336,  2991,  2992,
    2729, -1116,  2052,  3431,  3430,  2852,  3510,  3415,  1335,  1336,
    1339,  1152,   387,   387,  1153, -1116,  1191,  1337,  1339,   387,
    1338,   387,   387,  3511,  3415,  1192,  1339,  1154,  2589,  3697,
    3698,  2104,  1569,  1769,  1769,  1394,  1193,  1339,  1570,  1194,
    2858,  1571,  1195, -1116,  1335,  1336,  1339,  1196,  2867,  3345,
    3346,  2955,  2956,  1339,  2932,  2933,  1335,  1336,   387,  2868,
    3147,  3148,  1197, -1116,  1572,  1573,  1397,  1574,  2890,  1339,
     387,   387,   967,  2053,  1198,  2900,  1337,   676,  1199,  1338,
     387,  1575,  1337,  1200,  1201,  1338,   387,   387,  1202,  1398,
     387,  2902,  1203,   387,  2343,  1335,  1336,  1204, -1116, -1116,
    1335,  1336,  1205,  1576,   387,   387,  1337,   387,  1206,  1338,
    1335,  1336,  3173,   387,   387,  1207,  1210,  1212,  1213,  1214,
    1335,  1336, -1116,   387,  1218,   387,  1335,  1336, -1116,   387,
     387,  1219,  1335,  1336,  1220,   786,  1221,  1337,  1222,  1339,
    1338,  1223,  1224, -1116,  1335,  1336, -1116,  1225,  1335,  1336,
    1400,  2445,  1226, -1116,  1155,  1408, -1116, -1116,  1339,  1410,
    1339,  2903,  1227, -1116,  1228,  1337,  1229,  1337,  1338,  1230,
    1338,   387,   387, -1116,  1231, -1116, -1116,  1232,  1405,  2108,
   -1116,  1233,  3286,  1783,  1234,  3216,  3217,  1577,  1412, -1116,
    1339,  1235,  1236,  1237,   799,  1238,  1578,  1337,   387,  2487,
    1338, -1116, -1116,  3227,  1337,   387, -1116,  1338,  1239,  3230,
    1409,  2118,  1240,  1241,  1335,  1336,  1242,  1337,   387,  1339,
    1338,  1337,  1243,  1244,  1338,  1245,  1246,  3381,  3386,  3387,
    3388,  3389,  3246,  1335,  1336,  3248,  1248,  1156,  1249,  1430,
    2121,  1335,  1336,  1337,  1431,  2054,  1338,  1335,  1336,  1337,
    1250, -1116,  1338,  1337,  1251,  -548,  1338,  1252,  1337,  -548,
    1253,  1338,  1337,  1254,   387,  1338,  1335,  1336,  1255,  1256,
    1257, -1116,  1335,  1336,  1335,  1336,  1261,  1262,  1339, -1116,
    1335,  1336,  1335,  1336,  1339,  1263,  1264,  1265,  1783,  1335,
    1336,  1266,  1267,  1268,  3383,   826,  1335,  1336,  1434,  2122,
     527, -1116,   529,  1269,   530,  2141,   532,  1270,  1339,  1271,
    1337,  1335,  1336,  1338,  1272,  1274,  1276,  1337,  1277,  1278,
    1338,  1337,  1279,  1280,  1338,  1281,  1335,  1336,  1436,  2155,
    1282,  1283,  1337,  1284,  1285,  1338,  1474,  1335,  1336,  1339,
    2960,  1335,  1336, -1116,  1337,   387,  1286,  1338,  1335,  1336,
    1442,  1444,  1287,  1335,  1336,  1288,  2390,  1335,  1336,  1443,
    2158,  1289,  1290, -1116,  1291,  1292,   847,  1339,  1293,  1339,
     387,  1294,  1295,  1296,   387,  1297,   387,   387,   387,   387,
    1337,  3083,  1298,  1338,  1335,  1336,  1302,   387,  2174,  1445,
    2175,   387,  1337,  1303,   387,  1338,  1335,  1336, -1116,  1339,
    3079,  1335,  1336,  1335,  1336,  1306,  1339,  1307,   387,   387,
     387,  1311,  1312,  1313,  1317,  1879,  1318,  1319,  1320,  1339,
    2181,   387,   931,  1339,  1321,  1335,  1336,   387,   567,   387,
    1322,  1337,  1478,  1396,  1338,  1413,  1337,   387,  1451,  1338,
    2189,  1494,  1459, -1116,  2190,  1339,  1337,  1335,  1336,  1338,
    1465,  1339,  1499,  1783,  1500,  1339,  1337, -1116,  1501,  1338,
    1339,  1502,  1337,  1504,  1339,  1338,  2191,  1512,  1337,  1335,
    1336,  1338,  2199, -1116,  1783, -1116,  2200,  1516,  3681,  1514,
    1337,  2207,  1528,  1338,  1337,  2216,  1593,  1338,  1117,  1592,
    1783,  1595,  1594,  1335,  1336,  1596,  1597,  1598,   387,  1335,
    1336, -1116, -1116,  1599,  1600,  1601, -1116,  1602,  1335,  1336,
     387,  1603,  1339,   387,  1611,  3681,  1604,  1605,  3619,  1339,
    1606,  1335,  1336,  1339,  3282,  1607,  1610,  2620,  1608,  1609,
    1217,  1301,  1305,  2221,  1339,  1615,  1617,  1632,   880,  1392,
    2232,  1335,  1336,  1619,  2240,  1637,  1339,   387,  3172,  1644,
    1337,  1335,  1336,  1338,   387,  2822,  1672,   387,  1335,  1336,
    1310,   387,   387,  1335,  1336,   387,  1860,  2823,  1861,  1337,
    1648,  3362,  1338,   387,  2436,  1692,  1706,  1337,  1335,  1336,
    1338,   387,  1339,  1337,  1723,  2739,  1338,  1335,  1336,  1335,
    1336,   387,  1755,  1780,  1339,  1789,  1795,  1335,  1336,  1907,
    1908,  1909,  1337,  2824,  1800,  1338,  1335,  1336,  1337,  2808,
    1337,  1338,  1815,  1338,  1837,  2839,  1337,  3232,  1337,  1338,
    1821,  1338,  1335,  1336,  1848,  1337,  1849,  1873,  1338,  1649,
    3358,  1876,  1337,  1339,  3162,  1338,  1906,  1920,  1339,  1335,
    1336,  1932,  1934,  3358,  1335,  1336,  3256,  1337,  1339,  1941,
    1338,  1335,  1336,  1944,  2847,  1335,  1336,  1965,  1339,  2848,
    1970,  1966,  1337,  1969,  1339,  1338,  1650,  3668,  1972,  2851,
    1339,  3221,  1980,  1337,  1981,  1982,  1338,  1337,  1983,  2853,
    1338,  1984,  1339,  1985,  1337,  2856,  1339,  1338,  1986,  1337,
    3017,  2857,  1338,  1337,  1335,  1336,  1338,  2007,  2343,  2004,
    2005,  3432,  3018,  2859,  1335,  1336,  2013,  2860,  2008,  2015,
    2330,  2016,  2021,   462,  2035,  2075,  3019,  2086,  2390,  2090,
    1337,  2097,  2100,  1338,  2099,   624,  3023,  2101,  2102,  1047,
    1651,  2107,  1337,  2109,  2116,  1338,  2117,  1337,  2124,  1337,
    1338,  2134,  1338,  2125,   387,   387,  2136,   387,  2146,  2170,
    2151,  2163,  1339,  2169,  1537,   463,   387,  1048,  2171,  2173,
    2177,  1337,   387,  2186,  1338,  2187,  1538,  2219,  1009,  2188,
    2197,  1339,   387,  2861,  2208,  -781,   608,  2209,  2253,  1339,
     387,  2215,  2591,  1337,  2220,  1339,  1338,  1648,  2284,  2233,
    2234,  2510,  2862,  2235,  2279,  2285,  2259,   387,  1049,  1367,
    2870,  1652,  -957,  1050,  1339,  1337,  2871,  3632,  1338,   387,
    1339,  2268,  1339,  2286,   387,  2511,  2282,   387,  1339,  2292,
    1339,  1957,  2283,  2294,   387,  2874,   464,  1339,  2296,  1337,
     387,  2881,  1338,  2882,  1339,  1337,  2302,  2297,  1338,  2883,
    2960,  2884,  1648,  2298,  1337,  3482,  1649,  1338,  2885,  1339,
     388,  2314,  3368,  3369,  1913,  2886,  2512,  1337,  2315,  2513,
    1338,  2334,   419,  2316,  1339,   425,  2317,  2514,  1912,  2336,
    2887,  2335,   434,  3501,  3502,  1339,  3504,  1337,  2360,  1339,
    1338,  2363,   445,  1650,  2359,  2888,  1339,  1337,  2367,   609,
    1338,  1339,   461,  2368,  1337,  1339,  2889,  1338,  2343,  1337,
    2891,  1649,  1338,  1957,  2369,  2385,  2392,  2892,  2393,  2420,
     387,  2421,  2895,  2454,  1337,  2468,  2901,  1338,  3544,  3732,
    3545,  3546,  1339,  1337,  2473,  1337,  1338,  1539,  1338,  2469,
     480,  2474,  1805,  1337,  1339,  1530,  1338,  2507,  1650,  1339,
    2475,  1339,  1337,  2904,  2265,  1338,  2498,  1651,  1051,  1638,
     483,   388,  1958,   388,   818,  2906,  2540,  2550,  1337,  2527,
    2908,  1338,  2910,  1339,   480,  2562,  2563,  2582,   610,  1959,
    2594,   410,  3440,  1653,  2600,  1337,  2618,  2603,  1338,  2604,
    1337,  2605,  1960,  1338,  2911,  1339,  2606,  1337,  2612,  2619,
    1338,  1337, -1011,  2627,  1338,  2632,  2638,  1540,  2634,  3437,
    2646,  2649,  1651,  2654,  2652,  2665,  2913,  1339,  2666,  2679,
    2671,  -343,   387,  2690,  2696,  2704,     1,  1052,  1652,  2700,
    1986,  1541,  2701,  2716,  2717,  2721,     2,     3,  2914,  2797,
    1337,  1339,  1987,  1338,  1958,   387,  3490,  1339,  2801,     4,
    1337,     5,  2731,  1338,  2806,  2807,  1339,  2809,  2811,  2817,
     387,  1959,  3126,  2819,  1351,   465,   411,  1961,  3127,  1339,
       6,     7,  2825,  1897,  2695,  2829,     8,  3128,  2834,  1898,
       9,    10,  2835,  1652,  2836,  1542,  1053,   466,  2837,  1339,
    3278,  2838,  1957,    11,  2840,  2515,  1351,  2841,  2846,  1339,
    2277,   387,  2866,  2849,   412,  2850,  1339,  2854,  2855,  2863,
      12,  1339,   467,  2869,  2875,  2893,   719,   720,  2912,  2919,
    3281,  1806,  2921,  2925,   387,  2929,  1339,  3285,  2441,    13,
    2928,  2442,  3287,  -343,  2938,  1339,  2940,  1339,    14,    15,
      16,  1988,  2942,  3708,   387,  1339,  1897,  3288,  2953,  1961,
    2961,    17,    18,  2969,  1339,  2973,  3291,  1543,  3293,  1962,
     468,  3541,  2976,  2970,  2979,  2974,  3294,  2980,  2998,   387,
    1339,   387,  2994,  3000,    19,  3295,  1054,  3490,  1899,  1900,
    1122,  3593,   387,  3001,   387,  3006,  3013,  1339,  3063,  3066,
    1374,    20,  1339,  3071,   387,  3020,  3080,  3093,  3081,  1339,
    1653,  1123,  3111,  1339,  2629,  2630,  2631,  1055,  3296,  3085,
    3260,  3104,  2516,  3297,  1963,    21,  1901,  3024,  2784,  3105,
    3447,  3106,    22,  1958,  3538,    23,  3109,  3593,  2343,   611,
     612,   613,   614,   615,   616,  2655,  2656,  2657,   387,  1351,
    1959,  1962,  1339,  3116,  3117,   617,    24,  3118,  3129,  3131,
    3133,  1354,  1339,  1960,  3145,  1653,  3040,   -59,  3152,  1767,
    3156,   413,    25,  2517,  3158,   528,   387,  3150,  2669,  3159,
    1351,  3164,  3163,  3167,  3169,   561,  1548,  1549,  3174,   569,
      26, -1045, -1050,  1354,   480,    27,   387,  3170,  1807,   588,
    3183,  2518,   387,   387,  1378,  3185,  1963,  3041,  3189,  1351,
    3057,  3042,  3190,  3215,  1808,  3054,  3226,   387,  -468,  -468,
    1551,   480,  3237,  3723,  3228,  3236,  3238,  -468,  3240,  3241,
    3251,  1552,  3585,  3247,   387,  3258,  3270,  3257,  1961,   688,
    1553,  3272,  3273,  3274,  3275,  -343,  3276,  3723,  3284,   480,
    3283,  3289,  3290,  3298,  3043,   480,  3301,  3292,  3175,  1555,
    3299,   710,  3314,   480,   480,  3302,  3303,   763,   722,   569,
    3323,  3326,   387,  3627,  1103,  3696,  3329,  1556,  3338,   749,
     750,    28,  3332,   414,   755,  3327,  3334,  1356,  1357,   923,
     924,  3363,   388,   388,   569,   480,  3364,  1379,   415,  3277,
    3373,  1382,  3374,    29,  3379,  3375,  1561,  3378,  3385,  1383,
     763,  3391,    30,  3392,  3664,  3406,  3408,  3411,  3413,  1356,
    1357,  3669,  3416,  1989,   416,  3433,  3434,  3435,   971,  3443,
    1962,  3446,    31,  3193,    32,    33,  1354,  3688,    34,   417,
     786,    35,  3448,    36,   480,  3456,  3458,  3459,    37,  3460,
      38,  3461,   569,   480,  3467,  2464,  3476,   480,  3484,    39,
    3485,  3492,  3486,    40,   480,  3496,  3503,  1354,  3505,    41,
    3506,  3715,  3512,  3716,    42,  1384,  3193,  2472,    43,  1957,
    1564,  -482,  3514,   786,  3536,  1963,  3547,  1565,  -212,  3565,
    -343,   797,  3567,  3573,   569,  3572,  1354,  3574,    44,   799,
    3580,  -230,    45, -1176,   387,   387,  3598,  3597,  3617,  3599,
    3608,  1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  3618,
    3621,  3623,  3628,  1386,   387,  3629,   387, -1779,   387,   387,
    3630,  3633,  3639,  3452,   797,  3649,   814,  3659,    46,  3660,
    3661,   387,   799,  1360,  1361,  1362,  1363,  1364,  1365,  1366,
    1367,  3666,  3663,  1102,    47,  1566,  3667,    48,  3670,  3671,
    3675,   569,    49,  3676,   480,  3682,  3687,  1120,   480,   387,
    1567,  3689,  3691,  3703,  3704,   719,   720,  3694,  3706,   814,
    3044,  1351,  3726,  3695,  2951,    50,  3731,  3045,  2067,  2278,
    1110,  3569,  3262,  1356,  1357,  3259,  3733,   119,  3371,  3709,
     826,  3714,   392,   393,  3533,  3646,    51,  3604,  3647,   387,
    1958,   480,  1548,  1549,  1183,  3046,  3638,  3613,  3612,  3266,
     432,  1570,  1356,  1357,  1571,   438,  1614,  1959,   387,   442,
     515,  3533,  3533,   387,  3087,  2034,  3340,  2799,  2491,  1387,
    1960,  3007,  2038,   826,  -468,  -468,  1551,  1572,  1573,  1990,
    1574,  1389,  2404,  -468,   387,  3002,  2465,  1552,   842,  3356,
    3025,  3026,  3064,  3201,  3239,   387,  1553,  3233,  3231,  3003,
     846,   847,  2967,  1351,  3533,  3533,  3474,  3047,  1957,  3479,
    3355,  3533,  3426,  2832,  2198,  1555,  1576,  1351,  1362,  1363,
    1364,  1365,  1366,  1367,  1631,  3269,  3533,  3361,  3533,  2455,
    1103,   842,  1954,  1556,  3533,  1515,  2299,  1889,  1121,   491,
    2637,  2295,  1099,   846,   847,  1961,  3533,  1360,  1361,  1362,
    1363,  1364,  1365,  1366,  1367,  3533,  3533,  2318,   684,  1612,
    3393,  1014,  1561,   387,  1911,  3179,  3135,  3300,  1722,  3136,
    3533,  2975,  2524,  3473,  1770,  2617,   387,  3533,  1362,  1363,
    1364,  1365,  1366,  1367,  1670,  3337,  3005,  3533,  3641,  3325,
    3048,  2325,  1429,  1332,  3533,  1334,  1447,  2291,  1354,  2305,
    1577,  3154,  2986,  2946,   387,  2945,   387,  3533,  3699,  1578,
    3533,  3539,  3533,   673,   387,  1181,   756,   659,   480,  2735,
    2878,   387,  1636,  1449,   480,   387,  3592,  1946,   536,   537,
    2939,  3533,  3462,  3713,  1850,  3615,  1564,  1962,  3507,  1958,
    3235,   387,  1921,  1565,  3533,  2971,  3533,  3168,   387,  2949,
    1463,  3328,   872,   604,  3194,  1862,  1959,  3195,  3533,  3533,
    2687,  1423,  3533,  1426,  1884,   480,  1002,   878,  2496,  1960,
    1454,  2078,   387,   880,  1863,  1422,   881,   480,   569,  3384,
    1618,  2626,  3390,   606,  1006,   746,  2602,   480,   480,  1791,
    1354,   509,  1963,  2918,  1864,   872,   510,  3194,  1455,  2486,
    3195,   700,  3084,   538,  1354,   743,  1464,  3264,  1865,     0,
     878,  1566,   744,   745,     0,     0,   880,     0,  1351,   881,
     388,   388,   480,   480,  1356,  1357,  1567,     0,  3196,  3197,
     388,   539,   569,     0,     0,     0,     0,     0,   388,     0,
    3009,  3010,     0,     0,  1961,   540,     0,     0,  2832,     0,
       0,  2832,  2832,  1866,  1867,     0,     0,     0,     0,     0,
     480,     0,     0,     0,  3409,     0,     0,   541,  2832,     0,
       0,  3196,  3197,     0,     0,     0,     0,  1570,     0,   542,
    1571,  1868,  3038,     0,     0,     0,     0,  3055,  3058,  3060,
    3061,     0,     0,     0,     0,  1370,  1371,  1372,  1373,  1374,
       0,     0,     0,  1572,  1573,     0,  1574,   480,   543,     0,
     480,     0,     0,     0,     0,     0,  1356,  1357,     0,     0,
       0,  1352,     0,     0,     0,     0,     0,   934,     0,     0,
    1356,  1357,     0,   544,     0,     0,  1962,     0,     0,   545,
    1869,   533,  1576,     0,  1353,     0,     0,     0,  1360,  1361,
    1362,  1363,  1364,  1365,  1366,  1367,   582,     0,     0,   569,
       0,   569,   591,   388,   388,  1623,   480,   388,     0,     0,
     480,     0,     0,     0,     2,     3,     0,   755,   546,  1639,
       0,  1870,   672,     0,     0,     0,     0,     4,     0,     0,
       0,  1963,     0,     0,     0,  1548,  1549,     0,  1342,  1343,
    1375,  1376,  1377,  1378,     0,  1354,     0,     0,     6,     7,
       0,     0,   935,  1679,     8,     0,     0,     0,     9,    10,
       0,     0,     0,     0,   719,   720,  1577,  -468,  -468,  1551,
       0,    11,     0,     0,     0,  1578,  -468,  1344,     0,  2879,
    1552,  1361,  1362,  1363,  1364,  1365,  1366,  1367,    12,  1553,
       0,  1345,     0,  1679,  1360,  1361,  1362,  1363,  1364,  1365,
    1366,  1367,     0,     0,     0,     0,     0,    13,  1555,     0,
     936,     0,     0,     0,     0,     0,    14,    15,    16,     0,
       0,     0,     0,  1103,     0,  1346,  1556,  1355,     0,    17,
      18,   547,  2079,     0,   937,     0,  1379,  1347,  1380,  1381,
    1382,     0,     0,     0,     0,     0,     0,     0,  1383,     0,
     548,  1784,    19,     0,     0,  1561,   549,     0,     0,     0,
       0,     0,   550,     0,  1348,     0,   569,     0,     0,    20,
       0,  1356,  1357,     0,     0,     0,     0,     0,     0,     0,
    1358,     0,     0,     0,     0,     0,   551,     0,     0,     0,
       0,     0,     0,    21,     0,     0,     0,   552,   553,     0,
      22,     0,     0,    23,     0,     0,     0,     0,   602,   537,
       0,     0,     0,     0,  1384,     0,     0,     0,     0,     0,
     938,  1349,     0,     0,    24,   569,     0,     0,   939,  1564,
    1842,  1843,     0,   569,   554,  1537,  1565,     0,   569,     0,
      25,     0,     0,     0,   480,     0,  1853,  1538,     0,  2740,
    2741,  1858,  1858,     0,  1858,  2742,   940,  2743,    26,  2744,
    2745,  1385,  1386,    27,     0,     0,   480,     0,     0,   480,
       0,     0,     0,     0,  2746,   569,   569,   480,   480,     0,
     555,     0,   556,   538,     0,  1858,  1858,  1858,  3487,     0,
       0,     0,   941,     0,  1359,  1360,  1361,  1362,  1363,  1364,
    1365,  1366,  1367,  1924,  1566,     0,     0,     0,     0,     0,
       0,   539,  1935,   942,     0,  2747,     0,     0,  2748,  1567,
       0,     0,     0,     0,     0,   540,  2749,     0,     0,  1943,
     943,     0,   118,     0,     0,     0,     0,     0,     0,     0,
     480,     0,     0,     0,     0,  2750,     0,   541,     0,    28,
       0,     0,  1956,     0,     0,     0,     0,     0,   480,   542,
       0,     0,  2751,     0,     0,     0,     0,     0,     0,     0,
    1570,    29,     0,  1571,     0,     0,     0,     0,  1387,     0,
      30,     0,     0,  2752,     0,  2753,     0,     0,   543,  1388,
    1389,     0,     0,     0,     0,     0,  1572,  1573,     0,  1574,
      31,     0,    32,    33,  2754,  2755,    34,     0,  1539,    35,
       0,    36,     0,   544,     0,     0,    37,  2041,    38,   545,
       0,     0,     0,     0,     0,  2045,     0,    39,     0,     0,
       0,    40,     0,     0,     0,  1576,     0,    41,     0,     0,
       0,     0,    42,     0,     0,  2756,    43,     0,     0,     0,
       0,     0,  2070,     0,     0,     0,     0,     0,   546,     0,
       0,     0,     0,     0,     0,   480,    44,     0,  2088,     0,
      45,     0,     0,     0,  2757,     0,     0,     0,  1540,     0,
       0,     0,     0,  2758,  2759,     0,  2760,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   719,
     720,     0,  1541,  3523,     0,     0,    46,     0,     0,     0,
       0,     0,     0,     0,  2761,  2762,  2763,     0,     0,  1577,
       0,     0,    47,     0,     0,    48,     0,     0,  1578,     0,
      49,     0,   537,     0,     0,  2764,  2765,  2766,     0,     0,
       0,  2767,     0,     0,  2768,     0,     0,     0,     0,     0,
       0,     0,     0,    50,     0,     0,  1542,  2769,  2770,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   547,     0,     0,    51,     0,     0,     0,     0,     0,
    3590,     0,     0,  2771,     0,  2772,   622,     0,   584,   623,
     548,     0,     0,     0,     0,  3607,   549,  3607,     0,     0,
       0,     0,   550,  3614,     0,     0,   538,     0,     0,  2773,
       0,   624,   625,     0,     0,     0,     0,     0,     0,     0,
       0,   626,     0,   627,     0,     0,   551,     0,  1543,     0,
       0,     0,     0,  2254,   539,     0,     0,   552,   553,  3607,
       0,   628,     0,   629,     0,     0,  3658,     0,   540,     0,
       0,   630,  2774,     0,  2775,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2776,     0,     0,     0,     0,     0,
     541,     0,     0,     0,   554,     0,  3607,     0,     0,     0,
       0,  3607,   542,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1548,  1549, -1360,   631,
    3607,     0,     0,   632,     0,     0,     0,     0,  2777,  2778,
       0,   543,  2779,  2780,  2781,  2782,     0,     0,     0,     0,
     555,     0,   556,     0,     0,     0,     0,  3607,  3607,     0,
    1551,  3730,     0,   633,  2312,   634,   544,     0,     0,     0,
       0,  1552,   545,     0,     0,     0,     0,   635,     0,   636,
    1553,     0,  2331,  2333,     0,  2783,  2784,     0,     0,   569,
       0,   569,   569,     0,     0,     0,     0,     0,     0,  1555,
       0,     0,   637,   638,  2785,     0,   639,     0,  1546,     0,
       0,   546,     0,     0,  1103,  1547,     0,  1556,     0,     0,
       0,     0,     0,   640,     0,  1548,  1549,     0,  1784,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     569,   569,     0,     0,   641,     0,  1561,     0,     0,   642,
    2041,     0,     0,     0,     0,  1550,  2041,  2041,     0,  1551,
    2041,     0,     0,  2041,     0,     0,     0,     0,     0,     0,
    1552,     0,     0,   643,  2041,  2041,     0,   569,     0,  1553,
       0,     0,     0,  2041,  1784,  1554,     0,     0,     0,     0,
       0,     0,     0,   480,     0,   569,     0,     0,  1555,  2041,
    2460,     0,     0,     0,     0,     0,   644,     0,     0,     0,
       0,     0,     0,  1103,     0,   645,  1556,     0,     0,     0,
    1564,     0,     0,     0,   547,  1557,     0,  1565,     0,     0,
       0,  1559,     0,   646,     0,     0,     0,     0,     0,  1560,
       0,   480,  2041,   548,     0,  1561,     0,     0,     0,   549,
       0,     0,     0,     0,     0,   550,     0,     0,     0,   647,
     648,     0,     0,   649,   650,     0,     0,     0,   569,     0,
       0,  1562,   903,     0,     0,   569,     0,     0,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,  2531,     0,
     552,   553,     0,     0,     0,  1566,  1130,  1131,  1132,  1133,
    1134,  1135,     0,     0,  1136,  1137,  1138,  1139,  1140,  1141,
    1567,  1142,     0,     0,     0,     0,     0,     0,     0,  1564,
       0,   651,     0,     0,     0,   973,  1565,   554,     0,     0,
       0,   652,     0,     0,  1679,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1804,     0,     0,     0,   653,     0,     0,     0,
       0,  1570,     0,     0,  1571,     0,  1978,     0,     0,     0,
       0,   654,     0,   555,     0,   556,     0,     0,  1998,  1999,
       0,  2001,  2002,  2003,     0,     0,  2006,  1572,  1573,     0,
    1574,  2014,     0,     0,  1566,  2017,  2018,  2019,     0,     0,
    2022,  2023,  2024,  2025,  2026,     0,  2031,  2032,  2033,  1567,
       0,     0,     0,     0,  1568,   569,     0,     0,     0,  1143,
    1144,     0,     0,     0,  3535, -1804,  1576,     0,     0,   655,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2625,     0,     0,     0,  1853,     0,   971,   569,   569,   569,
       0,  3535,  3535,     0,  1569,     0,  1129,   480,     0,     0,
    1570,   569,     0,  1571,  1784,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   569,   569,
     569,     0,     0,     0,     0,     0,  1572,  1573,     0,  1574,
       0,  2668,     0,     0,  3535,  3535,     0,  2670,     0,  2672,
       0,  3535,     0,  1575,     0,     0,     0,   569,     0,     0,
    1577,     0,     0,     0,     0,     0,  3535,     0,  3535,  1578,
       0,     0,     0,     0,  3535,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3535,     0,     0,     0,
       0,     0,     0,     0,     0,  3535,  3535,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3535,     0,     0,     0,     0,     0,  1247,  3535,  2041,     0,
       0,     0,     0,     0,     0,     0,     0,  3535,     0,     0,
     569,     0,     0,  2041,  3535,     0,     0,     0,     0,     0,
       0,     0,  1273,     0,     0,     0,     0,  3535,     0,     0,
    3535,     0,  3535,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,   480,  1578,     0,
       0,  3535,     0,     0,  2738,     0,     0,   480,     0,     0,
       0,  2794,  2795,     0,  3535,  2798,  3535,     0,     0,     0,
       0,     0,  1323,  2805,     0,     0,  1330,     0,  3535,  3535,
       0,   480,  3535,     0,     0,     0,     0,     0,     0,     0,
       0,  2816,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1462,     0,     0,     0,     0,     0,     0,     0,     0,
    1477,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2312,  2950,     0,   569,     0,     0,
       0,     0,     0,     0,     0,     0,   569,     0,     0,     0,
       0,     0,  2625,     0,     0,  2418,     0,     0,     0,     0,
       0,     0,   569,     0,     0,     0,  2425,     0,     0,     0,
    1924,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1784,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2041,
       0,     0,     0,     0,  2816,     0,     0,  2041,     0,     0,
       0,     0,     0,     0,  1784,     0,     0,     0,     0,     0,
    2041,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1641,  1642,  1643,     0,
       0,     0,     0,     0,     0,  1658,  1659,     0,     0,  1662,
       0,  1664,  1665,  1666,  1667,     0,     0,     0,  1671,     0,
       0,  1673,  1674,     0,  1675,     0,  1676,  1677,     0,  1680,
    1681,  1682,  1683,  1684,     0,  1687,     0,  1689,  1690,  1691,
    2816,  1693,  1694,  1695,  1696,     0,  1698,  1699,     0,  1705,
       0,     0,  1709,  1710,  1711,     0,  1713,  1714,  1715,  1716,
       0,  1718,  1719,  1720,  1721,     0,     0,     0,     0,     0,
    1728,  1729,     0,  1732,  1733,  1734,  1735,  1736,     0,     0,
       0,     0,  1740,     0,  1741,  1742,  1743,  1744,  1745,     0,
       0,  1748,  1750,  1751,  1752,  1753,  1754,     0,  1756,  1757,
       0,     0,  1760,  1761,  1762,     0,  1765,     0,  1766,     0,
       0,     0,  1771,     0,  1775,  1776,     0,     0,     0,     0,
    1779,     0,     0,     0,     0,     0,     0,     0,  1786,  1787,
    1788,     0,     0,     0,     0,     0,     0,  1330,     0,     0,
    1796,     0,  3132,     0,     0,     0,     0,  1801,  1802,  1803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1784,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     569,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1840,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2816,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   569,     0,     0,  1885,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   569,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3249,
       0,  3250,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   480,     0,  2805,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2816,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2046,     0,     0,     0,  3336,     0,     0,     0,
       0,     0,  2816,  2816,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3354,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   569,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2223,  2225,  2227,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2241,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1784,   480,     0,     0,     0,     0,
       0,     0,     0,  2260,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3336,     0,  3336,     0,  3471,  2045,
       0,     0,     0,     0,     0,  2272,     0,     0,     0,     0,
       0,  3480,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3500,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1784,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3549,     0,
       0,     0,     0,  3556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   569,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3575,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3643,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3656,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1784,     0,  3684,     0,     0,     0,
       0,     0,     0,     0,  3692,     0,     0,     0,     0,     0,
    2505,   569,     0,  2506,     0,  1784,  2508,  2509,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2522,
       0,  1784,  2525,     0,     0,     0,     0,     0,  3724,     0,
       0,     0,     0,     0,     0,  2532,     0,  2533,     0,     0,
       0,  2536,     0,  2537,  2538,     0,     0,     0,  2541,     0,
    2542,  2543,  3724,  2544,     0,     0,  2545,     0,  2546,  2547,
       0,     0,     0,     0,  2551,  2552,     0,     0,  2554,     0,
    2555,     0,  2556,     0,  2557,     0,  2559,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2564,  2565,     0,
       0,  2566,     0,  2567,     0,     0,     0,     0,     0,     0,
       0,  2568,  2569,     0,  2570,     0,  2571,     0,     0,  2572,
    2573,  2574,     0,  2575,     0,     0,     0,     0,  2578,  2579,
    2580,  2581,     0,     0,     0,     0,  2583,  2584,  2585,     0,
    2586,     0,  2588,     0,  2590,     0,  2592,     0,  2593,     0,
       0,     0,     0,     0,     0,  2595,     0,  2596,     0,     0,
    2598,  2599,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2608,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2615,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2677,     0,     0,     0,     0,
    2681,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2712,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2715,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2894,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2905,     0,  2907,     0,  2909,
       0,     0,     0,     0,     0,  2915,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2972,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3107,     0,     0,     0,     0,     0,  3108,     0,     0,     0,
       0,     0,     0,     0,     0,  3112,  3113,     0,     0,     0,
       0,  3114,     0,     0,     0,  3115,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3119,     0,
       0,     0,     0,     0,  3121,     0,     0,  3122,  3123,     0,
    3124,  3125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3181,  3182,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2712,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2712,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2677,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3380,     0,
       0,     0,     0,     0,  3382,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3398,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3410,
       0,  3412,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2712,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3495,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3509,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3578,  3579,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3600,     0,     0,     0,     0,
       0,     0,     0,     0,  3610,     0,     0,     0,     0,     0,
       0,  3616,     0,     0,     0,     0,     0,     0,     0,     0,
    3626,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,     0,   757,   124,   125,   126,   127,     0,  3650,
       0,     0,     0,   128,     0,     0,   758,     0,   759,   130,
     131,   760,   133,  3665,   134,   761,   135,     0,   762,   136,
     763,   764,   765,   137,   766,     0,   138,   139,   140,  1772,
     141,     0,   142,   143,     0,     0,   144,   767,   145,     0,
     146,   768,   769,   148,     0,   149,   150,   151,   770,   152,
       0,   771,   154,     0,   155,   156,   157,   158,   159,   772,
     773,   160,     0,   161,   162,     0,   774,   164,     0,   775,
     776,   777,   165,     0,  3725,   166,   778,   779,     0,   780,
     781,     0,   167,   168,   782,   783,   784,     0,     0,     0,
       0,   785,   171,   786,     0,     0,   787,   788,   172,     0,
     173,     0,     0,     0,   789,   790,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,   791,   182,     0,   792,   793,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,   794,     0,
     191,   795,   192,   796,   797,   193,   194,     0,   798,   195,
     196,   197,   799,     0,   198,     0,     0,   800,     0,   199,
     200,     0,   801,   201,     0,   202,   802,   803,   804,   805,
       0,   806,   807,   204,   808,   809,   810,   206,     0,   207,
     811,     0,   812,   813,     0,   208,   209,     0,   210,   814,
       0,   211,     0,     0,     0,   815,   213,   214,   215,   816,
       0,   216,   217,     0,     0,     0,   218,     0,     0,   817,
     219,   818,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,   819,   226,
       0,  1773,   820,   227,     0,   821,   228,     0,     0,     0,
     822,     0,   823,     0,   230,   824,     0,   231,     0,   232,
     825,     0,     0,   826,     0,     0,     0,     0,   827,   233,
     234,   235,   236,   237,   238,   828,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   829,   248,   249,   250,   830,
     251,   252,     0,     0,     0,   253,   254,   255,   831,   257,
       0,     0,   832,   259,   833,   834,   260,     0,   261,   835,
     836,   837,   838,   839,   840,   841,   266,   267,   268,   269,
       0,   842,   270,   271,     0,   272,   273,   274,   843,   844,
     845,   275,     0,   846,   847,     0,   276,   277,     0,   848,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   849,   850,   286,
     851,   852,   853,   854,   855,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   856,   297,   298,   299,
     300,   301,   302,   303,   857,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
     858,   859,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,   860,   318,   319,   861,   320,   321,   862,   322,
     863,   324,   325,     0,   864,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,   865,   866,   345,   346,     0,   347,   867,
     349,   868,   869,   870,   350,   351,   352,   353,   871,   354,
     355,     0,   356,   357,     0,   872,   358,   873,   874,   875,
     876,     0,     0,     0,     0,  1774,   363,     0,   364,   877,
     878,   879,   366,   367,   368,     0,   880,   369,   370,   881,
       0,   371,     0,     0,   882,   883,   372,     0,     0,   373,
       0,   374,     0,   884,   376,     0,     0,   885,   886,   887,
     888,   889,   377,     0,     0,   378,   890,     0,   379,   380,
     891,     0,     0,     0,     0,   382,     0,   383,   384,     0,
     892,     0,   893,     0,     0,     0,     0,   894,     0,     0,
       0,   895,   896,     0,     0,     0,     0,   897,     0,   898,
       0,     0,   899,   900,     0,     0,   901,   902,   122,     0,
     757,   124,   125,   126,   127,  2673,     0,     0,     0,     0,
     128,     0,     0,   758,     0,   759,   130,   131,   760,   133,
       0,   134,   761,   135,     0,  2674,   136,   763,   764,   765,
     137,   766,     0,   138,   139,   140,     0,   141,     0,   142,
     143,     0,     0,   144,   767,   145,     0,   146,   768,   769,
     148,     0,   149,   150,   151,   770,   152,     0,   771,   154,
       0,   155,   156,   157,   158,   159,   772,   773,   160,     0,
     161,   162,     0,   774,   164,     0,   775,   776,   777,   165,
       0,     0,   166,   778,   779,     0,   780,   781,     0,   167,
     168,   782,   783,   784,     0,     0,     0,     0,   785,   171,
     786,     0,     0,   787,  2675,   172,     0,   173,     0,     0,
       0,   789,   790,   174,     0,   175,   176,   177,     0,     0,
       0,   178,     0,     0,   179,   180,   181,     0,     0,   791,
     182,     0,   792,   793,   183,   184,   185,   186,     0,     0,
     187,     0,   188,   189,   190,   794,     0,   191,   795,   192,
     796,   797,   193,   194,     0,   798,   195,   196,   197,   799,
       0,   198,     0,     0,   800,     0,   199,   200,     0,   801,
     201,     0,   202,   802,   803,   804,   805,     0,   806,   807,
     204,   808,   809,   810,   206,     0,   207,   811,     0,   812,
     813,     0,   208,   209,     0,   210,   814,     0,   211,     0,
       0,     0,   815,   213,   214,   215,   816,     0,   216,   217,
       0,     0,     0,   218,     0,     0,   817,   219,   818,     0,
       0,   220,     0,   221,   222,     0,   223,   224,     0,     0,
       0,     0,     0,     0,   225,   819,   226,     0,     0,   820,
     227,     0,   821,   228,     0,     0,     0,   822,     0,   823,
       0,   230,   824,     0,   231,     0,   232,   825,     0,     0,
     826,     0,     0,     0,     0,   827,   233,   234,   235,   236,
     237,   238,   828,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   829,   248,   249,   250,   830,   251,   252,     0,
       0,     0,   253,   254,   255,   831,   257,     0,     0,   832,
     259,   833,   834,   260,     0,   261,   835,   836,   837,   838,
     839,   840,   841,   266,   267,   268,   269,     0,   842,   270,
     271,     0,   272,   273,   274,   843,   844,   845,   275,     0,
     846,   847,     0,   276,   277,     0,   848,  2676,   279,   280,
     281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   282,   283,   284,   849,   850,   286,   851,   852,   853,
     854,   855,     0,   289,   290,     0,   291,     0,   292,   293,
     294,   295,     0,   856,   297,   298,   299,   300,   301,   302,
     303,   857,     0,     0,     0,   304,   305,     0,     0,   306,
     307,   308,     0,   309,     0,   310,   311,   858,   859,   312,
       0,   313,   314,   315,     0,   316,   317,     0,     0,   860,
     318,   319,   861,   320,   321,   862,   322,   863,   324,   325,
       0,   864,   327,     0,     0,     0,   328,   329,   330,     0,
       0,   331,     0,     0,     0,   332,   333,   334,   335,     0,
     336,   337,   338,     0,     0,     0,     0,     0,     0,   339,
     340,     0,   341,     0,     0,   342,     0,     0,   343,   344,
     865,   866,   345,   346,     0,   347,   867,   349,   868,   869,
     870,   350,   351,   352,   353,   871,   354,   355,     0,   356,
     357,     0,   872,   358,   873,   874,   875,   876,     0,     0,
       0,     0,     0,   363,     0,   364,   877,   878,   879,   366,
     367,   368,     0,   880,   369,   370,   881,     0,   371,     0,
       0,   882,   883,   372,     0,     0,   373,     0,   374,     0,
     884,   376,     0,     0,   885,   886,   887,   888,   889,   377,
       0,     0,   378,   890,     0,   379,   380,   891,     0,     0,
       0,     0,   382,     0,   383,   384,     0,   892,     0,   893,
       0,     0,     0,     0,   894,     0,     0,     0,   895,   896,
       0,     0,     0,     0,   897,     0,   898,     0,     0,   899,
     900,     0,     0,   901,   902,   122,     0,   757,   124,   125,
     126,   127,     0,     0,     0,     0,     0,   128,     0,     0,
     758,     0,   759,   130,   131,   760,   133,     0,   134,   761,
     135,     0,   762,   136,   763,   764,   765,   137,   766,     0,
     138,   139,   140,     0,   141,     0,   142,   143,     0,     0,
     144,   767,   145,     0,   146,   768,   769,   148,     0,   149,
     150,   151,   770,   152,     0,   771,   154,     0,   155,   156,
     157,   158,   159,   772,   773,   160,     0,   161,   162,     0,
     774,   164,     0,   775,   776,   777,   165,     0,     0,   166,
     778,   779,     0,   780,   781,     0,   167,   168,   782,   783,
     784,     0,     0,     0,     0,   785,   171,   786,     0,     0,
     787,   788,   172,     0,   173,     0,     0,     0,   789,   790,
     174,     0,   175,   176,   177,     0,     0,     0,   178,     0,
       0,   179,   180,   181,     0,     0,   791,   182,     0,   792,
     793,   183,   184,   185,   186,     0,     0,   187,     0,   188,
     189,   190,   794,     0,   191,   795,   192,   796,   797,   193,
     194,     0,   798,   195,   196,   197,   799,     0,   198,     0,
       0,   800,     0,   199,   200,     0,   801,   201,     0,   202,
     802,   803,   804,   805,     0,   806,   807,   204,   808,   809,
     810,   206,     0,   207,   811,     0,   812,   813,     0,   208,
     209,     0,   210,   814,     0,   211,     0,     0,     0,   815,
     213,   214,   215,   816,     0,   216,   217,     0,     0,     0,
     218,     0,     0,   817,   219,   818,     0,     0,   220,     0,
     221,   222,     0,   223,   224,     0,     0,     0,     0,     0,
       0,   225,   819,   226,     0,     0,   820,   227,     0,   821,
     228,     0,     0,     0,   822,     0,   823,     0,   230,   824,
       0,   231,     0,   232,   825,     0,     0,   826,     0,     0,
       0,     0,   827,   233,   234,   235,   236,   237,   238,   828,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   829,
     248,   249,   250,   830,   251,   252,     0,     0,     0,   253,
     254,   255,   831,   257,     0,     0,   832,   259,   833,   834,
     260,     0,   261,   835,   836,   837,   838,   839,   840,   841,
     266,   267,   268,   269,     0,   842,   270,   271,     0,   272,
     273,   274,   843,   844,   845,   275,     0,   846,   847,     0,
     276,   277,     0,   848,     0,   279,   280,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,   283,
     284,   849,   850,   286,   851,   852,   853,   854,   855,     0,
     289,   290,     0,   291,     0,   292,   293,   294,   295,     0,
     856,   297,   298,   299,   300,   301,   302,   303,   857,     0,
       0,     0,   304,   305,     0,     0,   306,   307,   308,     0,
     309,     0,   310,   311,   858,   859,   312,     0,   313,   314,
     315,     0,   316,   317,     0,     0,   860,   318,   319,   861,
     320,   321,   862,   322,   863,   324,   325,     0,   864,   327,
    1328,     0,     0,   328,   329,   330,     0,     0,   331,     0,
       0,     0,   332,   333,   334,   335,     0,   336,   337,   338,
       0,     0,     0,     0,     0,     0,   339,   340,     0,   341,
       0,     0,   342,     0,     0,   343,   344,   865,   866,   345,
     346,     0,   347,   867,   349,   868,   869,   870,   350,   351,
     352,   353,   871,   354,   355,     0,   356,   357,     0,   872,
     358,   873,   874,   875,   876,     0,     0,     0,     0,     0,
     363,     0,   364,   877,   878,   879,   366,   367,   368,     0,
     880,   369,   370,   881,     0,   371,     0,     0,   882,   883,
     372,     0,     0,   373,     0,   374,     0,   884,   376,     0,
       0,   885,   886,   887,   888,   889,   377,     0,     0,   378,
     890,     0,   379,   380,   891,     0,     0,     0,     0,   382,
       0,   383,   384,     0,   892,     0,   893,     0,     0,     0,
       0,   894,     0,     0,     0,   895,   896,     0,     0,     0,
       0,   897,     0,  1329,     0,     0,   899,   900,     0,     0,
     901,   902,   122,     0,   757,   124,   125,   126,   127,     0,
       0,     0,     0,     0,   128,     0,     0,   758,     0,   759,
     130,   131,   760,   133,     0,   134,   761,   135,     0,   762,
     136,   763,   764,   765,   137,   766,     0,   138,   139,   140,
       0,   141,     0,   142,   143,     0,     0,   144,   767,   145,
       0,   146,   768,   769,   148,     0,   149,   150,   151,   770,
     152,     0,   771,   154,     0,   155,   156,   157,   158,   159,
     772,   773,   160,     0,   161,   162,     0,   774,   164,     0,
     775,   776,   777,   165,     0,     0,   166,   778,   779,     0,
     780,   781,     0,   167,   168,   782,   783,   784,     0,     0,
       0,     0,   785,   171,   786,     0,     0,   787,   788,   172,
       0,   173,     0,     0,     0,   789,   790,   174,     0,   175,
     176,   177,     0,     0,     0,   178,     0,     0,   179,   180,
     181,     0,     0,   791,   182,     0,   792,   793,   183,   184,
     185,   186,     0,     0,   187,     0,   188,   189,   190,   794,
       0,   191,   795,   192,   796,   797,   193,   194,     0,   798,
     195,   196,   197,   799,     0,   198,     0,     0,   800,     0,
     199,   200,     0,   801,   201,     0,   202,   802,   803,   804,
     805,     0,   806,   807,   204,   808,   809,   810,   206,     0,
     207,   811,     0,   812,   813,     0,   208,   209,     0,   210,
     814,     0,   211,     0,     0,     0,   815,   213,   214,   215,
     816,     0,   216,   217,     0,     0,     0,   218,     0,     0,
     817,   219,   818,     0,     0,   220,     0,   221,   222,     0,
     223,   224,     0,     0,     0,     0,     0,     0,   225,   819,
     226,     0,     0,   820,   227,     0,   821,   228,     0,     0,
       0,   822,     0,   823,     0,   230,   824,     0,   231,     0,
     232,   825,     0,     0,   826,     0,     0,     0,     0,   827,
     233,   234,   235,   236,   237,   238,   828,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   829,   248,   249,   250,
     830,   251,   252,     0,     0,     0,   253,   254,   255,   831,
     257,     0,     0,   832,   259,   833,   834,   260,     0,   261,
     835,   836,   837,   838,   839,   840,   841,   266,   267,   268,
     269,     0,   842,   270,   271,     0,   272,   273,   274,   843,
     844,   845,   275,     0,   846,   847,     0,   276,   277,     0,
     848,     0,   279,   280,   281,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,   283,   284,   849,   850,
     286,   851,   852,   853,   854,   855,     0,   289,   290,     0,
     291,     0,   292,   293,   294,   295,     0,   856,   297,   298,
     299,   300,   301,   302,   303,   857,     0,     0,     0,   304,
     305,     0,     0,   306,   307,   308,     0,   309,     0,   310,
     311,   858,   859,   312,     0,   313,   314,   315,     0,   316,
     317,     0,     0,   860,   318,   319,   861,   320,   321,   862,
     322,   863,   324,   325,     0,   864,   327,     0,     0,     0,
     328,   329,   330,     0,     0,   331,     0,     0,     0,   332,
     333,   334,   335,     0,   336,   337,   338,     0,     0,     0,
       0,     0,     0,   339,   340,     0,   341,     0,     0,   342,
       0,     0,   343,   344,   865,   866,   345,   346,     0,   347,
     867,   349,   868,   869,   870,   350,   351,   352,   353,   871,
     354,   355,     0,   356,   357,     0,   872,   358,   873,   874,
     875,   876,     0,     0,     0,     0,     0,   363,     0,   364,
     877,   878,   879,   366,   367,   368,     0,   880,   369,   370,
     881,     0,   371,     0,     0,   882,   883,   372,     0,     0,
     373,     0,   374,     0,   884,   376,     0,     0,   885,   886,
     887,   888,   889,   377,     0,     0,   378,   890,     0,   379,
     380,   891,     0,     0,     0,     0,   382,     0,   383,   384,
       0,   892,     0,   893,     0,     0,     0,     0,   894,     0,
       0,     0,   895,   896,     0,     0,     0,     0,   897,     0,
     898,  1615,     0,   899,   900,     0,     0,   901,   902,   122,
       0,   757,   124,   125,   126,   127,     0,     0,     0,     0,
       0,   128,     0,     0,   758,     0,   759,   130,   131,   760,
     133,     0,   134,   761,   135,     0,   762,   136,   763,   764,
     765,   137,   766,     0,   138,   139,   140,     0,   141,     0,
     142,   143,     0,     0,   144,   767,   145,     0,   146,   768,
     769,   148,     0,   149,   150,   151,   770,   152,     0,   771,
     154,     0,   155,   156,   157,   158,   159,   772,   773,   160,
       0,   161,   162,     0,   774,   164,     0,   775,   776,   777,
     165,     0,     0,   166,   778,   779,     0,   780,   781,     0,
     167,   168,   782,   783,   784,     0,     0,     0,     0,   785,
     171,   786,     0,     0,   787,   788,   172,     0,   173,     0,
       0,     0,   789,   790,   174,     0,   175,   176,   177,     0,
       0,     0,   178,     0,     0,   179,   180,   181,     0,     0,
     791,   182,     0,   792,   793,   183,   184,   185,   186,     0,
       0,   187,     0,   188,   189,   190,   794,     0,   191,   795,
     192,   796,   797,   193,   194,     0,   798,   195,   196,   197,
     799,     0,   198,     0,     0,   800,     0,   199,   200,     0,
     801,   201,     0,   202,   802,   803,   804,   805,     0,   806,
     807,   204,   808,   809,   810,   206,     0,   207,   811,     0,
     812,   813,     0,   208,   209,     0,   210,   814,     0,   211,
       0,     0,     0,   815,   213,   214,   215,   816,     0,   216,
     217,     0,     0,     0,   218,     0,     0,   817,   219,   818,
       0,     0,   220,     0,   221,   222,     0,   223,   224,     0,
       0,     0,     0,     0,     0,   225,   819,   226,     0,     0,
     820,   227,     0,   821,   228,     0,     0,     0,   822,     0,
     823,     0,   230,   824,     0,   231,     0,   232,   825,     0,
       0,   826,     0,     0,     0,     0,   827,   233,   234,   235,
     236,   237,   238,   828,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   829,   248,   249,   250,   830,   251,   252,
       0,     0,     0,   253,   254,   255,   831,   257,     0,     0,
     832,   259,   833,   834,   260,     0,   261,   835,   836,   837,
     838,   839,   840,   841,   266,   267,   268,   269,     0,   842,
     270,   271,     0,   272,   273,   274,   843,   844,   845,   275,
       0,   846,   847,     0,   276,   277,     0,   848,     0,   279,
     280,   281,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   282,   283,   284,   849,   850,   286,   851,   852,
     853,   854,   855,     0,   289,   290,     0,   291,     0,   292,
     293,   294,   295,     0,   856,   297,   298,   299,   300,   301,
     302,   303,   857,     0,     0,     0,   304,   305,     0,     0,
     306,   307,   308,     0,   309,     0,   310,   311,   858,   859,
     312,     0,   313,   314,   315,     0,   316,   317,     0,     0,
     860,   318,   319,   861,   320,   321,   862,   322,   863,   324,
     325,     0,   864,   327,     0,     0,     0,   328,   329,   330,
       0,     0,   331,     0,     0,     0,   332,   333,   334,   335,
       0,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     339,   340,     0,   341,     0,     0,   342,     0,     0,   343,
     344,   865,   866,   345,   346,     0,   347,   867,   349,   868,
     869,   870,   350,   351,   352,   353,   871,   354,   355,     0,
     356,   357,     0,   872,   358,   873,   874,   875,   876,     0,
       0,     0,     0,     0,   363,     0,   364,   877,   878,   879,
     366,   367,   368,     0,   880,   369,   370,   881,     0,   371,
       0,     0,   882,   883,   372,     0,     0,   373,     0,   374,
       0,   884,   376,     0,     0,   885,   886,   887,   888,   889,
     377,     0,     0,   378,   890,     0,   379,   380,   891,     0,
       0,     0,     0,   382,     0,   383,   384,     0,   892,     0,
     893,     0,     0,     0,     0,   894,     0,     0,     0,   895,
     896,     0,     0,     0,     0,   897,     0,   898,  1712,     0,
     899,   900,     0,     0,   901,   902,   122,     0,   757,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,   758,     0,   759,   130,   131,   760,   133,     0,   134,
     761,   135,     0,   762,   136,   763,   764,   765,   137,   766,
       0,   138,   139,   140,     0,   141,     0,   142,   143,     0,
       0,   144,   767,   145,     0,   146,   768,   769,   148,     0,
     149,   150,   151,   770,   152,     0,   771,   154,     0,   155,
     156,   157,   158,   159,   772,   773,   160,     0,   161,   162,
       0,   774,   164,     0,   775,   776,   777,   165,     0,     0,
     166,   778,   779,     0,   780,   781,     0,   167,   168,   782,
     783,   784,     0,     0,     0,     0,   785,   171,   786,     0,
       0,   787,   788,   172,     0,   173,     0,     0,     0,   789,
     790,   174,     0,   175,   176,   177,     0,     0,     0,   178,
       0,     0,   179,   180,   181,     0,     0,   791,   182,     0,
     792,   793,   183,   184,   185,   186,     0,     0,   187,     0,
     188,   189,   190,   794,     0,   191,   795,   192,   796,   797,
     193,   194,     0,   798,   195,   196,   197,   799,     0,   198,
       0,     0,   800,     0,   199,   200,     0,   801,   201,     0,
     202,   802,   803,   804,   805,     0,   806,   807,   204,   808,
     809,   810,   206,     0,   207,   811,     0,   812,   813,     0,
     208,   209,     0,   210,   814,     0,   211,     0,     0,     0,
     815,   213,   214,   215,   816,     0,   216,   217,     0,     0,
       0,   218,     0,     0,   817,   219,   818,     0,     0,   220,
       0,   221,   222,     0,   223,   224,     0,     0,     0,     0,
       0,     0,   225,   819,   226,     0,     0,   820,   227,     0,
     821,   228,     0,     0,     0,   822,     0,   823,     0,   230,
     824,     0,   231,     0,   232,   825,     0,     0,   826,     0,
       0,     0,     0,   827,   233,   234,   235,   236,   237,   238,
     828,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     829,   248,   249,   250,   830,   251,   252,     0,     0,     0,
     253,   254,   255,   831,   257,     0,     0,   832,   259,   833,
     834,   260,     0,   261,   835,   836,   837,   838,   839,   840,
     841,   266,   267,   268,   269,     0,   842,   270,   271,     0,
     272,   273,   274,   843,   844,   845,   275,     0,   846,   847,
       0,   276,   277,     0,   848,     0,   279,   280,   281,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   849,   850,   286,   851,   852,   853,   854,   855,
       0,   289,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   856,   297,   298,   299,   300,   301,   302,   303,   857,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,   310,   311,   858,   859,   312,     0,   313,
     314,   315,     0,   316,   317,     0,     0,   860,   318,   319,
     861,   320,   321,   862,   322,   863,   324,   325,     0,   864,
     327,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,   333,   334,   335,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,   343,   344,   865,   866,
     345,   346,     0,   347,   867,   349,   868,   869,   870,   350,
     351,   352,   353,   871,   354,   355,     0,   356,   357,     0,
     872,   358,   873,   874,   875,   876,     0,     0,     0,     0,
       0,   363,     0,   364,   877,   878,   879,   366,   367,   368,
       0,   880,   369,   370,   881,     0,   371,     0,     0,   882,
     883,   372,     0,     0,   373,     0,   374,     0,   884,   376,
       0,     0,   885,   886,   887,   888,   889,   377,     0,     0,
     378,   890,     0,   379,   380,   891,     0,     0,     0,     0,
     382,     0,   383,   384,     0,   892,     0,   893,     0,     0,
       0,     0,   894,     0,     0,     0,   895,   896,     0,     0,
       0,     0,   897,     0,   898,  1749,     0,   899,   900,     0,
       0,   901,   902,   122,     0,   757,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,     0,     0,   758,     0,
     759,   130,   131,   760,   133,     0,   134,   761,   135,     0,
     762,   136,   763,   764,   765,   137,   766,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,   767,
     145,     0,   146,   768,   769,   148,     0,   149,   150,   151,
     770,   152,     0,   771,   154,     0,   155,   156,   157,   158,
     159,   772,   773,   160,     0,   161,   162,     0,   774,   164,
       0,   775,   776,   777,   165,     0,     0,   166,   778,   779,
       0,   780,   781,     0,   167,   168,   782,   783,   784,     0,
       0,     0,     0,   785,   171,   786,     0,     0,   787,   788,
     172,     0,   173,     0,     0,     0,   789,   790,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,   791,   182,     0,   792,   793,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
     794,     0,   191,   795,   192,   796,   797,   193,   194,     0,
     798,   195,   196,   197,   799,     0,   198,     0,     0,   800,
       0,   199,   200,     0,   801,   201,     0,   202,   802,   803,
     804,   805,     0,   806,   807,   204,   808,   809,   810,   206,
       0,   207,   811,     0,   812,   813,     0,   208,   209,     0,
     210,   814,     0,   211,     0,     0,     0,   815,   213,   214,
     215,   816,     0,   216,   217,     0,     0,     0,   218,     0,
       0,   817,   219,   818,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,     0,     0,     0,   225,
     819,   226,     0,     0,   820,   227,     0,   821,   228,     0,
       0,     0,   822,     0,   823,     0,   230,   824,     0,   231,
       0,   232,   825,     0,     0,   826,     0,     0,     0,     0,
     827,   233,   234,   235,   236,   237,   238,   828,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   829,   248,   249,
     250,   830,   251,   252,     0,     0,     0,   253,   254,   255,
     831,   257,     0,     0,   832,   259,   833,   834,   260,     0,
     261,   835,   836,   837,   838,   839,   840,   841,   266,   267,
     268,   269,     0,   842,   270,   271,     0,   272,   273,   274,
     843,   844,   845,   275,     0,   846,   847,     0,   276,   277,
       0,   848,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   849,
     850,   286,   851,   852,   853,   854,   855,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   856,   297,
     298,   299,   300,   301,   302,   303,   857,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,   858,   859,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,   860,   318,   319,   861,   320,   321,
     862,   322,   863,   324,   325,     0,   864,   327,     0,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,     0,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,   865,   866,   345,   346,     0,
     347,   867,   349,   868,   869,   870,   350,   351,   352,   353,
     871,   354,   355,     0,   356,   357,     0,   872,   358,   873,
     874,   875,   876,     0,     0,     0,     0,     0,   363,     0,
     364,   877,   878,   879,   366,   367,   368,     0,   880,   369,
     370,   881,     0,   371,     0,     0,   882,   883,   372,     0,
       0,   373,     0,   374,     0,   884,   376,     0,     0,   885,
     886,   887,   888,   889,   377,     0,     0,   378,   890,     0,
     379,   380,   891,     0,     0,     0,     0,   382,     0,   383,
     384,     0,   892,     0,   893,     0,     0,     0,     0,   894,
       0,     0,     0,   895,   896,     0,     0,     0,     0,   897,
       0,   898,  1778,     0,   899,   900,     0,     0,   901,   902,
     122,     0,   757,   124,   125,   126,   127,     0,     0,     0,
       0,     0,   128,     0,     0,   758,     0,   759,   130,   131,
     760,   133,     0,   134,   761,   135,     0,   762,   136,   763,
     764,   765,   137,   766,     0,   138,   139,   140,     0,   141,
       0,   142,   143,     0,     0,   144,   767,   145,     0,   146,
     768,   769,   148,     0,   149,   150,   151,   770,   152,     0,
     771,   154,     0,   155,   156,   157,   158,   159,   772,   773,
     160,     0,   161,   162,     0,   774,   164,     0,   775,   776,
     777,   165,     0,     0,   166,   778,   779,     0,   780,   781,
       0,   167,   168,   782,   783,   784,     0,     0,     0,     0,
     785,   171,   786,     0,     0,   787,   788,   172,     0,   173,
       0,     0,     0,   789,   790,   174,     0,   175,   176,   177,
       0,     0,     0,   178,     0,     0,   179,   180,   181,     0,
       0,   791,   182,     0,   792,   793,   183,   184,   185,   186,
       0,     0,   187,     0,   188,   189,   190,   794,     0,   191,
     795,   192,   796,   797,   193,   194,     0,   798,   195,   196,
     197,   799,     0,   198,     0,     0,   800,     0,   199,   200,
    2222,   801,   201,     0,   202,   802,   803,   804,   805,     0,
     806,   807,   204,   808,   809,   810,   206,     0,   207,   811,
       0,   812,   813,     0,   208,   209,     0,   210,   814,     0,
     211,     0,     0,     0,   815,   213,   214,   215,   816,     0,
     216,   217,     0,     0,     0,   218,     0,     0,   817,   219,
     818,     0,     0,   220,     0,   221,   222,     0,   223,   224,
       0,     0,     0,     0,     0,     0,   225,   819,   226,     0,
       0,   820,   227,     0,   821,   228,     0,     0,     0,   822,
       0,   823,     0,   230,   824,     0,   231,     0,   232,   825,
       0,     0,   826,     0,     0,     0,     0,   827,   233,   234,
     235,   236,   237,   238,   828,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   829,   248,   249,   250,   830,   251,
     252,     0,     0,     0,   253,   254,   255,   831,   257,     0,
       0,   832,   259,   833,   834,   260,     0,   261,   835,   836,
     837,   838,   839,   840,   841,   266,   267,   268,   269,     0,
     842,   270,   271,     0,   272,   273,   274,   843,   844,   845,
     275,     0,   846,   847,     0,   276,   277,     0,   848,     0,
     279,   280,   281,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   282,   283,   284,   849,   850,   286,   851,
     852,   853,   854,   855,     0,   289,   290,     0,   291,     0,
     292,   293,   294,   295,     0,   856,   297,   298,   299,   300,
     301,   302,   303,   857,     0,     0,     0,   304,   305,     0,
       0,   306,   307,   308,     0,   309,     0,   310,   311,   858,
     859,   312,     0,   313,   314,   315,     0,   316,   317,     0,
       0,   860,   318,   319,   861,   320,   321,   862,   322,   863,
     324,   325,     0,   864,   327,     0,     0,     0,   328,   329,
     330,     0,     0,   331,     0,     0,     0,   332,   333,   334,
     335,     0,   336,   337,   338,     0,     0,     0,     0,     0,
       0,   339,   340,     0,   341,     0,     0,   342,     0,     0,
     343,   344,   865,   866,   345,   346,     0,   347,   867,   349,
     868,   869,   870,   350,   351,   352,   353,   871,   354,   355,
       0,   356,   357,     0,   872,   358,   873,   874,   875,   876,
       0,     0,     0,     0,     0,   363,     0,   364,   877,   878,
     879,   366,   367,   368,     0,   880,   369,   370,   881,     0,
     371,     0,     0,   882,   883,   372,     0,     0,   373,     0,
     374,     0,   884,   376,     0,     0,   885,   886,   887,   888,
     889,   377,     0,     0,   378,   890,     0,   379,   380,   891,
       0,     0,     0,     0,   382,     0,   383,   384,     0,   892,
       0,   893,     0,     0,     0,     0,   894,     0,     0,     0,
     895,   896,     0,     0,     0,     0,   897,     0,   898,     0,
       0,   899,   900,     0,     0,   901,   902,   122,     0,   757,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   758,     0,   759,   130,   131,   760,   133,     0,
     134,   761,   135,     0,   762,   136,   763,   764,   765,   137,
     766,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,   767,   145,     0,   146,   768,   769,   148,
       0,   149,   150,   151,   770,   152,     0,   771,   154,     0,
     155,   156,   157,   158,   159,   772,   773,   160,     0,   161,
     162,     0,   774,   164,     0,   775,   776,   777,   165,     0,
       0,   166,   778,   779,     0,   780,   781,     0,   167,   168,
     782,   783,   784,     0,     0,     0,     0,   785,   171,   786,
       0,     0,   787,   788,   172,     0,   173,     0,     0,     0,
     789,   790,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,   791,   182,
       0,   792,   793,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,   794,     0,   191,   795,   192,   796,
     797,   193,   194,     0,   798,   195,   196,   197,   799,     0,
     198,     0,     0,   800,     0,   199,   200,  2224,   801,   201,
       0,   202,   802,   803,   804,   805,     0,   806,   807,   204,
     808,   809,   810,   206,     0,   207,   811,     0,   812,   813,
       0,   208,   209,     0,   210,   814,     0,   211,     0,     0,
       0,   815,   213,   214,   215,   816,     0,   216,   217,     0,
       0,     0,   218,     0,     0,   817,   219,   818,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,   819,   226,     0,     0,   820,   227,
       0,   821,   228,     0,     0,     0,   822,     0,   823,     0,
     230,   824,     0,   231,     0,   232,   825,     0,     0,   826,
       0,     0,     0,     0,   827,   233,   234,   235,   236,   237,
     238,   828,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   829,   248,   249,   250,   830,   251,   252,     0,     0,
       0,   253,   254,   255,   831,   257,     0,     0,   832,   259,
     833,   834,   260,     0,   261,   835,   836,   837,   838,   839,
     840,   841,   266,   267,   268,   269,     0,   842,   270,   271,
       0,   272,   273,   274,   843,   844,   845,   275,     0,   846,
     847,     0,   276,   277,     0,   848,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   849,   850,   286,   851,   852,   853,   854,
     855,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   856,   297,   298,   299,   300,   301,   302,   303,
     857,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,   858,   859,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,   860,   318,
     319,   861,   320,   321,   862,   322,   863,   324,   325,     0,
     864,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,   865,
     866,   345,   346,     0,   347,   867,   349,   868,   869,   870,
     350,   351,   352,   353,   871,   354,   355,     0,   356,   357,
       0,   872,   358,   873,   874,   875,   876,     0,     0,     0,
       0,     0,   363,     0,   364,   877,   878,   879,   366,   367,
     368,     0,   880,   369,   370,   881,     0,   371,     0,     0,
     882,   883,   372,     0,     0,   373,     0,   374,     0,   884,
     376,     0,     0,   885,   886,   887,   888,   889,   377,     0,
       0,   378,   890,     0,   379,   380,   891,     0,     0,     0,
       0,   382,     0,   383,   384,     0,   892,     0,   893,     0,
       0,     0,     0,   894,     0,     0,     0,   895,   896,     0,
       0,     0,     0,   897,     0,   898,     0,     0,   899,   900,
       0,     0,   901,   902,   122,     0,   757,   124,   125,   126,
     127,     0,     0,     0,     0,     0,   128,     0,     0,   758,
       0,   759,   130,   131,   760,   133,     0,   134,   761,   135,
       0,   762,   136,   763,   764,   765,   137,   766,     0,   138,
     139,   140,     0,   141,     0,   142,   143,     0,     0,   144,
     767,   145,     0,   146,   768,   769,   148,     0,   149,   150,
     151,   770,   152,     0,   771,   154,     0,   155,   156,   157,
     158,   159,   772,   773,   160,     0,   161,   162,     0,   774,
     164,     0,   775,   776,   777,   165,     0,     0,   166,   778,
     779,     0,   780,   781,     0,   167,   168,   782,   783,   784,
       0,     0,     0,     0,   785,   171,   786,     0,     0,   787,
     788,   172,     0,   173,     0,     0,     0,   789,   790,   174,
       0,   175,   176,   177,     0,     0,     0,   178,     0,     0,
     179,   180,   181,     0,     0,   791,   182,     0,   792,   793,
     183,   184,   185,   186,     0,     0,   187,     0,   188,   189,
     190,   794,     0,   191,   795,   192,   796,   797,   193,   194,
       0,   798,   195,   196,   197,   799,     0,   198,     0,     0,
     800,     0,   199,   200,  2226,   801,   201,     0,   202,   802,
     803,   804,   805,     0,   806,   807,   204,   808,   809,   810,
     206,     0,   207,   811,     0,   812,   813,     0,   208,   209,
       0,   210,   814,     0,   211,     0,     0,     0,   815,   213,
     214,   215,   816,     0,   216,   217,     0,     0,     0,   218,
       0,     0,   817,   219,   818,     0,     0,   220,     0,   221,
     222,     0,   223,   224,     0,     0,     0,     0,     0,     0,
     225,   819,   226,     0,     0,   820,   227,     0,   821,   228,
       0,     0,     0,   822,     0,   823,     0,   230,   824,     0,
     231,     0,   232,   825,     0,     0,   826,     0,     0,     0,
       0,   827,   233,   234,   235,   236,   237,   238,   828,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   829,   248,
     249,   250,   830,   251,   252,     0,     0,     0,   253,   254,
     255,   831,   257,     0,     0,   832,   259,   833,   834,   260,
       0,   261,   835,   836,   837,   838,   839,   840,   841,   266,
     267,   268,   269,     0,   842,   270,   271,     0,   272,   273,
     274,   843,   844,   845,   275,     0,   846,   847,     0,   276,
     277,     0,   848,     0,   279,   280,   281,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,   283,   284,
     849,   850,   286,   851,   852,   853,   854,   855,     0,   289,
     290,     0,   291,     0,   292,   293,   294,   295,     0,   856,
     297,   298,   299,   300,   301,   302,   303,   857,     0,     0,
       0,   304,   305,     0,     0,   306,   307,   308,     0,   309,
       0,   310,   311,   858,   859,   312,     0,   313,   314,   315,
       0,   316,   317,     0,     0,   860,   318,   319,   861,   320,
     321,   862,   322,   863,   324,   325,     0,   864,   327,     0,
       0,     0,   328,   329,   330,     0,     0,   331,     0,     0,
       0,   332,   333,   334,   335,     0,   336,   337,   338,     0,
       0,     0,     0,     0,     0,   339,   340,     0,   341,     0,
       0,   342,     0,     0,   343,   344,   865,   866,   345,   346,
       0,   347,   867,   349,   868,   869,   870,   350,   351,   352,
     353,   871,   354,   355,     0,   356,   357,     0,   872,   358,
     873,   874,   875,   876,     0,     0,     0,     0,     0,   363,
       0,   364,   877,   878,   879,   366,   367,   368,     0,   880,
     369,   370,   881,     0,   371,     0,     0,   882,   883,   372,
       0,     0,   373,     0,   374,     0,   884,   376,     0,     0,
     885,   886,   887,   888,   889,   377,     0,     0,   378,   890,
       0,   379,   380,   891,     0,     0,     0,     0,   382,     0,
     383,   384,     0,   892,     0,   893,     0,     0,     0,     0,
     894,     0,     0,     0,   895,   896,     0,     0,     0,     0,
     897,     0,   898,     0,     0,   899,   900,     0,     0,   901,
     902,   122,     0,   757,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   758,     0,   759,   130,
     131,   760,   133,     0,   134,   761,   135,     0,   762,   136,
     763,   764,   765,   137,   766,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,   767,   145,     0,
     146,   768,   769,   148,     0,   149,   150,   151,   770,   152,
       0,   771,   154,     0,   155,   156,   157,   158,   159,   772,
     773,   160,     0,   161,   162,     0,   774,   164,     0,   775,
     776,   777,   165,     0,     0,   166,   778,   779,     0,   780,
     781,     0,   167,   168,   782,   783,   784,     0,     0,     0,
       0,   785,   171,   786,     0,     0,   787,   788,   172,     0,
     173,     0,     0,     0,   789,   790,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,   791,   182,     0,   792,   793,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,   794,     0,
     191,   795,   192,   796,   797,   193,   194,     0,   798,   195,
     196,   197,   799,     0,   198,     0,     0,   800,     0,   199,
     200,     0,   801,   201,     0,   202,   802,   803,   804,   805,
       0,   806,   807,   204,   808,   809,   810,   206,     0,   207,
     811,     0,   812,   813,     0,   208,   209,     0,   210,   814,
       0,   211,     0,     0,     0,   815,   213,   214,   215,   816,
       0,   216,   217,     0,     0,     0,   218,     0,     0,   817,
     219,   818,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,   819,   226,
       0,     0,   820,   227,     0,   821,   228,     0,     0,     0,
     822,     0,   823,     0,   230,   824,     0,   231,     0,   232,
     825,     0,     0,   826,     0,     0,     0,     0,   827,   233,
     234,   235,   236,   237,   238,   828,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   829,   248,   249,   250,   830,
     251,   252,     0,     0,     0,   253,   254,   255,   831,   257,
       0,     0,   832,   259,   833,   834,   260,     0,   261,   835,
     836,   837,   838,   839,   840,   841,   266,   267,   268,   269,
       0,   842,   270,   271,     0,   272,   273,   274,   843,   844,
     845,   275,     0,   846,   847,     0,   276,   277,     0,   848,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   849,   850,   286,
     851,   852,   853,   854,   855,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   856,   297,   298,   299,
     300,   301,   302,   303,   857,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
     858,   859,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,   860,   318,   319,   861,   320,   321,   862,   322,
     863,   324,   325,     0,   864,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,   865,   866,   345,   346,     0,   347,   867,
     349,   868,   869,   870,   350,   351,   352,   353,   871,   354,
     355,     0,   356,   357,     0,   872,   358,   873,   874,   875,
     876,     0,     0,     0,     0,     0,   363,     0,   364,   877,
     878,   879,   366,   367,   368,     0,   880,   369,   370,   881,
       0,   371,     0,     0,   882,   883,   372,     0,     0,   373,
       0,   374,     0,   884,   376,     0,     0,   885,   886,   887,
     888,   889,   377,     0,     0,   378,   890,     0,   379,   380,
     891,     0,     0,     0,     0,   382,     0,   383,   384,     0,
     892,     0,   893,     0,     0,     0,     0,   894,     0,     0,
       0,   895,   896,     0,     0,     0,     0,   897,     0,   898,
       0,     0,   899,   900,     0,     0,   901,   902,   122,     0,
     757,   124,   125,   126,   127,  1810,     0,     0,     0,     0,
    1811,     0,     0,   758,     0,   759,   130,   131,   760,   133,
       0,   134,   761,   135,     0,   762,   136,   763,   764,   765,
     137,   766,     0,   138,   139,   140,     0,   141,     0,   142,
     143,     0,     0,   144,   767,   145,     0,   146,   768,   769,
     148,     0,   149,   150,   151,   770,   152,     0,   771,   154,
       0,   155,   156,   157,   158,   159,   772,   773,   160,     0,
     161,   162,     0,   774,   164,     0,   775,   776,   777,   165,
       0,     0,   166,   778,   779,     0,   780,   781,     0,   167,
     168,   782,   783,   784,     0,     0,     0,     0,   785,   171,
     786,     0,     0,   787,   788,   172,     0,   173,     0,     0,
       0,   789,   790,   174,     0,   175,   176,   177,     0,     0,
       0,   178,     0,     0,   179,   180,   181,     0,     0,   791,
     182,     0,   792,   793,   183,   184,   185,   186,     0,     0,
     187,     0,   188,   189,   190,   794,     0,   191,   795,   192,
     796,   797,   193,   194,     0,   798,   195,   196,   197,   799,
       0,   198,     0,     0,   800,     0,   199,   200,     0,   801,
     201,     0,   202,   802,   803,   804,   805,     0,   806,   807,
     204,   808,   809,   810,   206,     0,   207,   811,     0,   812,
     813,     0,   208,   209,     0,   210,   814,     0,   211,     0,
       0,     0,   815,   213,   214,   215,   816,     0,   216,   217,
       0,     0,     0,   218,     0,     0,   817,   219,   818,     0,
       0,   220,     0,   221,   222,     0,   223,   224,     0,     0,
       0,     0,     0,     0,   225,   819,   226,     0,     0,   820,
     227,     0,   821,   228,     0,     0,     0,   822,     0,   823,
       0,   230,   824,     0,   231,     0,   232,   825,     0,     0,
     826,     0,     0,     0,     0,   827,   233,   234,   235,   236,
     237,   238,   828,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   829,   248,   249,   250,   830,   251,   252,     0,
       0,     0,   253,   254,   255,   831,   257,     0,     0,   832,
     259,   833,   834,   260,     0,   261,   835,   836,   837,   838,
     839,   840,   841,   266,   267,   268,   269,     0,   842,   270,
     271,     0,   272,   273,   274,   843,     0,   845,   275,     0,
     846,   847,     0,   276,   277,     0,   848,     0,   279,   280,
     281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   282,   283,   284,   849,   850,   286,   851,   852,   853,
     854,   855,     0,   289,   290,     0,   291,     0,   292,   293,
     294,   295,     0,   856,   297,   298,   299,   300,   301,   302,
     303,   857,     0,     0,     0,   304,   305,     0,     0,   306,
     307,   308,     0,   309,     0,   310,   311,   858,   859,   312,
       0,   313,   314,   315,     0,   316,   317,     0,     0,   860,
     318,   319,   861,   320,   321,   862,   322,   863,   324,   325,
       0,   864,   327,     0,     0,     0,   328,   329,   330,     0,
       0,   331,     0,     0,     0,   332,   333,   334,   335,     0,
     336,   337,   338,     0,     0,     0,     0,     0,     0,   339,
     340,     0,   341,     0,     0,   342,     0,     0,   343,   344,
     865,   866,   345,   346,     0,   347,   867,   349,   868,   869,
     870,   350,   351,   352,   353,   871,   354,   355,     0,   356,
     357,     0,   872,   358,   873,   874,   875,   876,     0,     0,
       0,     0,     0,   363,     0,   364,   877,   878,   879,   366,
     367,   368,     0,   880,   369,   370,   881,     0,   371,     0,
       0,   882,   883,   372,     0,     0,   373,     0,   374,     0,
     884,   376,     0,     0,   885,   886,   887,   888,   889,   377,
       0,     0,   378,   890,     0,   379,   380,   891,     0,     0,
       0,     0,   382,     0,   383,   384,     0,   892,     0,   893,
       0,     0,     0,     0,   894,     0,     0,     0,   895,   896,
       0,     0,     0,     0,   897,     0,   898,     0,     0,   899,
     900,     0,     0,   901,   902,   122,     0,   757,   124,   125,
     126,   127,     0,     0,     0,     0,     0,   128,     0,     0,
     758,     0,   759,   130,   131,   760,   133,     0,   134,   761,
     135,     0,   762,   136,   763,   764,   765,   137,   766,     0,
     138,   139,   140,     0,   141,     0,   142,   143,     0,     0,
     144,   767,   145,     0,   146,   768,   769,   148,     0,   149,
     150,   151,   770,   152,     0,   771,   154,     0,   155,   156,
     157,   158,   159,   772,   773,   160,     0,   161,   162,     0,
     774,   164,     0,   775,   776,   777,   165,     0,     0,   166,
     778,   779,     0,   780,   781,     0,   167,   168,   782,   783,
     784,     0,     0,     0,     0,   785,   171,   786,     0,     0,
     787,   788,   172,     0,   173,     0,     0,     0,   789,   790,
     174,     0,   175,   176,   177,     0,     0,     0,   178,     0,
       0,   179,   180,   181,     0,     0,   791,   182,     0,   792,
     793,   183,   184,   185,   186,     0,     0,   187,     0,   188,
     189,   190,   794,     0,   191,   795,   192,   796,   797,   193,
     194,     0,   798,   195,   196,   197,   799,     0,   198,     0,
       0,   800,     0,   199,   200,     0,   801,   201,     0,   202,
     802,   803,   804,   805,     0,   806,   807,   204,   808,   809,
     810,   206,     0,   207,   811,     0,   812,   813,     0,   208,
     209,     0,   210,   814,     0,   211,     0,     0,     0,   815,
     213,   214,   215,   816,     0,   216,   217,     0,     0,     0,
     218,     0,     0,   817,   219,  2504,     0,     0,   220,     0,
     221,   222,     0,   223,   224,     0,     0,     0,     0,     0,
       0,   225,   819,   226,     0,     0,   820,   227,     0,   821,
     228,     0,     0,     0,   822,     0,   823,     0,   230,   824,
       0,   231,     0,   232,   825,     0,     0,   826,     0,     0,
       0,     0,   827,   233,   234,   235,   236,   237,   238,   828,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   829,
     248,   249,   250,   830,   251,   252,     0,     0,     0,   253,
     254,   255,   831,   257,     0,     0,   832,   259,   833,   834,
     260,     0,   261,   835,   836,   837,   838,   839,   840,   841,
     266,   267,   268,   269,     0,   842,   270,   271,     0,   272,
     273,   274,   843,   844,   845,   275,     0,   846,   847,     0,
     276,   277,     0,   848,     0,   279,   280,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,   283,
     284,   849,   850,   286,   851,   852,   853,   854,   855,     0,
     289,   290,     0,   291,     0,   292,   293,   294,   295,     0,
     856,   297,   298,   299,   300,   301,   302,   303,   857,     0,
       0,     0,   304,   305,     0,     0,   306,   307,   308,     0,
     309,     0,   310,   311,   858,   859,   312,     0,   313,   314,
     315,     0,   316,   317,     0,     0,   860,   318,   319,   861,
     320,   321,   862,   322,   863,   324,   325,     0,   864,   327,
       0,     0,     0,   328,   329,   330,     0,     0,   331,     0,
       0,     0,   332,   333,   334,   335,     0,   336,   337,   338,
       0,     0,     0,     0,     0,     0,   339,   340,     0,   341,
       0,     0,   342,     0,     0,   343,   344,   865,   866,   345,
     346,     0,   347,   867,   349,   868,   869,   870,   350,   351,
     352,   353,   871,   354,   355,     0,   356,   357,     0,   872,
     358,   873,   874,   875,   876,     0,     0,     0,     0,     0,
     363,     0,   364,   877,   878,   879,   366,   367,   368,     0,
     880,   369,   370,   881,     0,   371,     0,     0,   882,   883,
     372,     0,     0,   373,     0,   374,     0,   884,   376,     0,
       0,   885,   886,   887,   888,   889,   377,     0,     0,   378,
     890,     0,   379,   380,   891,     0,     0,     0,     0,   382,
       0,   383,   384,     0,   892,     0,   893,     0,     0,     0,
       0,   894,     0,     0,     0,   895,   896,     0,     0,     0,
       0,   897,     0,   898,     0,     0,   899,   900,     0,     0,
     901,   902,   122,     0,   757,   124,   125,   126,   127,     0,
       0,     0,     0,     0,   128,     0,     0,   758,     0,   759,
     130,   131,   760,   133,     0,   134,   761,   135,     0,   762,
     136,   763,   764,   765,   137,   766,     0,   138,   139,   140,
       0,   141,     0,   142,   143,     0,     0,   144,   767,   145,
       0,   146,   768,   769,   148,     0,   149,   150,   151,   770,
     152,     0,   771,   154,     0,   155,   156,   157,   158,   159,
     772,   773,   160,     0,   161,   162,     0,   774,   164,     0,
     775,   776,   777,   165,     0,     0,   166,   778,   779,     0,
     780,   781,     0,   167,   168,   782,   783,   784,     0,     0,
       0,     0,   785,   171,   786,     0,     0,   787,   788,   172,
       0,   173,     0,     0,     0,   789,   790,   174,     0,   175,
     176,   177,     0,     0,     0,   178,     0,     0,   179,   180,
     181,     0,     0,   791,   182,     0,   792,   793,   183,   184,
     185,   186,     0,     0,   187,     0,   188,   189,   190,   794,
       0,   191,   795,   192,   796,   797,   193,   194,     0,   798,
     195,   196,   197,   799,     0,   198,     0,     0,   800,     0,
     199,   200,     0,   801,   201,     0,   202,   802,   803,   804,
     805,     0,   806,   807,   204,   808,   809,   810,   206,     0,
     207,   811,     0,   812,   813,     0,   208,   209,     0,   210,
     814,     0,   211,     0,     0,     0,   815,   213,   214,   215,
     816,     0,   216,   217,     0,     0,     0,   218,     0,     0,
     817,   219,  2577,     0,     0,   220,     0,   221,   222,     0,
     223,   224,     0,     0,     0,     0,     0,     0,   225,   819,
     226,     0,     0,   820,   227,     0,   821,   228,     0,     0,
       0,   822,     0,   823,     0,   230,   824,     0,   231,     0,
     232,   825,     0,     0,   826,     0,     0,     0,     0,   827,
     233,   234,   235,   236,   237,   238,   828,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   829,   248,   249,   250,
     830,   251,   252,     0,     0,     0,   253,   254,   255,   831,
     257,     0,     0,   832,   259,   833,   834,   260,     0,   261,
     835,   836,   837,   838,   839,   840,   841,   266,   267,   268,
     269,     0,   842,   270,   271,     0,   272,   273,   274,   843,
     844,   845,   275,     0,   846,   847,     0,   276,   277,     0,
     848,     0,   279,   280,   281,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,   283,   284,   849,   850,
     286,   851,   852,   853,   854,   855,     0,   289,   290,     0,
     291,     0,   292,   293,   294,   295,     0,   856,   297,   298,
     299,   300,   301,   302,   303,   857,     0,     0,     0,   304,
     305,     0,     0,   306,   307,   308,     0,   309,     0,   310,
     311,   858,   859,   312,     0,   313,   314,   315,     0,   316,
     317,     0,     0,   860,   318,   319,   861,   320,   321,   862,
     322,   863,   324,   325,     0,   864,   327,     0,     0,     0,
     328,   329,   330,     0,     0,   331,     0,     0,     0,   332,
     333,   334,   335,     0,   336,   337,   338,     0,     0,     0,
       0,     0,     0,   339,   340,     0,   341,     0,     0,   342,
       0,     0,   343,   344,   865,   866,   345,   346,     0,   347,
     867,   349,   868,   869,   870,   350,   351,   352,   353,   871,
     354,   355,     0,   356,   357,     0,   872,   358,   873,   874,
     875,   876,     0,     0,     0,     0,     0,   363,     0,   364,
     877,   878,   879,   366,   367,   368,     0,   880,   369,   370,
     881,     0,   371,     0,     0,   882,   883,   372,     0,     0,
     373,     0,   374,     0,   884,   376,     0,     0,   885,   886,
     887,   888,   889,   377,     0,     0,   378,   890,     0,   379,
     380,   891,     0,     0,     0,     0,   382,     0,   383,   384,
       0,   892,     0,   893,     0,     0,     0,     0,   894,     0,
       0,     0,   895,   896,     0,     0,     0,     0,   897,     0,
     898,     0,     0,   899,   900,     0,     0,   901,   902,   122,
       0,   757,   124,   125,   126,   127,     0,     0,     0,     0,
       0,   128,     0,     0,   758,     0,   759,   130,   131,   760,
     133,     0,   134,   761,   135,     0,   762,   136,   763,   764,
     765,   137,   766,     0,   138,   139,   140,     0,   141,     0,
     142,   143,     0,     0,   144,   767,   145,     0,   146,   768,
     769,   148,     0,   149,   150,   151,   770,   152,     0,   771,
     154,     0,   155,   156,   157,   158,   159,   772,   773,   160,
       0,   161,   162,     0,   774,   164,     0,   775,   776,   777,
     165,     0,     0,   166,   778,   779,     0,   780,   781,     0,
     167,   168,   782,   783,   784,     0,     0,     0,     0,   785,
     171,   786,     0,     0,   787,  2934,   172,     0,   173,     0,
       0,     0,   789,   790,   174,     0,   175,   176,   177,     0,
       0,     0,   178,     0,     0,   179,   180,   181,     0,     0,
     791,   182,     0,   792,   793,   183,   184,   185,   186,     0,
       0,   187,     0,   188,   189,   190,   794,     0,   191,   795,
     192,   796,   797,   193,   194,     0,   798,   195,   196,   197,
     799,     0,   198,     0,     0,   800,     0,   199,   200,     0,
     801,   201,     0,   202,   802,   803,   804,   805,     0,   806,
     807,   204,   808,   809,   810,   206,     0,   207,   811,     0,
     812,   813,     0,   208,   209,     0,   210,   814,     0,   211,
       0,     0,     0,   815,   213,   214,   215,   816,     0,   216,
     217,     0,     0,     0,   218,     0,     0,   817,   219,   818,
       0,     0,   220,     0,   221,   222,     0,   223,   224,     0,
       0,     0,     0,     0,     0,   225,   819,   226,     0,     0,
     820,   227,     0,   821,   228,     0,     0,     0,   822,     0,
     823,     0,   230,   824,     0,   231,     0,   232,   825,     0,
       0,   826,     0,     0,     0,     0,   827,   233,   234,   235,
     236,   237,   238,   828,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   829,   248,   249,   250,   830,   251,   252,
       0,     0,     0,   253,   254,   255,   831,   257,     0,     0,
     832,   259,   833,   834,   260,     0,   261,   835,   836,   837,
     838,   839,   840,   841,   266,   267,   268,   269,     0,   842,
     270,   271,     0,   272,   273,   274,   843,   844,   845,   275,
       0,   846,   847,     0,   276,   277,     0,   848,     0,   279,
     280,   281,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   282,   283,   284,   849,   850,   286,   851,   852,
     853,   854,   855,     0,   289,   290,     0,   291,     0,   292,
     293,   294,   295,     0,   856,   297,   298,   299,   300,   301,
     302,   303,   857,     0,     0,     0,   304,   305,     0,     0,
     306,   307,   308,     0,   309,     0,   310,   311,   858,   859,
     312,     0,   313,   314,   315,     0,   316,   317,     0,     0,
     860,   318,   319,   861,   320,   321,   862,   322,   863,   324,
     325,     0,   864,   327,     0,     0,     0,   328,   329,   330,
       0,     0,   331,     0,     0,     0,   332,   333,   334,   335,
       0,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     339,   340,     0,   341,     0,     0,   342,     0,     0,   343,
     344,   865,   866,   345,   346,     0,   347,   867,   349,   868,
     869,   870,   350,   351,   352,   353,   871,   354,   355,     0,
     356,   357,     0,   872,   358,   873,   874,   875,   876,     0,
       0,     0,     0,     0,   363,     0,   364,   877,   878,   879,
     366,   367,   368,     0,   880,   369,   370,   881,     0,   371,
       0,     0,   882,   883,   372,     0,     0,   373,     0,   374,
       0,   884,   376,     0,     0,   885,   886,   887,   888,   889,
     377,     0,     0,   378,   890,     0,   379,   380,   891,     0,
       0,     0,     0,   382,     0,   383,   384,     0,   892,     0,
     893,     0,     0,     0,     0,   894,     0,     0,     0,   895,
     896,     0,     0,     0,     0,   897,     0,   898,     0,     0,
     899,   900,     0,     0,   901,   902,   122,     0,   757,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,   758,     0,   759,   130,   131,   760,   133,     0,   134,
     761,   135,     0,   762,   136,   763,   764,   765,   137,   766,
       0,   138,   139,   140,     0,   141,     0,   142,   143,     0,
       0,   144,   767,   145,     0,   146,   768,   769,   148,     0,
     149,   150,   151,   770,   152,     0,   771,   154,     0,   155,
     156,   157,   158,   159,   772,   773,   160,     0,   161,   162,
       0,   774,   164,     0,   775,   776,   777,   165,     0,     0,
     166,   778,   779,     0,   780,   781,     0,   167,   168,   782,
     783,   784,     0,     0,     0,     0,   785,   171,   786,     0,
       0,   787,   788,   172,     0,   173,     0,     0,     0,   789,
     790,   174,     0,   175,   176,   177,     0,     0,     0,   178,
       0,     0,   179,   180,   181,     0,     0,   791,   182,     0,
     792,   793,   183,   184,   185,   186,     0,     0,   187,     0,
     188,   189,   190,   794,     0,   191,   795,   192,   796,   797,
     193,   194,     0,   798,   195,   196,   197,   799,     0,   198,
       0,     0,   800,     0,   199,   200,     0,   801,   201,     0,
     202,   802,   803,   804,   805,     0,   806,   807,   204,   808,
     809,   810,   206,     0,   207,   811,     0,   812,   813,     0,
     208,   209,     0,   210,   814,     0,   211,     0,     0,     0,
     815,   213,   214,   215,   816,     0,   216,   217,     0,     0,
       0,   218,     0,     0,   817,   219,   818,     0,     0,   220,
       0,   221,   222,     0,   223,   224,     0,     0,     0,     0,
       0,     0,   225,   819,   226,     0,     0,   820,   227,     0,
     821,   228,     0,     0,     0,   822,     0,   823,     0,   230,
     824,     0,   231,     0,   232,   825,     0,     0,   826,     0,
       0,     0,     0,   827,   233,   234,   235,   236,   237,   238,
     828,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     829,   248,   249,   250,   830,   251,   252,     0,     0,     0,
     253,   254,   255,   831,   257,     0,     0,   832,   259,   833,
     834,   260,     0,   261,   835,   836,   837,   838,   839,   840,
     841,   266,   267,   268,   269,     0,   842,   270,   271,     0,
     272,   273,   274,   843,     0,   845,   275,     0,   846,   847,
       0,   276,   277,     0,   848,     0,   279,   280,   281,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   849,   850,   286,   851,   852,   853,   854,   855,
       0,   289,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   856,   297,   298,   299,   300,   301,   302,   303,   857,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,   310,   311,   858,   859,   312,     0,   313,
     314,   315,     0,   316,   317,     0,     0,   860,   318,   319,
     861,   320,   321,   862,   322,   863,   324,   325,     0,   864,
     327,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,   333,   334,   335,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,   343,   344,   865,   866,
     345,   346,     0,   347,   867,   349,   868,   869,   870,   350,
     351,   352,   353,   871,   354,   355,     0,   356,   357,     0,
     872,   358,   873,   874,   875,   876,     0,     0,     0,     0,
       0,   363,     0,   364,   877,   878,   879,   366,   367,   368,
       0,   880,   369,   370,   881,     0,   371,     0,     0,   882,
     883,   372,     0,     0,   373,     0,   374,     0,   884,   376,
       0,     0,   885,   886,   887,   888,   889,   377,     0,     0,
     378,   890,     0,   379,   380,   891,     0,     0,     0,     0,
     382,     0,   383,   384,     0,   892,     0,   893,     0,     0,
       0,     0,   894,     0,     0,     0,   895,   896,     0,     0,
       0,     0,   897,     0,   898,     0,     0,   899,   900,     0,
       0,   901,   902,   122,     0,   123,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,     0,     0,   129,     0,
       0,   130,   131,   132,   133,     0,   134,     0,   135,     0,
       0,   136,     0,     0,     0,   137,     0,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,     0,
     145,     0,   146,   147,     0,   148,     0,   149,   150,   151,
       0,   152,     0,   153,   154,     0,   155,   156,   157,   158,
     159,     0,     0,   160,     0,   161,   162,  1987,   163,   164,
       0,     0,     0,     0,   165,     0,     0,   166,     0,     0,
       0,     0,     0,     0,   167,   168,     0,     0,   169,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
     172,     0,   173,     0,     0,     0,     0,     0,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,     0,   182,     0,     0,     0,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
       0,     0,   191,     0,   192,     0,     0,   193,   194,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,   201,  1988,   202,     0,     0,
       0,     0,     0,     0,   203,   204,     0,     0,   205,   206,
       0,   207,     0,     0,     0,     0,     0,   208,   209,     0,
     210,     0,     0,   211,     0,     0,     0,   212,   213,   214,
     215,     0,     0,   216,   217,  1122,     0,     0,   218,     0,
       0,     0,   219,     0,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,  1123,     0,     0,   225,
       0,   226,     0,     0,     0,   227,     0,     0,   228,     0,
    2488,     0,     0,     0,   229,     0,   230,     0,     0,   231,
       0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,     0,   251,   252,     0,     0,     0,   253,   254,   255,
     256,   257,     0,     0,   258,   259,     0,     0,   260,     0,
     261,     0,   262,     0,     0,   263,   264,   265,   266,   267,
     268,   269,     0,     0,   270,   271,     0,   272,   273,   274,
       0,     0,     0,   275,     0,     0,     0,     0,   276,   277,
       0,   278,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   285,
       0,   286,     0,   287,     0,   288,     0,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,   302,   303,     0,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,     0,     0,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,     0,   318,   319,     0,   320,   321,
       0,   322,   323,   324,   325,     0,   326,   327,  1897,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,  1989,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,     0,     0,   345,   346,     0,
     347,   348,   349,     0,     0,     0,   350,   351,   352,   353,
       0,   354,   355,     0,   356,   357,     0,     0,   358,   359,
     360,   361,   362,     0,     0,     0,     0,     0,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,     0,   369,
     370,     0,     0,   371,     0,     0,     0,     0,   372,     0,
       0,   373,     0,   374,     0,   375,   376,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,   378,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   382,     0,   383,
     384,     0,     0,   122,   385,   123,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,     0,     0,   129,     0,
       0,   130,   131,   132,   133,     0,   134,     0,   135,  2037,
       0,   136,     0,     0,     0,   137,     0,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,     0,
     145,     0,   146,   147,     0,   148,     0,   149,   150,   151,
       0,   152,     0,   153,   154,     0,   155,   156,   157,   158,
     159,     0,     0,   160,     0,   161,   162,  1987,   163,   164,
       0,     0,     0,     0,   165,     0,     0,   166,     0,     0,
       0,     0,     0,     0,   167,   168,     0,     0,   169,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
     172,     0,   173,     0,     0,     0,     0,     0,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,     0,   182,     0,     0,     0,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
       0,     0,   191,     0,   192,     0,     0,   193,   194,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,   201,  1988,   202,     0,     0,
       0,     0,     0,     0,   203,   204,     0,     0,   205,   206,
       0,   207,     0,     0,     0,     0,     0,   208,   209,     0,
     210,     0,     0,   211,     0,     0,     0,   212,   213,   214,
     215,     0,     0,   216,   217,  1122,     0,     0,   218,     0,
       0,     0,   219,     0,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,  1123,     0,     0,   225,
       0,   226,     0,     0,     0,   227,     0,     0,   228,     0,
       0,     0,     0,     0,   229,     0,   230,     0,     0,   231,
       0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,     0,   251,   252,     0,     0,     0,   253,   254,   255,
     256,   257,     0,     0,   258,   259,     0,     0,   260,     0,
     261,     0,   262,     0,     0,   263,   264,   265,   266,   267,
     268,   269,     0,     0,   270,   271,     0,   272,   273,   274,
       0,     0,     0,   275,     0,     0,     0,     0,   276,   277,
       0,   278,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   285,
       0,   286,     0,   287,     0,   288,     0,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,   302,   303,     0,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,     0,     0,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,     0,   318,   319,     0,   320,   321,
       0,   322,   323,   324,   325,     0,   326,   327,     0,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,  1989,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,     0,     0,   345,   346,     0,
     347,   348,   349,     0,     0,     0,   350,   351,   352,   353,
       0,   354,   355,     0,   356,   357,     0,     0,   358,   359,
     360,   361,   362,     0,     0,     0,     0,     0,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,     0,   369,
     370,     0,     0,   371,     0,     0,     0,     0,   372,     0,
       0,   373,     0,   374,     0,   375,   376,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,   378,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   382,     0,   383,
     384,     0,     0,   122,   385,   123,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,     0,     0,   129,     0,
       0,   130,   131,   132,   133,     0,   134,     0,   135,  2037,
       0,   136,     0,     0,     0,   137,     0,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,     0,
     145,     0,   146,   147,     0,   148,     0,   149,   150,   151,
       0,   152,     0,   153,   154,     0,   155,   156,   157,   158,
     159,     0,     0,   160,     0,   161,   162,     0,   163,   164,
       0,     0,     0,     0,   165,     0,     0,   166,     0,     0,
       0,     0,     0,     0,   167,   168,     0,     0,   169,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
     172,     0,   173,     0,     0,     0,     0,     0,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,     0,   182,     0,     0,     0,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
       0,     0,   191,     0,   192,     0,     0,   193,   194,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,   201,     0,   202,     0,     0,
       0,     0,     0,     0,   203,   204,     0,     0,   205,   206,
       0,   207,     0,     0,     0,     0,     0,   208,   209,     0,
     210,     0,     0,   211,     0,     0,     0,   212,   213,   214,
     215,     0,     0,   216,   217,     0,     0,     0,   218,     0,
       0,     0,   219,     0,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,     0,     0,     0,   225,
       0,   226,     0,     0,     0,   227,     0,     0,   228,     0,
       0,     0,     0,     0,   229,     0,   230,     0,     0,   231,
       0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,     0,   251,   252,     0,     0,     0,   253,   254,   255,
     256,   257,     0,     0,   258,   259,     0,     0,   260,     0,
     261,     0,   262,     0,     0,   263,   264,   265,   266,   267,
     268,   269,     0,     0,   270,   271,     0,   272,   273,   274,
       0,     0,     0,   275,     0,     0,     0,     0,   276,   277,
       0,   278,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   285,
       0,   286,     0,   287,     0,   288,     0,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,   302,   303,     0,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,     0,     0,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,     0,   318,   319,     0,   320,   321,
       0,   322,   323,   324,   325,     0,   326,   327,  1897,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,     0,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,     0,     0,   345,   346,     0,
     347,   348,   349,     0,     0,     0,   350,   351,   352,   353,
       0,   354,   355,     0,   356,   357,     0,     0,   358,   359,
     360,   361,   362,     0,     0,     0,     0,     0,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,     0,   369,
     370,     0,     0,   371,     0,     0,     0,     0,   372,     0,
       0,   373,     0,   374,     0,   375,   376,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,   378,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   382,     0,   383,
     384,     0,     0,     0,   385,   122,     0,   123,   124,   125,
     126,   127,     0,     0,     0,     0,     0,   128,     0,     0,
     129,     0,  2306,   130,   131,   132,   133,     0,   134,   902,
     135,     0,     0,   136,     0,     0,     0,   137,     0,     0,
     138,   139,   140,     0,   141,     0,   142,   143,     0,     0,
     144,     0,   145,     0,   146,   147,     0,   148,     0,   149,
     150,   151,     0,   152,     0,   153,   154,     0,   155,   156,
     157,   158,   159,     0,     0,   160,     0,   161,   162,     0,
     163,   164,     0,     0,     0,     0,   165,     0,     0,   166,
       0,     0,     0,     0,     0,     0,   167,   168,     0,     0,
     169,     0,     0,     0,     0,   170,   171,     0,     0,     0,
       0,     0,   172,     0,   173,     0,     0,     0,     0,     0,
     174,     0,   175,   176,   177,     0,     0,     0,   178,     0,
       0,   179,   180,   181,     0,     0,     0,   182,     0,     0,
       0,   183,   184,   185,   186,     0,     0,   187,     0,   188,
     189,   190,     0,     0,   191,     0,   192,     0,     0,   193,
     194,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,   201,     0,   202,
       0,     0,     0,     0,     0,     0,   203,   204,     0,     0,
     205,   206,     0,   207,     0,     0,     0,     0,     0,   208,
     209,     0,   210,     0,     0,   211,     0,     0,     0,   212,
     213,   214,   215,     0,     0,   216,   217,     0,     0,     0,
     218,     0,     0,     0,   219,     0,     0,     0,   220,     0,
     221,   222,     0,   223,   224,     0,     0,     0,     0,     0,
       0,   225,     0,   226,     0,     0,     0,   227,     0,     0,
     228,     0,     0,     0,     0,     0,   229,     0,   230,     0,
       0,   231,     0,   232,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,     0,   251,   252,     0,     0,     0,   253,
     254,   255,   256,   257,     0,     0,   258,   259,     0,     0,
     260,     0,   261,     0,   262,     0,     0,   263,   264,   265,
     266,   267,   268,   269,     0,     0,   270,   271,     0,   272,
     273,   274,     0,     0,     0,   275,     0,     0,     0,     0,
     276,   277,     0,   278,     0,   279,   280,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,   283,
     284,   285,     0,   286,     0,   287,     0,   288,     0,     0,
     289,   290,     0,   291,     0,   292,   293,   294,   295,     0,
     296,   297,   298,   299,   300,   301,   302,   303,     0,     0,
       0,     0,   304,   305,     0,     0,   306,   307,   308,     0,
     309,     0,   310,   311,     0,     0,   312,     0,   313,   314,
     315,     0,   316,   317,     0,     0,     0,   318,   319,     0,
     320,   321,     0,   322,   323,   324,   325,     0,   326,   327,
       0,     0,     0,   328,   329,   330,     0,     0,   331,     0,
       0,     0,   332,   333,   334,   335,     0,   336,   337,   338,
       0,     0,     0,     0,     0,     0,   339,   340,     0,   341,
       0,     0,   342,     0,     0,   343,   344,     0,     0,   345,
     346,     0,   347,   348,   349,     0,     0,     0,   350,   351,
     352,   353,     0,   354,   355,     0,   356,   357,     0,     0,
     358,   359,   360,   361,   362,     0,     0,     0,     0,     0,
     363,     0,   364,     0,     0,   365,   366,   367,   368,     0,
       0,   369,   370,     0,     0,   371,     0,     0,     0,     0,
     372,     0,     0,   373,     0,   374,     0,   375,   376,     0,
       0,     0,     0,     0,     0,     0,   377,     0,     0,   378,
       0,     0,   379,   380,   381,     0,     0,     0,     0,   382,
       0,   383,   384,     0,     0,     0,   385,     0,     0,     0,
       0,     0,     0,     0,   122,     0,   123,   124,   125,   126,
     127,     0,     0,     0,  3677,     0,   128,     0,     0,   129,
    3678,   902,   130,   131,   132,   133,     0,   134,     0,   135,
       0,     0,   136,     0,     0,     0,   137,     0,     0,   138,
     139,   140,     0,   141,     0,   142,   143,     0,     0,   144,
       0,   145,     0,   146,   147,     0,   148,     0,   149,   150,
     151,     0,   152,     0,   153,   154,     0,   155,   156,   157,
     158,   159,     0,     0,   160,     0,   161,   162,     0,   163,
     164,     0,     0,     0,     0,   165,     0,     0,   166,     0,
       0,     0,     0,     0,     0,   167,   168,     0,     0,   169,
       0,     0,     0,     0,   170,   171,     0,     0,     0,     0,
       0,   172,     0,   173,     0,     0,     0,     0,     0,   174,
       0,   175,   176,   177,     0,     0,     0,   178,     0,     0,
     179,   180,   181,     0,     0,     0,   182,     0,     0,     0,
     183,   184,   185,   186,     0,     0,   187,     0,   188,   189,
     190,     0,     0,   191,     0,   192,     0,     0,   193,   194,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,   201,     0,   202,     0,
       0,     0,     0,     0,     0,   203,   204,     0,     0,   205,
     206,     0,   207,     0,     0,     0,     0,     0,   208,   209,
       0,   210,     0,     0,   211,     0,     0,     0,   212,   213,
     214,   215,     0,     0,   216,   217,     0,     0,     0,   218,
       0,     0,     0,   219,     0,   995,     0,   220,     0,   221,
     222,     0,   223,   224,     0,     0,     0,     0,     0,     0,
     225,     0,   226,     0,     0,     0,   227,     0,     0,   228,
       0,     0,     0,     0,     0,   229,     0,   230,     0,     0,
     231,     0,   232,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,     0,   251,   252,     0,     0,     0,   253,   254,
     255,   256,   257,     0,     0,   258,   259,     0,     0,   260,
       0,   261,     0,   262,     0,     0,   263,   264,   265,   266,
     267,   268,   269,     0,     0,   270,   271,     0,   272,   273,
     274,     0,     0,     0,   275,     0,     0,     0,     0,   276,
     277,     0,   278,     0,   279,   280,   281,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,   283,   284,
     285,     0,   286,     0,   287,     0,   288,     0,     0,   289,
     290,     0,   291,     0,   292,   293,   294,   295,     0,   296,
     297,   298,   299,   300,   301,   302,   303,     0,     0,     0,
       0,   304,   305,     0,     0,   306,   307,   308,     0,   309,
       0,   310,   311,     0,     0,   312,     0,   313,   314,   315,
       0,   316,   317,     0,     0,     0,   318,   319,     0,   320,
     321,     0,   322,   323,   324,   325,     0,   326,   327,     0,
       0,     0,   328,   329,   330,     0,     0,   331,     0,     0,
       0,   332,   333,   334,   335,     0,   336,   337,   338,     0,
       0,     0,     0,     0,     0,   339,   340,     0,   341,     0,
       0,   342,     0,     0,   343,   344,     0,     0,   345,   346,
       0,   347,   348,   349,     0,     0,     0,   350,   351,   352,
     353,     0,   354,   355,     0,   356,   357,     0,     0,   358,
     359,   360,   361,   362,     0,     0,     0,     0,     0,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,     0,
     369,   370,     0,     0,   371,     0,     0,     0,     0,   372,
       0,     0,   373,     0,   374,     0,   375,   376,     0,     0,
       0,     0,     0,     0,     0,   377,     0,     0,   378,     0,
       0,   379,   380,   381,     0,     0,     0,     0,   382,     0,
     383,   384,     0,     0,   122,   385,   123,   124,   125,   126,
     127,     0,     0,     0,     0,     0,   128,     0,     0,   129,
       0,     0,   130,   131,   132,   133,     0,   134,     0,   135,
     422,     0,   136,     0,     0,     0,   137,     0,     0,   138,
     139,   140,     0,   141,     0,   142,   143,     0,     0,   144,
       0,   145,     0,   146,   147,     0,   148,     0,   149,   150,
     151,     0,   152,     0,   153,   154,     0,   155,   156,   157,
     158,   159,     0,     0,   160,     0,   161,   162,     0,   163,
     164,     0,     0,     0,     0,   165,     0,     0,   166,     0,
       0,     0,     0,     0,     0,   167,   168,     0,     0,   169,
       0,     0,     0,     0,   170,   171,     0,     0,     0,     0,
       0,   172,     0,   173,     0,     0,     0,     0,     0,   174,
       0,   175,   176,   177,     0,     0,     0,   178,     0,     0,
     179,   180,   181,     0,     0,     0,   182,     0,     0,     0,
     183,   184,   185,   186,     0,     0,   187,     0,   188,   189,
     190,     0,     0,   191,     0,   192,     0,     0,   193,   194,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,   201,     0,   202,     0,
       0,     0,     0,     0,     0,   203,   204,     0,     0,   205,
     206,     0,   207,     0,     0,     0,     0,     0,   208,   209,
       0,   210,     0,     0,   211,     0,     0,     0,   212,   213,
     214,   215,     0,     0,   216,   217,     0,     0,     0,   218,
       0,     0,     0,   219,     0,     0,     0,   220,     0,   221,
     222,     0,   223,   224,     0,     0,     0,     0,     0,     0,
     225,     0,   226,     0,     0,     0,   227,     0,     0,   228,
       0,     0,     0,     0,     0,   229,     0,   230,     0,     0,
     231,     0,   232,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   233,   234,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,     0,   251,   252,     0,     0,     0,   253,   254,
     255,   256,   257,     0,     0,   258,   259,     0,     0,   260,
       0,   261,     0,   262,     0,     0,   263,   264,   265,   266,
     267,   268,   269,     0,     0,   270,   271,     0,   272,   273,
     274,     0,     0,     0,   275,     0,     0,     0,     0,   276,
     277,     0,   278,     0,   279,   280,   281,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,   283,   284,
     285,     0,   286,     0,   287,     0,   288,     0,     0,   289,
     290,     0,   291,     0,   292,   293,   294,   295,     0,   296,
     297,   298,   299,   300,   301,   302,   303,     0,     0,     0,
       0,   304,   305,     0,     0,   306,   307,   308,     0,   309,
       0,   310,   311,     0,     0,   312,     0,   313,   314,   315,
       0,   316,   317,     0,     0,     0,   318,   319,     0,   320,
     321,     0,   322,   323,   324,   325,     0,   326,   327,     0,
       0,     0,   328,   329,   330,     0,     0,   331,     0,     0,
       0,   332,   333,   334,   335,     0,   336,   337,   338,     0,
       0,     0,     0,     0,     0,   339,   340,     0,   341,     0,
       0,   342,     0,     0,   343,   344,     0,     0,   345,   346,
       0,   347,   348,   349,     0,     0,     0,   350,   351,   352,
     353,     0,   354,   355,     0,   356,   357,     0,     0,   358,
     359,   360,   361,   362,     0,     0,     0,     0,     0,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,     0,
     369,   370,     0,     0,   371,     0,     0,     0,     0,   372,
       0,     0,   373,     0,   374,     0,   375,   376,     0,     0,
       0,     0,     0,     0,     0,   377,     0,     0,   378,     0,
       0,   379,   380,   381,     0,     0,     0,     0,   382,     0,
     383,   384,     0,     0,     0,   385,   122,     0,   123,   124,
     125,   126,   127,     0,     0,     0,  1856,     0,   128,     0,
       0,   129,     0,     0,   130,   131,   132,   133,     0,   134,
     422,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,   142,   143,     0,
       0,   144,     0,   145,     0,   146,   147,     0,   148,     0,
     149,   150,   151,     0,   152,     0,   153,   154,     0,   155,
     156,   157,   158,   159,     0,     0,   160,     0,   161,   162,
       0,   163,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,   178,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,   183,   184,   185,   186,     0,     0,   187,     0,
     188,   189,   190,     0,     0,   191,     0,   192,     0,     0,
     193,   194,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
     208,   209,     0,   210,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,     0,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,     0,     0,     0,     0,
       0,     0,   225,     0,   226,     0,     0,     0,   227,     0,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,   275,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,   281,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,   289,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,   310,   311,     0,     0,   312,     0,   313,
     314,   315,     0,   316,   317,     0,     0,     0,   318,   319,
       0,   320,   321,     0,   322,   323,   324,   325,     0,   326,
     327,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,   333,   334,   335,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,   343,   344,     0,     0,
     345,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,   365,   366,   367,   368,
       0,     0,   369,   370,     0,     0,   371,     0,     0,     0,
       0,   372,     0,     0,   373,     0,   374,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,     0,     0,
     382,     0,   383,   384,     0,     0,     0,   385,   122,     0,
     123,   124,   125,   126,   127,     0,     0,     0,     0,     0,
     128,     0,     0,   129,  2036,     0,   130,   131,   132,   133,
       0,   134,  2037,   135,     0,     0,   136,     0,     0,     0,
     137,     0,     0,   138,   139,   140,     0,   141,     0,   142,
     143,     0,     0,   144,     0,   145,     0,   146,   147,     0,
     148,     0,   149,   150,   151,     0,   152,     0,   153,   154,
       0,   155,   156,   157,   158,   159,     0,     0,   160,     0,
     161,   162,     0,   163,   164,     0,     0,     0,     0,   165,
       0,     0,   166,     0,     0,     0,     0,     0,     0,   167,
     168,     0,     0,   169,     0,     0,     0,     0,   170,   171,
       0,     0,     0,     0,     0,   172,     0,   173,     0,     0,
       0,     0,     0,   174,     0,   175,   176,   177,     0,     0,
       0,   178,     0,     0,   179,   180,   181,     0,     0,     0,
     182,     0,     0,     0,   183,   184,   185,   186,     0,     0,
     187,     0,   188,   189,   190,     0,     0,   191,     0,   192,
       0,     0,   193,   194,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
     201,     0,   202,     0,     0,     0,     0,     0,     0,   203,
     204,     0,     0,   205,   206,     0,   207,     0,     0,     0,
       0,     0,   208,   209,     0,   210,     0,     0,   211,     0,
       0,     0,   212,   213,   214,   215,     0,     0,   216,   217,
       0,     0,     0,   218,     0,     0,     0,   219,     0,     0,
       0,   220,     0,   221,   222,     0,   223,   224,     0,     0,
       0,     0,     0,     0,   225,     0,   226,     0,     0,     0,
     227,     0,     0,   228,     0,     0,     0,     0,     0,   229,
       0,   230,     0,     0,   231,     0,   232,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   233,   234,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
     246,   247,     0,   248,   249,   250,     0,   251,   252,     0,
       0,     0,   253,   254,   255,   256,   257,     0,     0,   258,
     259,     0,     0,   260,     0,   261,     0,   262,     0,     0,
     263,   264,   265,   266,   267,   268,   269,     0,     0,   270,
     271,     0,   272,   273,   274,     0,     0,     0,   275,     0,
       0,     0,     0,   276,   277,     0,   278,     0,   279,   280,
     281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   282,   283,   284,   285,     0,   286,     0,   287,     0,
     288,     0,     0,   289,   290,     0,   291,     0,   292,   293,
     294,   295,     0,   296,   297,   298,   299,   300,   301,   302,
     303,     0,     0,     0,     0,   304,   305,     0,     0,   306,
     307,   308,     0,   309,     0,   310,   311,     0,     0,   312,
       0,   313,   314,   315,     0,   316,   317,     0,     0,     0,
     318,   319,     0,   320,   321,     0,   322,   323,   324,   325,
       0,   326,   327,     0,     0,     0,   328,   329,   330,     0,
       0,   331,     0,     0,     0,   332,   333,   334,   335,     0,
     336,   337,   338,     0,     0,     0,     0,     0,     0,   339,
     340,     0,   341,     0,     0,   342,     0,     0,   343,   344,
       0,     0,   345,   346,     0,   347,   348,   349,     0,     0,
       0,   350,   351,   352,   353,     0,   354,   355,     0,   356,
     357,     0,     0,   358,   359,   360,   361,   362,     0,     0,
       0,     0,     0,   363,     0,   364,     0,     0,   365,   366,
     367,   368,     0,     0,   369,   370,     0,     0,   371,     0,
       0,     0,     0,   372,     0,     0,   373,     0,   374,     0,
     375,   376,     0,     0,     0,     0,     0,     0,     0,   377,
       0,     0,   378,     0,     0,   379,   380,   381,     0,     0,
       0,     0,   382,     0,   383,   384,     0,     0,     0,   385,
       0,     0,     0,     0,     0,     0,     0,   122,     0,   123,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   129,  3678,   902,   130,   131,   132,   133,     0,
     134,     0,   135,     0,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   192,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,     0,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,     0,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,   122,   385,   123,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   129,     0,     0,   130,   131,   132,   133,     0,
     134,     0,   135,   422,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   477,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,     0,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,     0,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,   122,   385,   123,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   129,     0,     0,   130,   131,   132,   133,     0,
     134,     0,   135,   422,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   192,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,     0,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,     0,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,   122,   385,   123,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   129,     0,     0,   130,   131,   132,   133,     0,
     134,     0,   135,   902,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   192,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,     0,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,     0,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,   122,   385,   123,
     124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
       0,     0,   129,     0,     0,   130,   131,   132,   133,     0,
     134,     0,   135,  2037,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   192,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,   566,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,   567,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,     0,   385,     0,
     122,     0,   123,   124,   125,   126,   127,     0,     0,     0,
       0,     0,   128,     0,     0,   129,     0,     0,   130,   131,
     132,   133,  1797,   134,     0,   135,     0,     0,   136,     0,
       0,     0,   137,     0,     0,   138,   139,   140,     0,   141,
       0,   142,   143,     0,     0,   144,     0,   145,     0,   146,
     147,     0,   148,     0,   149,   150,   151,     0,   152,     0,
     153,   154,     0,   155,   156,   157,   158,   159,     0,     0,
     160,     0,   161,   162,     0,   163,   164,     0,     0,     0,
       0,   165,     0,     0,   166,     0,     0,     0,     0,     0,
       0,   167,   168,     0,     0,   169,     0,     0,     0,     0,
     170,   171,     0,     0,     0,     0,     0,   172,     0,   173,
       0,     0,     0,     0,     0,   174,     0,   175,   176,   177,
       0,     0,     0,   178,     0,     0,   179,   180,   181,     0,
       0,     0,   182,     0,     0,     0,   183,   184,   185,   186,
       0,     0,   187,     0,   188,   189,   190,     0,     0,   191,
       0,   192,     0,     0,   193,   194,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,   201,     0,   202,     0,     0,     0,     0,     0,
       0,   203,   204,     0,     0,   205,   206,     0,   207,     0,
       0,     0,     0,     0,   208,   209,     0,   210,     0,     0,
     211,     0,     0,     0,   212,   213,   214,   215,     0,     0,
     216,   217,     0,     0,     0,   218,     0,     0,     0,   219,
       0,     0,     0,   220,     0,   221,   222,     0,   223,   224,
       0,     0,     0,     0,     0,     0,   225,     0,   226,     0,
       0,     0,   227,     0,     0,   228,   566,     0,     0,     0,
       0,   229,     0,   230,     0,     0,   231,     0,   232,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   233,   234,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,     0,   251,
     252,     0,     0,     0,   253,   254,   255,   256,   257,     0,
       0,   258,   259,     0,     0,   260,     0,   261,     0,   262,
       0,     0,   263,   264,   265,   266,   267,   268,   269,     0,
       0,   270,   271,     0,   272,   273,   274,     0,     0,     0,
     275,     0,     0,     0,     0,   276,   277,     0,   278,     0,
     279,   280,   281,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   282,   283,   284,   285,     0,   286,     0,
     287,     0,   288,     0,     0,   289,   290,     0,   291,     0,
     292,   293,   294,   295,     0,   296,   297,   298,   299,   300,
     301,   302,   303,     0,     0,     0,     0,   304,   305,     0,
       0,   306,   307,   308,     0,   309,     0,   310,   311,     0,
       0,   312,     0,   313,   314,   315,     0,   316,   317,     0,
       0,     0,   318,   319,     0,   320,   321,     0,   322,   323,
     324,   325,     0,   326,   327,     0,     0,     0,   328,   329,
     330,     0,     0,   331,     0,     0,     0,   332,   333,   334,
     335,     0,   336,   337,   338,     0,     0,     0,     0,     0,
       0,   339,   340,     0,   341,     0,     0,   342,     0,     0,
     343,   344,     0,     0,   345,   346,     0,   347,   348,   349,
       0,     0,     0,   350,   351,   352,   353,     0,   354,   355,
       0,   356,   357,     0,   567,   358,   359,   360,   361,   362,
       0,     0,     0,     0,     0,   363,     0,   364,     0,     0,
     365,   366,   367,   368,     0,     0,   369,   370,     0,     0,
     371,     0,     0,     0,     0,   372,     0,     0,   373,     0,
     374,     0,   375,   376,     0,     0,     0,     0,     0,     0,
       0,   377,     0,     0,   378,     0,     0,   379,   380,   381,
       0,     0,     0,     0,   382,     0,   383,   384,     0,     0,
       0,   385,     0,   122,     0,   123,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,     0,     0,   129,     0,
       0,   130,   131,   132,   133,  2346,   134,     0,   135,     0,
       0,   136,     0,     0,     0,   137,     0,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,     0,
     145,     0,   146,   147,     0,   148,     0,   149,   150,   151,
       0,   152,     0,   153,   154,     0,   155,   156,   157,   158,
     159,     0,     0,   160,     0,   161,   162,     0,   163,   164,
       0,     0,     0,     0,   165,     0,     0,   166,     0,     0,
       0,     0,     0,     0,   167,   168,     0,     0,   169,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
     172,     0,   173,     0,     0,     0,     0,     0,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,     0,   182,     0,     0,     0,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
       0,     0,   191,     0,   192,     0,     0,   193,   194,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,   201,     0,   202,     0,     0,
       0,     0,     0,     0,   203,   204,     0,     0,   205,   206,
       0,   207,     0,     0,     0,     0,     0,   208,   209,     0,
     210,     0,     0,   211,     0,     0,     0,   212,   213,   214,
     215,     0,     0,   216,   217,     0,     0,     0,   218,     0,
       0,     0,   219,     0,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,     0,     0,     0,   225,
       0,   226,     0,     0,     0,   227,     0,     0,   228,   566,
       0,     0,     0,     0,   229,     0,   230,     0,     0,   231,
       0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,     0,   251,   252,     0,     0,     0,   253,   254,   255,
     256,   257,     0,     0,   258,   259,     0,     0,   260,     0,
     261,     0,   262,     0,     0,   263,   264,   265,   266,   267,
     268,   269,     0,     0,   270,   271,     0,   272,   273,   274,
       0,     0,     0,   275,     0,     0,     0,     0,   276,   277,
       0,   278,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   285,
       0,   286,     0,   287,     0,   288,     0,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,   302,   303,     0,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,     0,     0,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,     0,   318,   319,     0,   320,   321,
       0,   322,   323,   324,   325,     0,   326,   327,     0,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,     0,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,     0,     0,   345,   346,     0,
     347,   348,   349,     0,     0,     0,   350,   351,   352,   353,
       0,   354,   355,     0,   356,   357,     0,   567,   358,   359,
     360,   361,   362,     0,     0,     0,     0,     0,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,     0,   369,
     370,     0,     0,   371,     0,     0,     0,     0,   372,     0,
       0,   373,     0,   374,     0,   375,   376,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,   378,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   382,     0,   383,
     384,     0,     0,     0,   385,     0,   122,     0,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,  2957,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,     0,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,   373,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
       0,     0,  3522,   122,     0,   123,   124,   125,   126,   127,
       0,     0,     0,     0,     0,   128,  3729,     0,   129,     0,
       0,   130,   131,   132,   133,     0,   134,     0,   135,     0,
       0,   136,     0,     0,     0,   137,     0,     0,   138,   139,
     140,     0,   141,     0,   142,   143,     0,     0,   144,     0,
     145,     0,   146,   147,     0,   148,     0,   149,   150,   151,
       0,   152,     0,   153,   154,     0,   155,   156,   157,   158,
     159,     0,     0,   160,     0,   161,   162,     0,   163,   164,
       0,     0,     0,     0,   165,     0,     0,   166,     0,     0,
       0,     0,     0,     0,   167,   168,     0,     0,   169,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
     172,     0,   173,     0,     0,     0,     0,     0,   174,     0,
     175,   176,   177,     0,     0,     0,   178,     0,     0,   179,
     180,   181,     0,     0,     0,   182,     0,     0,     0,   183,
     184,   185,   186,     0,     0,   187,     0,   188,   189,   190,
       0,     0,   191,     0,   192,     0,     0,   193,   194,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,   201,     0,   202,     0,     0,
       0,     0,     0,     0,   203,   204,     0,     0,   205,   206,
       0,   207,     0,     0,     0,     0,     0,   208,   209,     0,
     210,     0,     0,   211,     0,     0,     0,   212,   213,   214,
     215,     0,     0,   216,   217,     0,     0,     0,   218,     0,
       0,     0,   219,     0,     0,     0,   220,     0,   221,   222,
       0,   223,   224,     0,     0,     0,     0,     0,     0,   225,
       0,   226,     0,     0,     0,   227,     0,     0,   228,     0,
       0,     0,     0,     0,   229,     0,   230,     0,     0,   231,
       0,   232,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   233,   234,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,     0,   251,   252,     0,     0,     0,   253,   254,   255,
     256,   257,     0,     0,   258,   259,     0,     0,   260,     0,
     261,     0,   262,     0,     0,   263,   264,   265,   266,   267,
     268,   269,     0,     0,   270,   271,     0,   272,   273,   274,
       0,     0,     0,   275,     0,     0,     0,     0,   276,   277,
       0,   278,     0,   279,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,   283,   284,   285,
       0,   286,     0,   287,     0,   288,     0,     0,   289,   290,
       0,   291,     0,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,   302,   303,     0,     0,     0,     0,
     304,   305,     0,     0,   306,   307,   308,     0,   309,     0,
     310,   311,     0,     0,   312,     0,   313,   314,   315,     0,
     316,   317,     0,     0,     0,   318,   319,     0,   320,   321,
       0,   322,   323,   324,   325,     0,   326,   327,     0,     0,
       0,   328,   329,   330,     0,     0,   331,     0,     0,     0,
     332,   333,   334,   335,     0,   336,   337,   338,     0,     0,
       0,     0,     0,     0,   339,   340,     0,   341,     0,     0,
     342,     0,     0,   343,   344,     0,     0,   345,   346,     0,
     347,   348,   349,     0,     0,     0,   350,   351,   352,   353,
       0,   354,   355,     0,   356,   357,     0,     0,   358,   359,
     360,   361,   362,     0,     0,     0,     0,     0,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,     0,   369,
     370,     0,     0,   371,     0,     0,     0,     0,   372,     0,
       0,   373,     0,   374,     0,   375,   376,     0,     0,     0,
       0,     0,     0,     0,   377,     0,     0,   378,     0,     0,
     379,   380,   381,     0,     0,     0,     0,   382,     0,   383,
     384,     0,     0,     0,   385,   122,     0,   123,   124,   125,
     126,   127,     0,     0,     0,  1638,     0,   128,     0,     0,
     129,     0,     0,   130,   131,   132,   133,     0,   134,     0,
     135,     0,     0,   136,     0,     0,     0,   137,     0,     0,
     138,   139,   140,     0,   141,     0,   142,   143,     0,     0,
     144,     0,   145,     0,   146,   147,     0,   148,     0,   149,
     150,   151,     0,   152,     0,   153,   154,     0,   155,   156,
     157,   158,   159,     0,     0,   160,     0,   161,   162,     0,
     163,   164,     0,     0,     0,     0,   165,     0,     0,   166,
       0,     0,     0,     0,     0,     0,   167,   168,     0,     0,
     169,     0,     0,     0,     0,   170,   171,     0,     0,     0,
       0,     0,   172,     0,   173,     0,     0,     0,     0,     0,
     174,     0,   175,   176,   177,     0,     0,     0,   178,     0,
       0,   179,   180,   181,     0,     0,     0,   182,     0,     0,
       0,   183,   184,   185,   186,     0,     0,   187,     0,   188,
     189,   190,     0,     0,   191,     0,   192,     0,     0,   193,
     194,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,   201,     0,   202,
       0,     0,     0,     0,     0,     0,   203,   204,     0,     0,
     205,   206,     0,   207,     0,     0,     0,     0,     0,   208,
     209,     0,   210,     0,     0,   211,     0,     0,     0,   212,
     213,   214,   215,     0,     0,   216,   217,     0,     0,     0,
     218,     0,     0,     0,   219,     0,     0,     0,   220,     0,
     221,   222,     0,   223,   224,     0,     0,     0,     0,     0,
       0,   225,     0,   226,     0,     0,     0,   227,     0,     0,
     228,     0,     0,     0,     0,     0,   229,     0,   230,     0,
       0,   231,     0,   232,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,   234,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,     0,   251,   252,     0,     0,     0,   253,
     254,   255,   256,   257,     0,     0,   258,   259,     0,     0,
     260,     0,   261,     0,   262,     0,     0,   263,   264,   265,
     266,   267,   268,   269,     0,     0,   270,   271,     0,   272,
     273,   274,     0,     0,     0,   275,     0,     0,     0,     0,
     276,   277,     0,   278,     0,   279,   280,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,   283,
     284,   285,     0,   286,     0,   287,     0,   288,     0,     0,
     289,   290,     0,   291,     0,   292,   293,   294,   295,     0,
     296,   297,   298,   299,   300,   301,   302,   303,     0,     0,
       0,     0,   304,   305,     0,     0,   306,   307,   308,     0,
     309,     0,   310,   311,     0,     0,   312,     0,   313,   314,
     315,     0,   316,   317,     0,     0,     0,   318,   319,     0,
     320,   321,     0,   322,   323,   324,   325,     0,   326,   327,
       0,     0,     0,   328,   329,   330,     0,     0,   331,     0,
       0,     0,   332,   333,   334,   335,     0,   336,   337,   338,
       0,     0,     0,     0,     0,     0,   339,   340,     0,   341,
       0,     0,   342,     0,     0,   343,   344,     0,     0,   345,
     346,     0,   347,   348,   349,     0,     0,     0,   350,   351,
     352,   353,     0,   354,   355,     0,   356,   357,     0,     0,
     358,   359,   360,   361,   362,     0,     0,     0,     0,     0,
     363,     0,   364,     0,     0,   365,   366,   367,   368,     0,
       0,   369,   370,     0,     0,   371,     0,     0,     0,     0,
     372,     0,     0,   373,     0,   374,     0,   375,   376,     0,
       0,     0,     0,     0,     0,     0,   377,     0,     0,   378,
       0,     0,   379,   380,   381,     0,     0,     0,     0,   382,
       0,   383,   384,     0,     0,     0,   385,   122,     0,   123,
     124,   125,   126,   127,     0,     0,     0,  2332,     0,   128,
       0,     0,   129,     0,     0,   130,   131,   132,   133,     0,
     134,     0,   135,     0,     0,   136,     0,     0,     0,   137,
       0,     0,   138,   139,   140,     0,   141,     0,   142,   143,
       0,     0,   144,     0,   145,     0,   146,   147,     0,   148,
       0,   149,   150,   151,     0,   152,     0,   153,   154,     0,
     155,   156,   157,   158,   159,     0,     0,   160,     0,   161,
     162,     0,   163,   164,     0,     0,     0,     0,   165,     0,
       0,   166,     0,     0,     0,     0,     0,     0,   167,   168,
       0,     0,   169,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,   172,     0,   173,     0,     0,     0,
       0,     0,   174,     0,   175,   176,   177,     0,     0,     0,
     178,     0,     0,   179,   180,   181,     0,     0,     0,   182,
       0,     0,     0,   183,   184,   185,   186,     0,     0,   187,
       0,   188,   189,   190,     0,     0,   191,     0,   192,     0,
       0,   193,   194,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,   201,
       0,   202,     0,     0,     0,     0,     0,     0,   203,   204,
       0,     0,   205,   206,     0,   207,     0,     0,     0,     0,
       0,   208,   209,     0,   210,     0,     0,   211,     0,     0,
       0,   212,   213,   214,   215,     0,     0,   216,   217,     0,
       0,     0,   218,     0,     0,     0,   219,     0,     0,     0,
     220,     0,   221,   222,     0,   223,   224,     0,     0,     0,
       0,     0,     0,   225,     0,   226,     0,     0,     0,   227,
       0,     0,   228,     0,     0,     0,     0,     0,   229,     0,
     230,     0,     0,   231,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   233,   234,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,     0,   251,   252,     0,     0,
       0,   253,   254,   255,   256,   257,     0,     0,   258,   259,
       0,     0,   260,     0,   261,     0,   262,     0,     0,   263,
     264,   265,   266,   267,   268,   269,     0,     0,   270,   271,
       0,   272,   273,   274,     0,     0,     0,   275,     0,     0,
       0,     0,   276,   277,     0,   278,     0,   279,   280,   281,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,   283,   284,   285,     0,   286,     0,   287,     0,   288,
       0,     0,   289,   290,     0,   291,     0,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,   302,   303,
       0,     0,     0,     0,   304,   305,     0,     0,   306,   307,
     308,     0,   309,     0,   310,   311,     0,     0,   312,     0,
     313,   314,   315,     0,   316,   317,     0,     0,     0,   318,
     319,     0,   320,   321,     0,   322,   323,   324,   325,     0,
     326,   327,     0,     0,     0,   328,   329,   330,     0,     0,
     331,     0,     0,     0,   332,   333,   334,   335,     0,   336,
     337,   338,     0,     0,     0,     0,     0,     0,   339,   340,
       0,   341,     0,     0,   342,     0,     0,   343,   344,     0,
       0,   345,   346,     0,   347,   348,   349,     0,     0,     0,
     350,   351,   352,   353,     0,   354,   355,     0,   356,   357,
       0,     0,   358,   359,   360,   361,   362,     0,     0,     0,
       0,     0,   363,     0,   364,     0,     0,   365,   366,   367,
     368,     0,     0,   369,   370,     0,     0,   371,     0,     0,
       0,     0,   372,     0,     0,   373,     0,   374,     0,   375,
     376,     0,     0,     0,     0,     0,     0,     0,   377,     0,
       0,   378,     0,     0,   379,   380,   381,     0,     0,     0,
       0,   382,     0,   383,   384,     0,     0,     0,   385,   122,
       0,   123,   124,   125,   126,   127,     0,     0,     0,  2628,
       0,   128,     0,     0,   129,     0,     0,   130,   131,   132,
     133,     0,   134,     0,   135,     0,     0,   136,     0,     0,
       0,   137,     0,     0,   138,   139,   140,     0,   141,     0,
     142,   143,     0,     0,   144,     0,   145,     0,   146,   147,
       0,   148,     0,   149,   150,   151,     0,   152,     0,   153,
     154,     0,   155,   156,   157,   158,   159,     0,     0,   160,
       0,   161,   162,     0,   163,   164,     0,     0,     0,     0,
     165,     0,     0,   166,     0,     0,     0,     0,     0,     0,
     167,   168,     0,     0,   169,     0,     0,     0,     0,   170,
     171,     0,     0,     0,     0,     0,   172,     0,   173,     0,
       0,     0,     0,     0,   174,     0,   175,   176,   177,     0,
       0,     0,   178,     0,     0,   179,   180,   181,     0,     0,
       0,   182,     0,     0,     0,   183,   184,   185,   186,     0,
       0,   187,     0,   188,   189,   190,     0,     0,   191,     0,
     192,     0,     0,   193,   194,     0,     0,   195,   196,   197,
       0,     0,   198,     0,     0,     0,     0,   199,   200,     0,
       0,   201,     0,   202,     0,     0,     0,     0,     0,     0,
     203,   204,     0,     0,   205,   206,     0,   207,     0,     0,
       0,     0,     0,   208,   209,     0,   210,     0,     0,   211,
       0,     0,     0,   212,   213,   214,   215,     0,     0,   216,
     217,     0,     0,     0,   218,     0,     0,     0,   219,     0,
       0,     0,   220,     0,   221,   222,     0,   223,   224,     0,
       0,     0,     0,     0,     0,   225,     0,   226,     0,     0,
       0,   227,     0,     0,   228,     0,     0,     0,     0,     0,
     229,     0,   230,     0,     0,   231,     0,   232,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   234,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,     0,   251,   252,
       0,     0,     0,   253,   254,   255,   256,   257,     0,     0,
     258,   259,     0,     0,   260,     0,   261,     0,   262,     0,
       0,   263,   264,   265,   266,   267,   268,   269,     0,     0,
     270,   271,     0,   272,   273,   274,     0,     0,     0,   275,
       0,     0,     0,     0,   276,   277,     0,   278,     0,   279,
     280,   281,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   282,   283,   284,   285,     0,   286,     0,   287,
       0,   288,     0,     0,   289,   290,     0,   291,     0,   292,
     293,   294,   295,     0,   296,   297,   298,   299,   300,   301,
     302,   303,     0,     0,     0,     0,   304,   305,     0,     0,
     306,   307,   308,     0,   309,     0,   310,   311,     0,     0,
     312,     0,   313,   314,   315,     0,   316,   317,     0,     0,
       0,   318,   319,     0,   320,   321,     0,   322,   323,   324,
     325,     0,   326,   327,     0,     0,     0,   328,   329,   330,
       0,     0,   331,     0,     0,     0,   332,   333,   334,   335,
       0,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     339,   340,     0,   341,     0,     0,   342,     0,     0,   343,
     344,     0,     0,   345,   346,     0,   347,   348,   349,     0,
       0,     0,   350,   351,   352,   353,     0,   354,   355,     0,
     356,   357,     0,     0,   358,   359,   360,   361,   362,     0,
       0,     0,     0,     0,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,     0,   369,   370,     0,     0,   371,
       0,     0,     0,     0,   372,     0,     0,   373,     0,   374,
       0,   375,   376,     0,     0,     0,     0,     0,     0,     0,
     377,     0,     0,   378,     0,     0,   379,   380,   381,     0,
       0,     0,     0,   382,     0,   383,   384,     0,     0,     0,
     385,   122,     0,   123,   124,   125,   126,   127,     0,     0,
       0,  2962,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,  -232,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,  3515,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,  -202,     0,   182,     0,     0,     0,  -202,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,  3516,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,  3517,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,  3518,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,  3519,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,  -185,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,  3520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
    -185,     0,   312,     0,     0,   314,     0,     0,   316,   317,
    3521,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,  -185,     0,   382,     0,   383,     0,     0,
       0,     0,   385,     0,     0,  -202,   122,  3522,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,     0,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,  -223,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,   373,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,  -223,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
    -223,   122,  3522,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,  -232,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,  3515,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,  -220,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,  3516,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,  3517,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,  3518,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,  3519,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,  -185,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,  3520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
    -185,     0,   312,     0,     0,   314,     0,     0,   316,   317,
    3521,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,  -220,     0,  -185,     0,   382,     0,   383,     0,     0,
       0,     0,   385,     0,     0,  -220,   122,  3522,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,     0,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,  3606,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,   373,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
       0,   122,  3522,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,  -232,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,  3515,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,  -225,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,  3516,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,  3517,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,  3518,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,  3519,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,  -185,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,  3520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
    -185,     0,   312,     0,     0,   314,     0,     0,   316,   317,
    3521,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,  -185,     0,   382,     0,   383,     0,     0,
       0,     0,   385,     0,     0,     0,   122,  3522,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,     0,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,  3657,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,   373,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
       0,   122,  3522,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,  -232,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,  3515,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,  3690,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,  3516,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,  3517,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,  3518,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,  3519,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,  -185,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,  3520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
    -185,     0,   312,     0,     0,   314,     0,     0,   316,   317,
    3521,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,  -185,     0,   382,     0,   383,     0,     0,
       0,     0,   385,     0,     0,     0,   122,  3522,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,     0,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,  -206,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,   373,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
       0,   122,  3522,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,  -232,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,  3515,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,     0,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,  3516,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,  3517,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,  3518,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,  3519,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,  -185,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,  3520,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
    -185,     0,   312,     0,     0,   314,     0,     0,   316,   317,
    3521,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,  -185,     0,   382,     0,   383,     0,     0,
       0,     0,   385,     0,     0,     0,   122,  3522,   123,   124,
     125,   126,   127,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,     0,   130,   131,   132,     0,     0,  -232,
       0,   135,     0,     0,   136,     0,     0,     0,   137,     0,
       0,   138,   139,   140,     0,   141,     0,     0,     0,     0,
       0,   144,     0,   145,     0,   146,     0,     0,     0,     0,
     149,   150,  3515,     0,   152,     0,   153,   154,     0,     0,
     156,     0,   158,   159,     0,     0,   160,     0,   161,   162,
       0,     0,   164,     0,     0,     0,     0,   165,     0,     0,
     166,     0,     0,     0,     0,     0,     0,   167,   168,     0,
       0,   169,     0,     0,     0,     0,   170,     0,     0,     0,
       0,     0,     0,   172,     0,   173,     0,     0,     0,     0,
       0,   174,     0,   175,   176,   177,     0,     0,     0,     0,
       0,     0,   179,   180,   181,     0,     0,     0,   182,     0,
       0,     0,     0,   184,   185,   186,     0,     0,   187,     0,
     188,   189,     0,     0,     0,   191,     0,   192,     0,     0,
     193,   194,  3516,     0,   195,   196,   197,     0,     0,     0,
       0,     0,     0,     0,   199,   200,     0,     0,   201,     0,
     202,     0,     0,     0,     0,     0,     0,   203,   204,     0,
       0,   205,   206,     0,   207,     0,     0,     0,     0,     0,
       0,   209,     0,     0,     0,     0,   211,     0,     0,     0,
     212,   213,   214,   215,  3517,     0,   216,   217,     0,     0,
       0,   218,     0,     0,     0,   219,     0,     0,     0,   220,
       0,   221,   222,     0,   223,   224,  3518,     0,     0,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,  3519,
       0,   228,     0,     0,     0,     0,     0,   229,     0,   230,
       0,     0,   231,     0,   232,     0,     0,     0,     0,     0,
    -185,     0,     0,     0,   233,   234,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,     0,   251,   252,     0,     0,     0,
     253,   254,   255,   256,   257,     0,     0,   258,   259,     0,
       0,   260,     0,   261,     0,   262,     0,     0,   263,   264,
     265,   266,   267,   268,   269,     0,     0,   270,   271,     0,
     272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   277,     0,   278,     0,   279,   280,  3520,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
     283,   284,   285,     0,   286,     0,   287,     0,   288,     0,
       0,     0,   290,     0,   291,     0,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,   302,   303,     0,
       0,     0,     0,   304,   305,     0,     0,   306,   307,   308,
       0,   309,     0,     0,   311,  -185,     0,   312,     0,     0,
     314,     0,     0,   316,   317,  3521,     0,     0,     0,   319,
       0,   320,   321,     0,   322,   323,   324,     0,     0,   326,
       0,     0,     0,     0,   328,   329,   330,     0,     0,   331,
       0,     0,     0,   332,     0,   334,     0,     0,   336,   337,
     338,     0,     0,     0,     0,     0,     0,   339,   340,     0,
     341,     0,     0,   342,     0,     0,     0,   344,     0,     0,
       0,   346,     0,   347,   348,   349,     0,     0,     0,   350,
     351,   352,   353,     0,   354,   355,     0,   356,   357,     0,
       0,   358,   359,   360,   361,   362,     0,     0,     0,     0,
       0,   363,     0,   364,     0,     0,     0,   366,   367,   368,
       0,     0,   369,   370,     0,     0,     0,     0,     0,     0,
       0,   372,     0,     0,  3609,     0,     0,     0,   375,   376,
       0,     0,     0,     0,     0,     0,     0,   377,     0,     0,
     378,     0,     0,   379,   380,   381,     0,     0,  -185,     0,
     382,     0,   383,     0,     0,     0,     0,   385,     0,     0,
       0,   122,  3522,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,  1648,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,  1649,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,  1650,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,  1651,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,   719,   720,
       0,   275,     0,     0,  1652,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,  3717,  3708,
    3718,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,  1653,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,  2338,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  2339,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,  1974,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,  1975,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,  2348,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  2349,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,  2338,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  2339,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,   723,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
     674,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,   675,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   676,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  2387,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,  2338,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,   566,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,  2328,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,  3652,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,  3653,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,   751,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  1118,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  1922,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,  1923,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,  2043,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,   567,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,  1922,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,   129,     0,     0,   130,
     131,   132,   133,     0,   134,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,   142,   143,     0,     0,   144,     0,   145,     0,
     146,   147,     0,   148,     0,   149,   150,   151,     0,   152,
       0,   153,   154,     0,   155,   156,   157,   158,   159,     0,
       0,   160,     0,   161,   162,     0,   163,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,   178,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,   183,   184,   185,
     186,     0,     0,   187,     0,   188,   189,   190,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
    1424,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,   208,   209,     0,   210,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,   225,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,  1425,   274,     0,     0,
       0,   275,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,   289,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,   310,   311,
       0,     0,   312,     0,   313,   314,   315,     0,   316,   317,
       0,     0,     0,   318,   319,     0,   320,   321,     0,   322,
     323,   324,   325,     0,   326,   327,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,   333,
     334,   335,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,   343,   344,     0,     0,   345,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,     0,   369,   370,     0,
       0,   371,     0,     0,     0,     0,   372,     0,     0,   373,
       0,   374,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,   384,     0,
       0,   122,   385,   123,   124,   125,   126,   127,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,   130,
     131,   132,     0,     0,     0,     0,   135,     0,     0,   136,
       0,     0,     0,   137,     0,     0,   138,   139,   140,     0,
     141,     0,     0,     0,     0,     0,   144,     0,   145,     0,
     146,     0,     0,     0,     0,   149,   150,     0,     0,   152,
       0,   153,   154,     0,     0,   156,     0,   158,   159,     0,
       0,   160,     0,   161,   162,     0,     0,   164,     0,     0,
       0,     0,   165,     0,     0,   166,     0,     0,     0,     0,
       0,     0,   167,   168,     0,     0,   169,     0,     0,     0,
       0,   170,     0,     0,     0,     0,     0,     0,   172,     0,
     173,     0,     0,     0,     0,     0,   174,     0,   175,   176,
     177,     0,     0,     0,     0,     0,     0,   179,   180,   181,
       0,     0,     0,   182,     0,     0,     0,     0,   184,   185,
     186,     0,     0,   187,     0,   188,   189,     0,     0,     0,
     191,     0,   192,     0,     0,   193,   194,     0,     0,   195,
     196,   197,     0,     0,     0,     0,     0,     0,     0,   199,
     200,     0,     0,   201,     0,   202,     0,     0,     0,     0,
       0,     0,   203,   204,     0,     0,   205,   206,     0,   207,
       0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
       0,   211,     0,     0,     0,   212,   213,   214,   215,     0,
       0,   216,   217,     0,     0,     0,   218,     0,     0,     0,
     219,     0,     0,     0,   220,     0,   221,   222,     0,   223,
     224,     0,     0,     0,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,     0,     0,   228,     0,     0,     0,
       0,     0,   229,     0,   230,     0,     0,   231,     0,   232,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     234,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,     0,
     251,   252,     0,     0,     0,   253,   254,   255,   256,   257,
       0,     0,   258,   259,     0,     0,   260,     0,   261,     0,
     262,     0,     0,   263,   264,   265,   266,   267,   268,   269,
       0,     0,   270,   271,     0,   272,   273,   274,     0,     0,
       0,     0,     0,     0,     0,     0,   276,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,   283,   284,   285,     0,   286,
       0,   287,     0,   288,     0,     0,     0,   290,     0,   291,
       0,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,   302,   303,     0,     0,     0,     0,   304,   305,
       0,     0,   306,   307,   308,     0,   309,     0,     0,   311,
       0,     0,   312,     0,     0,   314,     0,     0,   316,   317,
       0,     0,     0,     0,   319,     0,   320,   321,     0,   322,
     323,   324,     0,     0,   326,     0,     0,     0,     0,   328,
     329,   330,     0,     0,   331,     0,     0,     0,   332,     0,
     334,     0,     0,   336,   337,   338,     0,     0,     0,     0,
       0,     0,   339,   340,     0,   341,     0,     0,   342,     0,
       0,     0,   344,     0,     0,     0,   346,     0,   347,   348,
     349,     0,     0,     0,   350,   351,   352,   353,     0,   354,
     355,     0,   356,   357,     0,     0,   358,   359,   360,   361,
     362,     0,     0,     0,     0,     0,   363,     0,   364,     0,
       0,     0,   366,   367,   368,     0,     0,   369,   370,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   373,
       0,     0,     0,   375,   376,     0,     0,     0,     0,     0,
       0,     0,   377,     0,     0,   378,     0,     0,   379,   380,
     381,     0,     0,     0,     0,   382,     0,   383,     0,     0,
       0,     0,   385
};

static const yytype_int16 yycheck[] =
{
       7,   471,   504,   426,   451,   690,   914,   607,   509,   510,
    1318,  1034,    19,  1192,  1228,    22,   778,   779,   780,   981,
     531,   784,    29,   630,   762,  1791,  1978,   655,   632,  1096,
    2364,  1932,    39,  1874,  1343,  1318,  1956,  1194,  1195,  1196,
    1901,  1350,    49,    22,  1964,  2087,  1966,  1546,  1584,   656,
    1207,   655,  1925,  1926,  1927,  2105,  1404,  1226,   583,  2408,
    1559,  2313,  2112,  1634,  2706,  1111,  1220,     3,  2730,  1963,
    1061,   694,   694,     7,    16,  1916,     3,  1512,   589,    56,
      87,  1072,  1073,   845,  1939,  1940,   458,     3,    32,  1993,
    1994,  1362,  1363,     3,     3,  1199,  1200,  1998,  1202,     3,
     107,   108,     3,   110,  1261,     3,  1260,  1264,    87,   871,
     873,  1282,  2714,   876,   121,    18,     3,  2018,  2019,    58,
      18,    15,    16,   885,   886,   887,   514,    49,     3,  1104,
      15,    16,  2083,  1237,  1526,  1292,  1293,   657,    27,  1460,
    1297,    16,   121,    69,   115,   156,    63,    58,  1252,  1962,
      96,    15,    16,    18,   107,   129,   147,   895,   896,   897,
    1317,    34,  1319,    63,   492,   175,  1270,  1271,  1272,   907,
      52,  2994,   500,   501,   108,    95,   110,  1281,   130,  2721,
    1351,   145,    49,  1354,  1355,  1356,  1357,   698,  1359,  1360,
    1361,  1362,  1363,  1364,  1365,  1366,  1367,   229,    18,    15,
      16,   510,   111,    58,   532,    34,   111,   111,   631,  1639,
     205,    59,   301,  2815,    54,    15,    16,   214,  2079,   289,
     252,    20,   594,   253,   111,  1187,    20,   135,   729,   730,
     731,   170,    15,    16,  1988,  1989,  2760,  1637,    32,  2763,
      15,    16,   145,  3002,   263,    15,    16,   145,    75,    12,
      32,   175,    46,    15,    16,   236,    55,    56,  2782,   430,
     236,    55,    56,  2306,  2788,    15,    16,  3524,   249,    15,
      16,   217,   175,   601,   344,  2817,   413,   113,   112,   430,
     145,    15,    16,  3438,   115,   430,   217,   164,   466,   489,
     489,   324,    15,    16,   112,   287,    15,    16,    15,    16,
     335,  2943,    60,   445,  2828,   398,   175,   238,   530,  1217,
       8,   344,  3001,   214,   267,   170,   156,   253,   548,   159,
     464,    20,   352,   507,  2014,   145,   253,   483,    12,   485,
     203,    97,   172,    32,   100,  3158,     8,   253,    15,    16,
      15,    16,  2032,   253,   488,   575,   530,    46,   175,    15,
      16,   156,   574,   229,  3043,    27,    55,    56,   500,   221,
     229,   539,   125,   395,   399,    44,   243,   229,   204,   462,
    2719,   382,   169,   701,   203,   575,   575,  1948,    71,    72,
      61,    15,    16,    15,    16,   338,   234,    11,    15,    16,
     535,   536,   223,  1301,   228,    15,    16,  1305,   487,  1084,
      15,    16,   573,    10,   906,   412,   330,   214,   405,   252,
     228,    89,    11,   175,  3569,   422,  1595,   214,   111,   426,
    3082,  1600,   573,   512,   431,   352,    64,  1606,   573,   436,
    1609,  1038,   337,   372,   270,   416,   412,   746,    77,  1046,
     133,   125,   352,   270,   581,    55,    56,   466,    15,    16,
     270,   458,   431,   335,   156,  3712,  2998,   351,   335,   299,
     354,  1997,   436,   270,  2000,  2417,   164,  1074,  1075,   476,
      94,   466,   165,   437,  2347,  2011,  2012,  2371,   430,   486,
    1243,  1104,  1104,   394,  2020,   492,   516,   351,  1645,   411,
     354,   498,  1096,   500,   501,   357,  1021,   530,   505,   506,
    2036,  2405,  3026,   573,   405,   287,  2379,   486,  3150,   516,
     517,  3035,  1912,   112,   521,  1506,  2420,   372,  2089,   526,
     527,   200,   529,   530,   531,   532,    15,    16,  1039,    18,
     562,  3055,    15,    16,  1580,   351,  3060,  2036,   354,   485,
    1163,  1163,   382,  2079,   411,  2496,    15,    16,  1311,   466,
    1070,   351,   543,   524,   354,   179,   498,   510,   565,  2372,
    2373,   538,   985,  1955,   575,   575,   466,    66,   351,  1726,
     390,   354,  3395,  1730,   581,   382,   351,   382,   517,   354,
    2079,   351,   589,   590,   354,   511,  3188,   594,  3347,   351,
     214,  1116,   354,  1901,   601,   529,   530,  1918,    15,    16,
     972,   351,   581,   931,   354,   351,  1763,  2650,   354,   498,
     546,   590,  1826,  2947,  1828,  1353,   489,   351,  1901,   546,
     354,   573,   542,   995,   631,   577,   474,   530,   351,   573,
     546,   354,   351,   498,   351,   354,   546,   354,  1026,  1614,
      15,    16,   573,   579,    15,    16,  1815,  3189,  3190,  2403,
    1821,   559,   579,   575,   581,  1393,   984,  1965,  2088,   553,
     489,  1108,   517,   579,  1835,  1836,   994,  3269,   553,   579,
     579,   581,   575,   548,   351,   579,   351,   354,   579,   354,
     382,   579,  1965,   690,   578,   351,  2086,   445,   354,   553,
    1794,   698,   579,   524,   701,    15,    16,   704,   705,   575,
     393,    15,    16,   546,   579,    15,    16,    15,    16,   390,
    3372,   321,   574,  2021,   578,   353,   515,   351,  3320,   351,
     354,   515,   354,   528,   351,   491,   705,   354,   494,   430,
     550,   351,   529,   217,   354,   575,   351,   553,  2021,   354,
     418,   748,   381,  1166,   751,  1117,   425,   530,  2319,  2320,
     374,   361,  3086,   553,   402,   354,   347,   269,   574,   575,
     341,    15,    16,   113,   574,    15,    16,   374,   549,   748,
     553,  2644,   751,    19,   574,   575,  2696,    50,   553,  3441,
    2700,    15,    16,   553,   351,    58,  2647,   354,   131,   407,
    1969,   553,   575,   430,    15,    16,  2300,   217,   177,   574,
    1708,   426,  2696,   553,   574,   575,  2700,   553,   107,  2682,
      15,    16,  2716,   575,    15,    16,   515,  2658,   238,   553,
    1999,   349,  2001,   158,   574,   575,   528,  2006,   574,   575,
     553,   253,   430,   145,   553,    49,   553,    15,    16,   445,
     574,   575,   541,  2022,  1346,  2024,  2025,  2026,  2119,  2120,
     179,   574,   575,  3455,   461,  3497,   575,   574,   575,    12,
     172,   485,   351,   673,   512,   354,   430,   166,   351,  1777,
     116,   354,   573,   575,   573,  1503,   553,   376,   553,  2383,
      15,    16,   351,   560,    12,   354,   179,   553,  1495,  1400,
      15,    16,   404,   900,   501,   902,    15,    16,  1505,  1503,
     575,  1508,  1509,  1531,   203,  3429,   108,  3431,   574,   575,
    1333,    15,    16,    15,    16,  1440,  1939,  1940,   925,   553,
     270,   553,   270,    12,   931,  1450,   553,  1531,  2363,  2500,
     352,  1442,  1443,   553,   351,   542,   573,   354,   553,   172,
     574,   575,   574,   575,    37,  2987,   925,   574,   575,  1474,
     485,  2812,    59,    12,   574,   575,  2265,   575,  1949,   574,
     575,   968,   107,   970,  2819,   972,    15,    16,   267,  1392,
     580,  3021,   125,    64,     0,   573,   351,   984,   985,   354,
     351,   360,  1405,   354,   483,   258,   553,   994,   995,  2035,
     581,  1614,  1614,  2301,   575,  3344,   430,   125,  1005,  2170,
      15,    16,   337,   502,   489,  1967,  2110,   574,   575,   573,
    3672,  2115,  1537,   356,   361,   516,  3268,  2171,  2301,   325,
    1027,  1028,  1029,  1030,  1471,   227,  2130,    15,    16,   262,
    1037,   351,  1039,  2137,   354,   547,   125,   351,  1045,   338,
     354,   351,   390,   351,   354,   374,   354,   466,  2152,  2153,
    1029,  1030,   191,     3,   221,  2159,    15,    16,   149,   258,
    1067,    94,   229,  2167,   553,   444,   125,   267,   370,  3418,
     553,  1596,  1597,   574,  1599,  2423,  1601,  1602,  1603,  1604,
    1605,   374,  1607,  1608,   553,  2979,  2980,   506,  1067,   145,
    2259,   574,   575,  1027,  1028,   580,  1834,   351,  2971,  2268,
     354,   351,  2206,  1037,   354,   574,   575,  1114,  3442,   175,
    1117,  1045,    76,  3411,   581,  3413,   325,   351,  3160,   258,
     354,   335,   267,    15,    16,   437,   126,   234,    92,  2091,
     351,    15,    16,   354,  2705,  1114,   553,   336,   338,   573,
      15,    16,   489,   577,   374,   178,   351,    15,    16,   354,
     351,   485,  3486,   354,    15,    16,   485,   574,   575,  1166,
     226,  1168,   362,  1170,  1171,  1172,  1173,  1174,   175,   504,
    1177,  3221,  2276,   351,    15,    16,   354,  1184,   553,  1186,
      15,    16,   553,   489,   217,   520,   112,    38,  2724,   391,
     357,   287,   485,   338,  1173,    15,    16,   411,  1177,   574,
     575,  2737,   550,   574,   575,    15,    16,   513,  2707,  2708,
    2709,   510,   343,  1220,   538,  2123,   351,   541,   498,   354,
      15,    16,   436,  2131,   331,   191,   351,  3088,  2641,   354,
     361,   461,   351,   553,    67,   354,  1170,  1171,  2737,   553,
      15,    16,   289,   553,    16,   553,   253,   351,   138,   351,
     354,   573,   354,  1260,  3174,   575,    15,    16,   148,   581,
     574,   575,   353,   545,   574,   575,   574,   575,   443,   120,
     472,   501,    15,    16,    15,    16,   545,   559,   332,   333,
     489,    15,    16,    15,    16,   381,   352,    15,    16,   213,
     559,   175,   258,    15,    16,   575,   435,   344,  2711,   553,
      15,    16,   351,   553,   513,   354,    15,    16,   401,  2618,
     510,  1318,   542,   313,  2528,  2529,    15,    16,   498,   553,
     574,   575,  1792,   416,   574,   575,  1333,   325,   545,    15,
      16,  2749,   553,   485,  2752,  2753,   351,   170,   486,   354,
     574,   575,   559,  2651,   437,    15,    16,   522,   553,   445,
     217,  2769,   553,   574,   575,   175,   463,  1547,   489,   483,
    1550,   485,   217,   351,   573,   510,   354,   474,  2651,  1559,
     575,   213,    15,    16,   575,   553,   325,   172,  1568,   345,
      15,    16,   557,  3017,   217,  1392,  3020,   347,    15,    16,
    1397,  1398,   351,  1400,  1919,   354,  2704,   575,  1405,    15,
      16,  3518,  3519,   527,  1411,   238,  1413,    94,    15,    16,
     226,  1418,  1419,   175,  1421,    15,    16,   450,   553,    15,
      16,  2704,   573,  2731,  3058,   560,  1433,  3061,   553,  1436,
     581,    15,    16,   548,   553,  1442,  1443,  1444,  1445,  1418,
    1419,   270,  1421,   579,   551,  1452,  1453,  1454,  2731,   553,
     575,   553,   485,   486,  1433,   581,   575,  1436,   560,   351,
     350,   574,   354,  1470,   465,  1444,  1445,   351,   469,   435,
     354,   575,  1479,  1452,  1453,  1454,   351,  2002,  2003,   354,
     145,  3322,  2549,   351,   517,   461,   354,   574,   575,  1496,
     351,   489,   179,   354,   527,  3612,  3613,   573,  2023,   405,
    1507,    15,    16,  1926,   553,  1928,  1929,  2611,    55,    56,
     351,    11,  1519,   354,   152,   513,   351,    64,  1525,   354,
      15,    16,    15,    16,  2262,  2511,   575,   344,  1507,  2515,
       3,   351,    55,    56,   354,    20,   530,   390,   553,   372,
     489,   351,   373,    28,   354,    18,  1525,   420,    33,   349,
     403,   483,    15,    16,  1977,  1978,   351,  2004,   344,   354,
     575,   574,   575,   575,   513,   553,  3467,   567,   568,   569,
     570,   453,   454,   214,   456,   573,   351,  1584,  3451,   354,
     433,    15,    16,     3,   175,  1592,     6,   575,   420,  3541,
    3224,  2014,   351,    13,   553,   354,   574,   575,   488,   275,
     276,    47,  3368,    23,    24,   574,   575,  2821,   351,  2032,
     351,   354,  1619,   354,   263,    88,   575,   351,    47,   351,
     354,   575,   354,   351,   573,  1632,   354,   344,  1635,   351,
     574,   575,   354,    53,  2942,   516,   351,    57,   426,   354,
      15,    16,   351,   574,   575,   354,    15,    16,    68,   574,
     575,   567,   351,  1632,   486,   354,   150,    77,   263,  2942,
     436,   553,   506,    83,   573,   351,   574,   575,   354,   553,
      15,    16,   145,   253,   464,   465,    96,   467,   553,   469,
    2894,   351,  2105,   575,   354,   553,   172,   374,   466,  2112,
     574,   111,   553,   466,   114,   527,   169,   574,   575,   172,
     575,    15,    16,   123,   124,   574,   575,   575,   351,   129,
     542,   354,   553,  2313,   575,   466,   351,   137,   553,   354,
     396,   397,   195,   143,   351,   287,  2354,   354,   201,    15,
      16,    15,    16,   553,   575,   351,   574,   575,   354,   483,
     575,   214,   107,   553,   351,   263,   219,   354,   142,   169,
    2354,   351,    78,   226,   354,  2362,   575,  2743,   553,   574,
     575,    15,    16,   236,   346,   575,   192,   351,    15,    16,
     354,   574,   575,   479,  2275,   574,   249,     3,   553,   574,
     253,    15,    16,   574,   575,    15,    16,  2298,   111,   262,
     429,  2777,  2778,  1800,   553,   215,  2819,   217,   485,  2785,
     575,   166,   542,  2328,   224,   399,  2792,    15,    16,    54,
     553,    52,   553,    15,    16,   152,   575,    15,    16,   553,
    2924,   553,    15,    16,   573,   553,    15,    16,   580,  2252,
       3,   553,   575,  2344,   575,   211,   957,   351,   553,   960,
     354,   575,   963,   575,   553,    18,   575,   575,   574,   575,
     179,   324,   542,   575,   553,   542,   351,   179,   351,   354,
     575,   354,   574,   575,   290,   291,   575,   553,   294,   295,
     344,   344,   292,   575,    15,    16,   575,   574,   575,   352,
     581,    15,    16,   553,   573,    15,    16,   307,   351,   575,
     573,   354,   312,  2418,  1901,   573,    15,    16,  2708,  2709,
    2425,   374,   267,   574,   575,   575,   574,   575,    15,    16,
     553,   156,  1919,  1920,   159,    88,   573,   351,   553,  1926,
     354,  1928,  1929,   574,   575,   573,   553,   172,   175,   574,
     575,   574,   352,  1302,  1303,   575,  2674,   553,   358,   573,
     575,   361,   573,   416,    15,    16,   553,   573,   575,  3196,
    3197,  2660,  2661,   553,  2630,  2631,    15,    16,  1965,   575,
    2932,  2933,   573,   436,   384,   385,   581,   387,   575,   553,
    1977,  1978,   145,   338,   573,   575,   351,   489,   573,   354,
    1987,   401,   351,   573,   573,   354,  1993,  1994,   573,   581,
    1997,   575,   573,  2000,  2417,    15,    16,   573,   471,   172,
      15,    16,   573,   423,  2011,  2012,   351,  2014,   573,   354,
      15,    16,  2974,  2020,  2021,   573,   573,   573,   573,   573,
      15,    16,   195,  2030,   573,  2032,    15,    16,   201,  2036,
    2037,   573,    15,    16,   573,   107,   573,   351,   573,   553,
     354,   573,   573,   516,    15,    16,   219,   573,    15,    16,
     575,  2030,   573,   226,   299,    47,   529,   530,   553,   575,
     553,   575,   573,   236,   573,   351,   573,   351,   354,   573,
     354,  2078,  2079,   546,   573,   548,   249,   573,   580,   574,
     253,   573,   575,  3391,   573,  3015,  3016,   507,   483,   262,
     553,   573,   573,   573,   166,   573,   516,   351,  2105,  2078,
     354,   574,   575,  3033,   351,  2112,   579,   354,   573,  3039,
     548,   574,   573,   573,    15,    16,   573,   351,  2125,   553,
     354,   351,   573,   573,   354,   573,   573,  3284,  3307,  3308,
    3309,  3310,  3062,    15,    16,  3065,   573,   382,   573,   287,
     574,    15,    16,   351,   258,   510,   354,    15,    16,   351,
     573,   324,   354,   351,   573,   575,   354,   573,   351,   579,
     573,   354,   351,   573,  2171,   354,    15,    16,   573,   573,
     573,   344,    15,    16,    15,    16,   573,   573,   553,   352,
      15,    16,    15,    16,   553,   573,   573,   573,  3496,    15,
      16,   573,   573,   573,  3298,   267,    15,    16,   287,   574,
     411,   374,   413,   573,   415,   574,   417,   573,   553,   573,
     351,    15,    16,   354,   573,   573,   573,   351,   573,   573,
     354,   351,   573,   573,   354,   573,    15,    16,   575,   574,
     573,   573,   351,   573,   573,   354,   229,    15,    16,   553,
    2663,    15,    16,   416,   351,  2252,   573,   354,    15,    16,
     575,   575,   573,    15,    16,   573,  2679,    15,    16,   498,
     574,   573,   573,   436,   573,   573,   338,   553,   573,   553,
    2277,   573,   573,   573,  2281,   573,  2283,  2284,  2285,  2286,
     351,  2806,   573,   354,    15,    16,   573,  2294,   574,   498,
     574,  2298,   351,   573,  2301,   354,    15,    16,   471,   553,
    2801,    15,    16,    15,    16,   573,   553,   573,  2315,  2316,
    2317,   573,   573,   573,   573,  2294,   573,   573,   573,   553,
     574,  2328,   533,   553,   573,    15,    16,  2334,   489,  2336,
     573,   351,   567,   573,   354,   573,   351,  2344,   575,   354,
     574,   172,   575,   516,   574,   553,   351,    15,    16,   354,
     575,   553,   230,  3661,   481,   553,   351,   530,   160,   354,
     553,   172,   351,   575,   553,   354,   574,   523,   351,    15,
      16,   354,   574,   546,  3682,   548,   574,   447,  3661,   575,
     351,   574,   363,   354,   351,   574,   574,   354,   575,   573,
    3698,   145,   575,    15,    16,   145,   145,   145,  2405,    15,
      16,   574,   575,   145,   145,   145,   579,   145,    15,    16,
    2417,   145,   553,  2420,   525,  3698,   145,   145,  3597,   553,
     145,    15,    16,   553,  3109,   145,   575,  2928,   145,   145,
    3193,  3194,  3195,   574,   553,   574,    45,   344,   510,    64,
     574,    15,    16,   179,   574,   175,   553,  2454,  2973,    12,
     351,    15,    16,   354,  2461,   574,   574,  2464,    15,    16,
     489,  2468,  2469,    15,    16,  2472,  1419,   574,  1421,   351,
     107,  3233,   354,  2480,   111,   574,   125,   351,    15,    16,
     354,  2488,   553,   351,     9,  2464,   354,    15,    16,    15,
      16,  2498,   574,   574,   553,   545,   574,    15,    16,  1452,
    1453,  1454,   351,   574,   581,   354,    15,    16,   351,  2488,
     351,   354,   573,   354,   566,   574,   351,  3042,   351,   354,
     252,   354,    15,    16,   575,   351,   390,   546,   354,   166,
    3215,   218,   351,   553,  2957,   354,   192,   581,   553,    15,
      16,   175,   574,  3228,    15,    16,  3071,   351,   553,   445,
     354,    15,    16,   381,   574,    15,    16,   436,   553,   574,
     172,   575,   351,   575,   553,   354,   203,   141,    45,   574,
     553,  3018,   461,   351,   461,   461,   354,   351,   461,   574,
     354,   461,   553,   429,   351,   574,   553,   354,    67,   351,
      20,   574,   354,   351,    15,    16,   354,   237,  3021,   498,
     122,  3363,    32,   574,    15,    16,   237,   574,   484,   484,
    3135,   122,    45,    28,   575,   573,    46,   530,  3041,   581,
     351,   574,   574,   354,   575,    55,    56,   574,   574,    12,
     267,   574,   351,   574,   574,   354,   567,   351,   574,   351,
     354,   574,   354,   581,  2651,  2652,   175,  2654,   574,   573,
     575,   574,   553,   574,    68,    70,  2663,    40,   575,   574,
     574,   351,  2669,   574,   354,   574,    80,   575,  3268,   574,
     574,   553,  2679,   574,   574,   573,    12,   574,   437,   553,
    2687,   574,   175,   351,   575,   553,   354,   107,   498,   574,
     574,    32,   574,   574,   262,   498,   573,  2704,    81,   570,
     574,   338,   574,    86,   553,   351,   574,   128,   354,  2716,
     553,   573,   553,   498,  2721,    56,   581,  2724,   553,   489,
     553,    88,   581,   575,  2731,   574,   141,   553,   550,   351,
    2737,   574,   354,   574,   553,   351,   573,   258,   354,   574,
    3163,   574,   107,   498,   351,  3430,   166,   354,   574,   553,
       7,   349,  3253,  3254,   226,   574,    97,   351,   175,   100,
     354,   581,    19,   175,   553,    22,   175,   108,   175,   581,
     574,   233,    29,  3458,  3459,   553,  3461,   351,   338,   553,
     354,   575,    39,   203,   548,   574,   553,   351,   236,   125,
     354,   553,    49,   236,   351,   553,   574,   354,  3221,   351,
     574,   166,   354,    88,   355,   303,    96,   574,    96,   238,
    2817,   238,   574,   573,   351,   581,   574,   354,  3503,  3727,
    3505,  3506,   553,   351,   489,   351,   354,   241,   354,   573,
      87,   413,   158,   351,   553,   352,   354,   574,   203,   553,
     573,   553,   351,   574,    16,   354,   573,   267,   231,   567,
     107,   108,   219,   110,   225,   574,   338,   338,   351,   574,
     574,   354,   574,   553,   121,   574,   574,   574,   204,   236,
     338,    94,  3373,   510,   141,   351,    16,   574,   354,   581,
     351,   581,   249,   354,   574,   553,   581,   351,   574,   574,
     354,   351,   574,   567,   354,   573,   214,   311,   344,  3369,
     575,   574,   267,   175,   581,   524,   574,   553,   229,    64,
     250,    58,  2919,   275,   236,   575,     3,   300,   338,   236,
      67,   335,   344,   238,   238,   573,    13,    14,   574,    18,
     351,   553,    79,   354,   219,  2942,  3438,   553,   344,    26,
     351,    28,   575,   354,   509,    18,   553,   574,    18,   573,
    2957,   236,   574,   253,   126,   370,   179,   324,   574,   553,
      47,    48,   573,   430,   249,   573,    53,   574,   227,   436,
      57,    58,   227,   338,   574,   389,   359,   392,   574,   553,
     574,   574,    88,    70,   574,   326,   126,   574,   574,   553,
     581,  2998,   575,   574,   217,   574,   553,   574,   574,   574,
      87,   553,   417,   574,   574,   574,   332,   333,   575,   581,
     574,   337,   574,   574,  3021,   574,   553,   574,   383,   106,
     575,   386,   574,   170,   132,   553,   247,   553,   115,   116,
     117,   178,   575,   453,  3041,   553,   430,   574,   195,   324,
     438,   128,   129,   573,   553,   145,   574,   461,   574,   416,
     465,  3498,   355,   573,   236,   574,   574,   236,   573,  3066,
     553,  3068,   575,   111,   151,   574,   449,  3569,   535,   536,
     217,  3572,  3079,   111,  3081,   574,   369,   553,   573,   581,
     105,   168,   553,   509,  3091,   515,   574,   573,   575,   553,
     510,   238,   338,   553,  2284,  2285,  2286,   480,   574,   574,
    3079,   574,   443,   574,   471,   192,   573,   537,   538,   574,
     574,   574,   199,   219,   574,   202,   432,  3618,  3541,   455,
     456,   457,   458,   459,   460,  2315,  2316,  2317,  3135,   126,
     236,   416,   553,    41,   381,   471,   223,   574,   338,   574,
     574,   313,   553,   249,   548,   510,    23,   370,   226,   174,
     574,   374,   239,   494,    45,   412,  3163,   575,   581,   201,
     126,   310,   575,   390,   489,   422,    23,    24,   236,   426,
     257,   530,   530,   313,   431,   262,  3183,   489,   504,   436,
     573,   522,  3189,  3190,   209,   172,   471,    64,   573,   126,
      32,    68,   573,   573,   520,   541,   541,  3204,    55,    56,
      57,   458,   111,  3705,   573,   524,   238,    64,   238,   337,
     548,    68,  3562,   338,  3221,   575,   338,   574,   324,   476,
      77,   574,   574,   574,   574,   372,   574,  3729,   575,   486,
     574,   310,   154,   575,   111,   492,   489,   574,   344,    96,
     574,   498,   238,   500,   501,   489,   489,    34,   505,   506,
      66,   574,  3259,  3603,   111,  3678,    16,   114,   236,   516,
     517,   348,   530,   486,   521,   574,   530,   439,   440,   526,
     527,   334,   529,   530,   531,   532,   536,   302,   501,   575,
     172,   306,   413,   370,   338,   574,   143,   574,   349,   314,
      34,   524,   379,   485,  3644,   255,   276,   573,   573,   439,
     440,  3651,   573,   450,   527,    58,   349,    58,   565,   574,
     416,   574,   399,   100,   401,   402,   313,  3667,   405,   542,
     107,   408,   574,   410,   581,   374,    45,    45,   415,   138,
     417,    45,   589,   590,   145,   394,     5,   594,   349,   426,
     349,   134,   574,   430,   601,   575,    45,   313,    45,   436,
      45,  3701,   574,  3703,   441,   380,   100,   575,   445,    88,
     217,   238,   121,   107,   424,   471,    16,   224,   545,    28,
     517,   158,   582,   280,   631,   573,   313,   175,   465,   166,
     545,    28,   469,   574,  3391,  3392,   226,   145,   574,   141,
     579,   563,   564,   565,   566,   567,   568,   569,   570,   575,
     213,   545,   141,   428,  3411,   269,  3413,   582,  3415,  3416,
     579,   109,   214,  3392,   158,   561,   203,   579,   505,   338,
     573,  3428,   166,   563,   564,   565,   566,   567,   568,   569,
     570,   141,   575,   690,   521,   292,   560,   524,   199,   575,
     579,   698,   529,   255,   701,   436,   561,   704,   705,  3456,
     307,   404,   172,   560,   547,   332,   333,   172,   111,   203,
     337,   126,   536,   172,  2654,   552,   173,   344,  1610,  1848,
     696,  3537,  3081,   439,   440,  3078,  3729,     4,  3258,  3694,
     267,  3700,     9,    10,  3491,  3624,   573,  3581,  3624,  3496,
     219,   748,    23,    24,   751,   372,  3613,  3589,  3588,  3087,
      27,   358,   439,   440,   361,    32,  1163,   236,  3515,    36,
     405,  3518,  3519,  3520,  2810,  1580,  3187,  2474,  2079,   544,
     249,  2737,  1584,   267,    55,    56,    57,   384,   385,  1546,
     387,   556,  1991,    64,  3541,  2724,  2039,    68,   325,  3213,
    2760,  2760,  2793,  3004,  3050,  3552,    77,   334,  3041,  2725,
     337,   338,  2679,   126,  3561,  3562,  3417,   434,    88,  3427,
    3207,  3568,  3352,  2514,   229,    96,   423,   126,   565,   566,
     567,   568,   569,   570,  1179,  3091,  3583,  3228,  3585,  2035,
     111,   325,  1514,   114,  3591,  1081,  1896,  1444,   705,   116,
    2294,  1879,   689,   337,   338,   324,  3603,   563,   564,   565,
     566,   567,   568,   569,   570,  3612,  3613,  1910,   470,  1159,
    3317,   619,   143,  3620,  1459,   344,  2927,  3135,  1257,  2928,
    3627,  2694,  2113,  3416,  1303,  2269,  3633,  3634,   565,   566,
     567,   568,   569,   570,  1207,  3184,  2731,  3644,  3618,  3163,
     517,  1915,   972,   900,  3651,   902,   995,  1875,   313,  1900,
     507,  2942,  2704,  2646,  3661,  2645,  3663,  3664,  3682,   516,
    3667,  3496,  3669,   460,  3671,   751,   522,   451,   925,  2454,
     229,  3678,  1184,  1000,   931,  3682,  3571,  1504,    12,    13,
    2636,  3688,  3404,  3698,  1410,  3592,   217,   416,  3465,   219,
    3043,  3698,  1465,   224,  3701,  2687,  3703,  2968,  3705,  2651,
    1013,  3171,   489,   443,   491,   145,   236,   494,  3715,  3716,
    2346,   968,  3719,   970,  1436,   972,   602,   504,   575,   249,
    1003,   252,  3729,   510,   164,   965,   513,   984,   985,  3305,
    1168,  2281,  3311,   444,   606,   511,  2246,   994,   995,  1328,
     313,   402,   471,  2602,   184,   489,   402,   491,  1005,  2077,
     494,   488,  2807,    87,   313,   510,  1013,  3084,   198,    -1,
     504,   292,   510,   510,    -1,    -1,   510,    -1,   126,   513,
    1027,  1028,  1029,  1030,   439,   440,   307,    -1,   565,   566,
    1037,   115,  1039,    -1,    -1,    -1,    -1,    -1,  1045,    -1,
    2741,  2742,    -1,    -1,   324,   129,    -1,    -1,  2749,    -1,
      -1,  2752,  2753,   243,   244,    -1,    -1,    -1,    -1,    -1,
    1067,    -1,    -1,    -1,   344,    -1,    -1,   151,  2769,    -1,
      -1,   565,   566,    -1,    -1,    -1,    -1,   358,    -1,   163,
     361,   271,  2783,    -1,    -1,    -1,    -1,  2788,  2789,  2790,
    2791,    -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,
      -1,    -1,    -1,   384,   385,    -1,   387,  1114,   192,    -1,
    1117,    -1,    -1,    -1,    -1,    -1,   439,   440,    -1,    -1,
      -1,   229,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
     439,   440,    -1,   217,    -1,    -1,   416,    -1,    -1,   223,
     330,   418,   423,    -1,   252,    -1,    -1,    -1,   563,   564,
     565,   566,   567,   568,   569,   570,   433,    -1,    -1,  1166,
      -1,  1168,   439,  1170,  1171,  1172,  1173,  1174,    -1,    -1,
    1177,    -1,    -1,    -1,    13,    14,    -1,  1184,   262,  1186,
      -1,   371,   459,    -1,    -1,    -1,    -1,    26,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    23,    24,    -1,   145,   146,
     206,   207,   208,   209,    -1,   313,    -1,    -1,    47,    48,
      -1,    -1,   205,  1220,    53,    -1,    -1,    -1,    57,    58,
      -1,    -1,    -1,    -1,   332,   333,   507,    55,    56,    57,
      -1,    70,    -1,    -1,    -1,   516,    64,   184,    -1,   548,
      68,   564,   565,   566,   567,   568,   569,   570,    87,    77,
      -1,   198,    -1,  1260,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,    -1,   106,    96,    -1,
     263,    -1,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,   111,    -1,   232,   114,   395,    -1,   128,
     129,   375,   573,    -1,   287,    -1,   302,   244,   304,   305,
     306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,
     394,  1318,   151,    -1,    -1,   143,   400,    -1,    -1,    -1,
      -1,    -1,   406,    -1,   271,    -1,  1333,    -1,    -1,   168,
      -1,   439,   440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     448,    -1,    -1,    -1,    -1,    -1,   430,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,   441,   442,    -1,
     199,    -1,    -1,   202,    -1,    -1,    -1,    -1,    12,    13,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
     373,   328,    -1,    -1,   223,  1392,    -1,    -1,   381,   217,
    1397,  1398,    -1,  1400,   478,    68,   224,    -1,  1405,    -1,
     239,    -1,    -1,    -1,  1411,    -1,  1413,    80,    -1,    31,
      32,  1418,  1419,    -1,  1421,    37,   409,    39,   257,    41,
      42,   427,   428,   262,    -1,    -1,  1433,    -1,    -1,  1436,
      -1,    -1,    -1,    -1,    56,  1442,  1443,  1444,  1445,    -1,
     524,    -1,   526,    87,    -1,  1452,  1453,  1454,   121,    -1,
      -1,    -1,   445,    -1,   562,   563,   564,   565,   566,   567,
     568,   569,   570,  1470,   292,    -1,    -1,    -1,    -1,    -1,
      -1,   115,  1479,   466,    -1,    97,    -1,    -1,   100,   307,
      -1,    -1,    -1,    -1,    -1,   129,   108,    -1,    -1,  1496,
     483,    -1,   485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1507,    -1,    -1,    -1,    -1,   127,    -1,   151,    -1,   348,
      -1,    -1,  1519,    -1,    -1,    -1,    -1,    -1,  1525,   163,
      -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   370,    -1,   361,    -1,    -1,    -1,    -1,   544,    -1,
     379,    -1,    -1,   165,    -1,   167,    -1,    -1,   192,   555,
     556,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,   387,
     399,    -1,   401,   402,   186,   187,   405,    -1,   241,   408,
      -1,   410,    -1,   217,    -1,    -1,   415,  1584,   417,   223,
      -1,    -1,    -1,    -1,    -1,  1592,    -1,   426,    -1,    -1,
      -1,   430,    -1,    -1,    -1,   423,    -1,   436,    -1,    -1,
      -1,    -1,   441,    -1,    -1,   227,   445,    -1,    -1,    -1,
      -1,    -1,  1619,    -1,    -1,    -1,    -1,    -1,   262,    -1,
      -1,    -1,    -1,    -1,    -1,  1632,   465,    -1,  1635,    -1,
     469,    -1,    -1,    -1,   256,    -1,    -1,    -1,   311,    -1,
      -1,    -1,    -1,   265,   266,    -1,   268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
     333,    -1,   335,  3491,    -1,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,    -1,    -1,   507,
      -1,    -1,   521,    -1,    -1,   524,    -1,    -1,   516,    -1,
     529,    -1,    13,    -1,    -1,   317,   318,   319,    -1,    -1,
      -1,   323,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   552,    -1,    -1,   389,   339,   340,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   375,    -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,
    3568,    -1,    -1,   365,    -1,   367,    30,    -1,    32,    33,
     394,    -1,    -1,    -1,    -1,  3583,   400,  3585,    -1,    -1,
      -1,    -1,   406,  3591,    -1,    -1,    87,    -1,    -1,   391,
      -1,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    67,    -1,    -1,   430,    -1,   461,    -1,
      -1,    -1,    -1,  1800,   115,    -1,    -1,   441,   442,  3627,
      -1,    85,    -1,    87,    -1,    -1,  3634,    -1,   129,    -1,
      -1,    95,   434,    -1,   436,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   446,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,   478,    -1,  3664,    -1,    -1,    -1,
      -1,  3669,   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,   142,   143,
    3688,    -1,    -1,   147,    -1,    -1,    -1,    -1,   490,   491,
      -1,   192,   494,   495,   496,   497,    -1,    -1,    -1,    -1,
     524,    -1,   526,    -1,    -1,    -1,    -1,  3715,  3716,    -1,
      57,  3719,    -1,   177,  1901,   179,   217,    -1,    -1,    -1,
      -1,    68,   223,    -1,    -1,    -1,    -1,   191,    -1,   193,
      77,    -1,  1919,  1920,    -1,   537,   538,    -1,    -1,  1926,
      -1,  1928,  1929,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      -1,    -1,   216,   217,   556,    -1,   220,    -1,     6,    -1,
      -1,   262,    -1,    -1,   111,    13,    -1,   114,    -1,    -1,
      -1,    -1,    -1,   237,    -1,    23,    24,    -1,  1965,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1977,  1978,    -1,    -1,   258,    -1,   143,    -1,    -1,   263,
    1987,    -1,    -1,    -1,    -1,    53,  1993,  1994,    -1,    57,
    1997,    -1,    -1,  2000,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,   287,  2011,  2012,    -1,  2014,    -1,    77,
      -1,    -1,    -1,  2020,  2021,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2030,    -1,  2032,    -1,    -1,    96,  2036,
    2037,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,   329,   114,    -1,    -1,    -1,
     217,    -1,    -1,    -1,   375,   123,    -1,   224,    -1,    -1,
      -1,   129,    -1,   347,    -1,    -1,    -1,    -1,    -1,   137,
      -1,  2078,  2079,   394,    -1,   143,    -1,    -1,    -1,   400,
      -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,   373,
     374,    -1,    -1,   377,   378,    -1,    -1,    -1,  2105,    -1,
      -1,   169,   524,    -1,    -1,  2112,    -1,    -1,    -1,   430,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2125,    -1,
     441,   442,    -1,    -1,    -1,   292,   273,   274,   275,   276,
     277,   278,    -1,    -1,   281,   282,   283,   284,   285,   286,
     307,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
      -1,   435,    -1,    -1,    -1,   577,   224,   478,    -1,    -1,
      -1,   445,    -1,    -1,  2171,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,    -1,    -1,
      -1,   358,    -1,    -1,   361,    -1,  1536,    -1,    -1,    -1,
      -1,   485,    -1,   524,    -1,   526,    -1,    -1,  1548,  1549,
      -1,  1551,  1552,  1553,    -1,    -1,  1556,   384,   385,    -1,
     387,  1561,    -1,    -1,   292,  1565,  1566,  1567,    -1,    -1,
    1570,  1571,  1572,  1573,  1574,    -1,  1576,  1577,  1578,   307,
      -1,    -1,    -1,    -1,   312,  2252,    -1,    -1,    -1,   396,
     397,    -1,    -1,    -1,  3491,   539,   423,    -1,    -1,   543,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2277,    -1,    -1,    -1,  2281,    -1,  2283,  2284,  2285,  2286,
      -1,  3518,  3519,    -1,   352,    -1,   708,  2294,    -1,    -1,
     358,  2298,    -1,   361,  2301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2315,  2316,
    2317,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,   387,
      -1,  2328,    -1,    -1,  3561,  3562,    -1,  2334,    -1,  2336,
      -1,  3568,    -1,   401,    -1,    -1,    -1,  2344,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,  3583,    -1,  3585,   516,
      -1,    -1,    -1,    -1,  3591,   423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3603,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3612,  3613,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3627,    -1,    -1,    -1,    -1,    -1,   818,  3634,  2405,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3644,    -1,    -1,
    2417,    -1,    -1,  2420,  3651,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   844,    -1,    -1,    -1,    -1,  3664,    -1,    -1,
    3667,    -1,  3669,    -1,    -1,    -1,    -1,    -1,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2454,   516,    -1,
      -1,  3688,    -1,    -1,  2461,    -1,    -1,  2464,    -1,    -1,
      -1,  2468,  2469,    -1,  3701,  2472,  3703,    -1,    -1,    -1,
      -1,    -1,   894,  2480,    -1,    -1,   898,    -1,  3715,  3716,
      -1,  2488,  3719,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1022,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2651,  2652,    -1,  2654,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2663,    -1,    -1,    -1,
      -1,    -1,  2669,    -1,    -1,  2005,    -1,    -1,    -1,    -1,
      -1,    -1,  2679,    -1,    -1,    -1,  2016,    -1,    -1,    -1,
    2687,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2704,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2716,
      -1,    -1,    -1,    -1,  2721,    -1,    -1,  2724,    -1,    -1,
      -1,    -1,    -1,    -1,  2731,    -1,    -1,    -1,    -1,    -1,
    2737,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1188,  1189,  1190,    -1,
      -1,    -1,    -1,    -1,    -1,  1197,  1198,    -1,    -1,  1201,
      -1,  1203,  1204,  1205,  1206,    -1,    -1,    -1,  1210,    -1,
      -1,  1213,  1214,    -1,  1216,    -1,  1218,  1219,    -1,  1221,
    1222,  1223,  1224,  1225,    -1,  1227,    -1,  1229,  1230,  1231,
    2817,  1233,  1234,  1235,  1236,    -1,  1238,  1239,    -1,  1241,
      -1,    -1,  1244,  1245,  1246,    -1,  1248,  1249,  1250,  1251,
      -1,  1253,  1254,  1255,  1256,    -1,    -1,    -1,    -1,    -1,
    1262,  1263,    -1,  1265,  1266,  1267,  1268,  1269,    -1,    -1,
      -1,    -1,  1274,    -1,  1276,  1277,  1278,  1279,  1280,    -1,
      -1,  1283,  1284,  1285,  1286,  1287,  1288,    -1,  1290,  1291,
      -1,    -1,  1294,  1295,  1296,    -1,  1298,    -1,  1300,    -1,
      -1,    -1,  1304,    -1,  1306,  1307,    -1,    -1,    -1,    -1,
    1312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1320,  1321,
    1322,    -1,    -1,    -1,    -1,    -1,    -1,  1329,    -1,    -1,
    1332,    -1,  2919,    -1,    -1,    -1,    -1,  1339,  1340,  1341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2942,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2957,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3021,    -1,    -1,  1439,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3041,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3066,
      -1,  3068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3079,    -1,  3081,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3091,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3163,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1594,    -1,    -1,    -1,  3183,    -1,    -1,    -1,
      -1,    -1,  3189,  3190,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3204,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3221,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1772,  1773,  1774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1789,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3391,  3392,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1815,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3411,    -1,  3413,    -1,  3415,  3416,
      -1,    -1,    -1,    -1,    -1,  1837,    -1,    -1,    -1,    -1,
      -1,  3428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3515,    -1,
      -1,    -1,    -1,  3520,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3541,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3620,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3633,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3661,    -1,  3663,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3671,    -1,    -1,    -1,    -1,    -1,
    2092,  3678,    -1,  2095,    -1,  3682,  2098,  2099,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2111,
      -1,  3698,  2114,    -1,    -1,    -1,    -1,    -1,  3705,    -1,
      -1,    -1,    -1,    -1,    -1,  2127,    -1,  2129,    -1,    -1,
      -1,  2133,    -1,  2135,  2136,    -1,    -1,    -1,  2140,    -1,
    2142,  2143,  3729,  2145,    -1,    -1,  2148,    -1,  2150,  2151,
      -1,    -1,    -1,    -1,  2156,  2157,    -1,    -1,  2160,    -1,
    2162,    -1,  2164,    -1,  2166,    -1,  2168,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2179,  2180,    -1,
      -1,  2183,    -1,  2185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2193,  2194,    -1,  2196,    -1,  2198,    -1,    -1,  2201,
    2202,  2203,    -1,  2205,    -1,    -1,    -1,    -1,  2210,  2211,
    2212,  2213,    -1,    -1,    -1,    -1,  2218,  2219,  2220,    -1,
    2222,    -1,  2224,    -1,  2226,    -1,  2228,    -1,  2230,    -1,
      -1,    -1,    -1,    -1,    -1,  2237,    -1,  2239,    -1,    -1,
    2242,  2243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2268,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2337,    -1,    -1,    -1,    -1,
    2342,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2386,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2400,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2577,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2587,    -1,  2589,    -1,  2591,
      -1,    -1,    -1,    -1,    -1,  2597,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2620,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2842,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2852,    -1,    -1,    -1,    -1,    -1,  2858,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2867,  2868,    -1,    -1,    -1,
      -1,  2873,    -1,    -1,    -1,  2877,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2890,    -1,
      -1,    -1,    -1,    -1,  2896,    -1,    -1,  2899,  2900,    -1,
    2902,  2903,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2916,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2983,  2984,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2994,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3158,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3280,    -1,
      -1,    -1,    -1,    -1,  3286,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3321,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3331,
      -1,  3333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3395,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3445,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3468,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3557,  3558,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3577,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3586,    -1,    -1,    -1,    -1,    -1,
      -1,  3593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,  3631,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,  3645,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    37,    38,    -1,    40,    41,    42,    43,
      44,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    -1,    80,    81,    -1,    83,
      84,    85,    86,    -1,  3706,    89,    90,    91,    -1,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,   111,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,   166,    -1,   168,    -1,    -1,   171,    -1,   173,
     174,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,   196,   197,    -1,   199,   200,    -1,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242,   243,
      -1,   245,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,    -1,   258,   259,    -1,   261,    -1,   263,
     264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
      -1,   515,    -1,    -1,   518,   519,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
     554,    -1,   556,    -1,    -1,    -1,    -1,   561,    -1,    -1,
      -1,   565,   566,    -1,    -1,    -1,    -1,   571,    -1,   573,
      -1,    -1,   576,   577,    -1,    -1,   580,   581,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      37,    38,    -1,    40,    41,    42,    -1,    44,    -1,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    -1,    80,    81,    -1,    83,    84,    85,    86,
      -1,    -1,    89,    90,    91,    -1,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,   111,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
      -1,   168,    -1,    -1,   171,    -1,   173,   174,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,   196,
     197,    -1,   199,   200,    -1,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,    -1,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   241,   242,   243,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
      -1,   258,   259,    -1,   261,    -1,   263,   264,    -1,    -1,
     267,    -1,    -1,    -1,    -1,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,    -1,   340,   341,    -1,   343,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
      -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,
      -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,
     457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,    -1,   515,    -1,
      -1,   518,   519,   520,    -1,    -1,   523,    -1,   525,    -1,
     527,   528,    -1,    -1,   531,   532,   533,   534,   535,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,    -1,    -1,
      -1,    -1,   549,    -1,   551,   552,    -1,   554,    -1,   556,
      -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,   565,   566,
      -1,    -1,    -1,    -1,   571,    -1,   573,    -1,    -1,   576,
     577,    -1,    -1,   580,   581,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    37,    38,    -1,
      40,    41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    -1,
      80,    81,    -1,    83,    84,    85,    86,    -1,    -1,    89,
      90,    91,    -1,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,   111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,   166,    -1,   168,    -1,
      -1,   171,    -1,   173,   174,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,    -1,   196,   197,    -1,   199,
     200,    -1,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   241,   242,   243,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,    -1,   258,   259,
      -1,   261,    -1,   263,   264,    -1,    -1,   267,    -1,    -1,
      -1,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,    -1,
     340,   341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
      -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,    -1,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,    -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,
      -1,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
      -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,
      -1,    -1,   462,    -1,    -1,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,    -1,   515,    -1,    -1,   518,   519,
     520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,
      -1,   531,   532,   533,   534,   535,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,
      -1,   551,   552,    -1,   554,    -1,   556,    -1,    -1,    -1,
      -1,   561,    -1,    -1,    -1,   565,   566,    -1,    -1,    -1,
      -1,   571,    -1,   573,    -1,    -1,   576,   577,    -1,    -1,
     580,   581,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    32,
      33,    34,    35,    36,    37,    38,    -1,    40,    41,    42,
      -1,    44,    -1,    46,    47,    -1,    -1,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    -1,    80,    81,    -1,
      83,    84,    85,    86,    -1,    -1,    89,    90,    91,    -1,
      93,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,   111,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,   168,    -1,    -1,   171,    -1,
     173,   174,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,    -1,   196,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242,
     243,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,    -1,   258,   259,    -1,   261,    -1,
     263,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,    -1,   340,   341,    -1,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,    -1,    -1,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,    -1,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,
     433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,
      -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,
      -1,    -1,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,    -1,   515,    -1,    -1,   518,   519,   520,    -1,    -1,
     523,    -1,   525,    -1,   527,   528,    -1,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,
      -1,   554,    -1,   556,    -1,    -1,    -1,    -1,   561,    -1,
      -1,    -1,   565,   566,    -1,    -1,    -1,    -1,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,   581,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    32,    33,    34,    35,
      36,    37,    38,    -1,    40,    41,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    -1,    80,    81,    -1,    83,    84,    85,
      86,    -1,    -1,    89,    90,    91,    -1,    93,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,   111,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
     166,    -1,   168,    -1,    -1,   171,    -1,   173,   174,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,    -1,
     196,   197,    -1,   199,   200,    -1,   202,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,   242,   243,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,    -1,   258,   259,    -1,   261,    -1,   263,   264,    -1,
      -1,   267,    -1,    -1,    -1,    -1,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,    -1,   340,   341,    -1,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,    -1,    -1,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,    -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,
      -1,    -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,
      -1,   447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,
     456,   457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,    -1,   515,
      -1,    -1,   518,   519,   520,    -1,    -1,   523,    -1,   525,
      -1,   527,   528,    -1,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,    -1,
      -1,    -1,    -1,   549,    -1,   551,   552,    -1,   554,    -1,
     556,    -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,   565,
     566,    -1,    -1,    -1,    -1,   571,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,   581,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    32,    33,    34,    35,    36,    37,    38,
      -1,    40,    41,    42,    -1,    44,    -1,    46,    47,    -1,
      -1,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      -1,    80,    81,    -1,    83,    84,    85,    86,    -1,    -1,
      89,    90,    91,    -1,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,   111,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,   166,    -1,   168,
      -1,    -1,   171,    -1,   173,   174,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,    -1,   196,   197,    -1,
     199,   200,    -1,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,
      -1,    -1,   241,   242,   243,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,    -1,   258,
     259,    -1,   261,    -1,   263,   264,    -1,    -1,   267,    -1,
      -1,    -1,    -1,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,    -1,   515,    -1,    -1,   518,
     519,   520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,
      -1,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,
     549,    -1,   551,   552,    -1,   554,    -1,   556,    -1,    -1,
      -1,    -1,   561,    -1,    -1,    -1,   565,   566,    -1,    -1,
      -1,    -1,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,   581,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
      32,    33,    34,    35,    36,    37,    38,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    -1,    77,    78,    -1,    80,    81,
      -1,    83,    84,    85,    86,    -1,    -1,    89,    90,    91,
      -1,    93,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,   111,
     112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,   136,   137,    -1,   139,   140,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,   159,   160,    -1,
     162,   163,   164,   165,   166,    -1,   168,    -1,    -1,   171,
      -1,   173,   174,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,    -1,   196,   197,    -1,   199,   200,    -1,
     202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,
      -1,   223,   224,   225,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,
     242,   243,    -1,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,   256,    -1,   258,   259,    -1,   261,
      -1,   263,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,   388,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,    -1,   428,   429,    -1,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,    -1,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,   508,    -1,   510,   511,
     512,   513,    -1,   515,    -1,    -1,   518,   519,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,   531,
     532,   533,   534,   535,   536,    -1,    -1,   539,   540,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,   554,    -1,   556,    -1,    -1,    -1,    -1,   561,
      -1,    -1,    -1,   565,   566,    -1,    -1,    -1,    -1,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,   581,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    -1,    28,    29,    30,    -1,    32,    33,    34,
      35,    36,    37,    38,    -1,    40,    41,    42,    -1,    44,
      -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    -1,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    74,
      75,    -1,    77,    78,    -1,    80,    81,    -1,    83,    84,
      85,    86,    -1,    -1,    89,    90,    91,    -1,    93,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,   111,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,   166,    -1,   168,    -1,    -1,   171,    -1,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
      -1,   196,   197,    -1,   199,   200,    -1,   202,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,    -1,    -1,   223,   224,
     225,    -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,    -1,    -1,    -1,   241,   242,   243,    -1,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,   256,    -1,   258,   259,    -1,   261,    -1,   263,   264,
      -1,    -1,   267,    -1,    -1,    -1,    -1,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,    -1,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,    -1,   340,   341,    -1,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,    -1,    -1,    -1,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,    -1,   408,   409,   410,    -1,   412,   413,    -1,
      -1,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,   434,
     435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,    -1,
      -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,    -1,
     465,   466,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,   508,    -1,   510,   511,   512,   513,    -1,
     515,    -1,    -1,   518,   519,   520,    -1,    -1,   523,    -1,
     525,    -1,   527,   528,    -1,    -1,   531,   532,   533,   534,
     535,   536,    -1,    -1,   539,   540,    -1,   542,   543,   544,
      -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,   554,
      -1,   556,    -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,
     565,   566,    -1,    -1,    -1,    -1,   571,    -1,   573,    -1,
      -1,   576,   577,    -1,    -1,   580,   581,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    -1,
      28,    29,    30,    -1,    32,    33,    34,    35,    36,    37,
      38,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    83,    84,    85,    86,    -1,
      -1,    89,    90,    91,    -1,    93,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,   111,   112,    -1,   114,    -1,    -1,    -1,
     118,   119,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,   136,   137,
      -1,   139,   140,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,   166,    -1,
     168,    -1,    -1,   171,    -1,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,    -1,   196,   197,
      -1,   199,   200,    -1,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,   223,   224,   225,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,   242,   243,    -1,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,    -1,
     258,   259,    -1,   261,    -1,   263,   264,    -1,    -1,   267,
      -1,    -1,    -1,    -1,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
     388,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
     508,    -1,   510,   511,   512,   513,    -1,   515,    -1,    -1,
     518,   519,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,   531,   532,   533,   534,   535,   536,    -1,
      -1,   539,   540,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,   554,    -1,   556,    -1,
      -1,    -1,    -1,   561,    -1,    -1,    -1,   565,   566,    -1,
      -1,    -1,    -1,   571,    -1,   573,    -1,    -1,   576,   577,
      -1,    -1,   580,   581,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      -1,    32,    33,    34,    35,    36,    37,    38,    -1,    40,
      41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    -1,    68,    69,    70,
      71,    72,    73,    74,    75,    -1,    77,    78,    -1,    80,
      81,    -1,    83,    84,    85,    86,    -1,    -1,    89,    90,
      91,    -1,    93,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,   166,    -1,   168,    -1,    -1,
     171,    -1,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,    -1,   196,   197,    -1,   199,   200,
      -1,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
      -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     241,   242,   243,    -1,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,   256,    -1,   258,   259,    -1,
     261,    -1,   263,   264,    -1,    -1,   267,    -1,    -1,    -1,
      -1,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,    -1,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,    -1,   340,
     341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,   388,    -1,    -1,
      -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
      -1,   412,   413,    -1,    -1,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
      -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,
      -1,   442,   443,   444,   445,    -1,   447,   448,   449,    -1,
      -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,
      -1,   462,    -1,    -1,   465,   466,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,   508,    -1,   510,
     511,   512,   513,    -1,   515,    -1,    -1,   518,   519,   520,
      -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,
     531,   532,   533,   534,   535,   536,    -1,    -1,   539,   540,
      -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,
     551,   552,    -1,   554,    -1,   556,    -1,    -1,    -1,    -1,
     561,    -1,    -1,    -1,   565,   566,    -1,    -1,    -1,    -1,
     571,    -1,   573,    -1,    -1,   576,   577,    -1,    -1,   580,
     581,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    -1,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    37,    38,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    -1,    77,    78,    -1,    80,    81,    -1,    83,
      84,    85,    86,    -1,    -1,    89,    90,    91,    -1,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,   111,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,   166,    -1,   168,    -1,    -1,   171,    -1,   173,
     174,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,    -1,   196,   197,    -1,   199,   200,    -1,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,   223,
     224,   225,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242,   243,
      -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,   256,    -1,   258,   259,    -1,   261,    -1,   263,
     264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,   388,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,   508,    -1,   510,   511,   512,   513,
      -1,   515,    -1,    -1,   518,   519,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,   531,   532,   533,
     534,   535,   536,    -1,    -1,   539,   540,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
     554,    -1,   556,    -1,    -1,    -1,    -1,   561,    -1,    -1,
      -1,   565,   566,    -1,    -1,    -1,    -1,   571,    -1,   573,
      -1,    -1,   576,   577,    -1,    -1,   580,   581,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      -1,    28,    29,    30,    -1,    32,    33,    34,    35,    36,
      37,    38,    -1,    40,    41,    42,    -1,    44,    -1,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
      77,    78,    -1,    80,    81,    -1,    83,    84,    85,    86,
      -1,    -1,    89,    90,    91,    -1,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,   111,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,   166,
      -1,   168,    -1,    -1,   171,    -1,   173,   174,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,    -1,   196,
     197,    -1,   199,   200,    -1,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,    -1,    -1,   223,   224,   225,    -1,
      -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   241,   242,   243,    -1,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,   256,
      -1,   258,   259,    -1,   261,    -1,   263,   264,    -1,    -1,
     267,    -1,    -1,    -1,    -1,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,    -1,   325,   326,
     327,    -1,   329,   330,   331,   332,    -1,   334,   335,    -1,
     337,   338,    -1,   340,   341,    -1,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,   388,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
      -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,
      -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,
     457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,   508,    -1,   510,   511,   512,   513,    -1,   515,    -1,
      -1,   518,   519,   520,    -1,    -1,   523,    -1,   525,    -1,
     527,   528,    -1,    -1,   531,   532,   533,   534,   535,   536,
      -1,    -1,   539,   540,    -1,   542,   543,   544,    -1,    -1,
      -1,    -1,   549,    -1,   551,   552,    -1,   554,    -1,   556,
      -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,   565,   566,
      -1,    -1,    -1,    -1,   571,    -1,   573,    -1,    -1,   576,
     577,    -1,    -1,   580,   581,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    -1,    28,    29,
      30,    -1,    32,    33,    34,    35,    36,    37,    38,    -1,
      40,    41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    -1,
      80,    81,    -1,    83,    84,    85,    86,    -1,    -1,    89,
      90,    91,    -1,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,   111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,
     120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,   139,
     140,   141,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,   166,    -1,   168,    -1,
      -1,   171,    -1,   173,   174,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,    -1,   196,   197,    -1,   199,
     200,    -1,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,    -1,    -1,    -1,
     220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,    -1,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   241,   242,   243,    -1,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,   256,    -1,   258,   259,
      -1,   261,    -1,   263,   264,    -1,    -1,   267,    -1,    -1,
      -1,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,    -1,
     340,   341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,   388,    -1,
      -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,    -1,   408,   409,
     410,    -1,   412,   413,    -1,    -1,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,    -1,   428,   429,
      -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,
      -1,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
      -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,
      -1,    -1,   462,    -1,    -1,   465,   466,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,   508,    -1,
     510,   511,   512,   513,    -1,   515,    -1,    -1,   518,   519,
     520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,
      -1,   531,   532,   533,   534,   535,   536,    -1,    -1,   539,
     540,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,
      -1,   551,   552,    -1,   554,    -1,   556,    -1,    -1,    -1,
      -1,   561,    -1,    -1,    -1,   565,   566,    -1,    -1,    -1,
      -1,   571,    -1,   573,    -1,    -1,   576,   577,    -1,    -1,
     580,   581,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    -1,    28,    29,    30,    -1,    32,
      33,    34,    35,    36,    37,    38,    -1,    40,    41,    42,
      -1,    44,    -1,    46,    47,    -1,    -1,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    -1,    77,    78,    -1,    80,    81,    -1,
      83,    84,    85,    86,    -1,    -1,    89,    90,    91,    -1,
      93,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,   111,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,   166,    -1,   168,    -1,    -1,   171,    -1,
     173,   174,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,    -1,   196,   197,    -1,   199,   200,    -1,   202,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,
     223,   224,   225,    -1,    -1,   228,    -1,   230,   231,    -1,
     233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242,
     243,    -1,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,   256,    -1,   258,   259,    -1,   261,    -1,
     263,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,    -1,    -1,    -1,   299,   300,   301,   302,
     303,    -1,    -1,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,    -1,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,    -1,   340,   341,    -1,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,   388,    -1,    -1,    -1,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,    -1,   408,   409,   410,    -1,   412,
     413,    -1,    -1,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,
     433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,
      -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,
      -1,    -1,   465,   466,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,   508,    -1,   510,   511,   512,
     513,    -1,   515,    -1,    -1,   518,   519,   520,    -1,    -1,
     523,    -1,   525,    -1,   527,   528,    -1,    -1,   531,   532,
     533,   534,   535,   536,    -1,    -1,   539,   540,    -1,   542,
     543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,
      -1,   554,    -1,   556,    -1,    -1,    -1,    -1,   561,    -1,
      -1,    -1,   565,   566,    -1,    -1,    -1,    -1,   571,    -1,
     573,    -1,    -1,   576,   577,    -1,    -1,   580,   581,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    -1,    32,    33,    34,    35,
      36,    37,    38,    -1,    40,    41,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    -1,    80,    81,    -1,    83,    84,    85,
      86,    -1,    -1,    89,    90,    91,    -1,    93,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,   111,   112,    -1,   114,    -1,
      -1,    -1,   118,   119,   120,    -1,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,   154,   155,
     156,   157,   158,   159,   160,    -1,   162,   163,   164,   165,
     166,    -1,   168,    -1,    -1,   171,    -1,   173,   174,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,    -1,
     196,   197,    -1,   199,   200,    -1,   202,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,    -1,    -1,    -1,   220,    -1,    -1,   223,   224,   225,
      -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,   242,   243,    -1,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
     256,    -1,   258,   259,    -1,   261,    -1,   263,   264,    -1,
      -1,   267,    -1,    -1,    -1,    -1,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,    -1,   340,   341,    -1,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,    -1,    -1,    -1,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,    -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,
      -1,    -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,
      -1,   447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,
     456,   457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,
     466,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,   508,    -1,   510,   511,   512,   513,    -1,   515,
      -1,    -1,   518,   519,   520,    -1,    -1,   523,    -1,   525,
      -1,   527,   528,    -1,    -1,   531,   532,   533,   534,   535,
     536,    -1,    -1,   539,   540,    -1,   542,   543,   544,    -1,
      -1,    -1,    -1,   549,    -1,   551,   552,    -1,   554,    -1,
     556,    -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,   565,
     566,    -1,    -1,    -1,    -1,   571,    -1,   573,    -1,    -1,
     576,   577,    -1,    -1,   580,   581,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    -1,    28,
      29,    30,    -1,    32,    33,    34,    35,    36,    37,    38,
      -1,    40,    41,    42,    -1,    44,    -1,    46,    47,    -1,
      -1,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
      -1,    80,    81,    -1,    83,    84,    85,    86,    -1,    -1,
      89,    90,    91,    -1,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,   111,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,   166,    -1,   168,
      -1,    -1,   171,    -1,   173,   174,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,    -1,   196,   197,    -1,
     199,   200,    -1,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,
      -1,    -1,   241,   242,   243,    -1,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,   256,    -1,   258,
     259,    -1,   261,    -1,   263,   264,    -1,    -1,   267,    -1,
      -1,    -1,    -1,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,    -1,   325,   326,   327,    -1,
     329,   330,   331,   332,    -1,   334,   335,    -1,   337,   338,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,   388,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,    -1,   412,   413,    -1,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,   465,   466,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,   508,
      -1,   510,   511,   512,   513,    -1,   515,    -1,    -1,   518,
     519,   520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,
      -1,    -1,   531,   532,   533,   534,   535,   536,    -1,    -1,
     539,   540,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,
     549,    -1,   551,   552,    -1,   554,    -1,   556,    -1,    -1,
      -1,    -1,   561,    -1,    -1,    -1,   565,   566,    -1,    -1,
      -1,    -1,   571,    -1,   573,    -1,    -1,   576,   577,    -1,
      -1,   580,   581,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      -1,    23,    24,    25,    26,    -1,    28,    -1,    30,    -1,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
      52,    -1,    54,    55,    -1,    57,    -1,    59,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
      -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      -1,   173,   174,    -1,    -1,   177,   178,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,    -1,
     252,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,   261,
      -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
     312,    -1,   314,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,   330,   331,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
      -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,    -1,    -1,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,   450,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,    -1,
     472,   473,   474,    -1,    -1,    -1,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,   511,
     512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,    -1,     5,   556,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      -1,    23,    24,    25,    26,    -1,    28,    -1,    30,   581,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
      52,    -1,    54,    55,    -1,    57,    -1,    59,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    79,    80,    81,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
      -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      -1,   173,   174,    -1,    -1,   177,   178,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,   238,    -1,    -1,   241,
      -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,    -1,
      -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,   261,
      -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
     312,    -1,   314,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,   330,   331,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
      -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,    -1,    -1,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,    -1,   428,   429,    -1,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,   450,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,    -1,
     472,   473,   474,    -1,    -1,    -1,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,   511,
     512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,    -1,     5,   556,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      -1,    23,    24,    25,    26,    -1,    28,    -1,    30,   581,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
      52,    -1,    54,    55,    -1,    57,    -1,    59,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    -1,    80,    81,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
      -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      -1,   173,   174,    -1,    -1,   177,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,
      -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,    -1,
      -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,   261,
      -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
     312,    -1,   314,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,   330,   331,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
      -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,    -1,    -1,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,    -1,   428,   429,   430,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,    -1,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,    -1,
     472,   473,   474,    -1,    -1,    -1,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,   511,
     512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,    -1,    -1,   556,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,   574,    23,    24,    25,    26,    -1,    28,   581,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,
      50,    -1,    52,    -1,    54,    55,    -1,    57,    -1,    59,
      60,    61,    -1,    63,    -1,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    75,    -1,    77,    78,    -1,
      80,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,    -1,
     100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,    -1,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
      -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,    -1,    -1,   154,    -1,   156,    -1,    -1,   159,
     160,    -1,    -1,   163,   164,   165,    -1,    -1,   168,    -1,
      -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,   179,
      -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,    -1,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   241,    -1,   243,    -1,    -1,    -1,   247,    -1,    -1,
     250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,    -1,
      -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,    -1,    -1,
     310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
     330,   331,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,
     340,   341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,
     360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
      -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,   402,   403,    -1,    -1,   406,    -1,   408,   409,
     410,    -1,   412,   413,    -1,    -1,    -1,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,    -1,   428,   429,
      -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,
      -1,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
      -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,
      -1,    -1,   462,    -1,    -1,   465,   466,    -1,    -1,   469,
     470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,   479,
     480,   481,    -1,   483,   484,    -1,   486,   487,    -1,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,    -1,   502,    -1,    -1,   505,   506,   507,   508,    -1,
      -1,   511,   512,    -1,    -1,   515,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,   539,
      -1,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,
      -1,   551,   552,    -1,    -1,    -1,   556,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,   574,    -1,    17,    -1,    -1,    20,
     580,   581,    23,    24,    25,    26,    -1,    28,    -1,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,
      -1,    52,    -1,    54,    55,    -1,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    75,    -1,    77,    78,    -1,    80,
      81,    -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,
      -1,    -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,
     141,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,    -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,
      -1,    -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,
      -1,    -1,   173,   174,    -1,    -1,   177,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
      -1,    -1,    -1,   224,    -1,   226,    -1,   228,    -1,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     241,    -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,
      -1,    -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,
     261,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,
      -1,   312,    -1,   314,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,   330,
     331,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,
     341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,
     361,    -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,    -1,
      -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
      -1,   402,   403,    -1,    -1,   406,    -1,   408,   409,   410,
      -1,   412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,    -1,   428,   429,    -1,
      -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,
      -1,   442,   443,   444,   445,    -1,   447,   448,   449,    -1,
      -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,
      -1,   462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,
      -1,   472,   473,   474,    -1,    -1,    -1,   478,   479,   480,
     481,    -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
      -1,   502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,
     511,   512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,
      -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,
     551,   552,    -1,    -1,     5,   556,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    -1,    23,    24,    25,    26,    -1,    28,    -1,    30,
     581,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,
      -1,    52,    -1,    54,    55,    -1,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    -1,    68,    69,    70,
      71,    72,    -1,    -1,    75,    -1,    77,    78,    -1,    80,
      81,    -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,
      -1,    -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,
      -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,
     141,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,    -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,
      -1,    -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,
      -1,    -1,   173,   174,    -1,    -1,   177,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,
     191,    -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
      -1,    -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,
     231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     241,    -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,
      -1,    -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,
     261,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,
     301,   302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,
      -1,   312,    -1,   314,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,   330,
     331,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,
     341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,
     361,    -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,    -1,    -1,
      -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
      -1,   402,   403,    -1,    -1,   406,    -1,   408,   409,   410,
      -1,   412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,    -1,   428,   429,    -1,
      -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,
      -1,   442,   443,   444,   445,    -1,   447,   448,   449,    -1,
      -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,
      -1,   462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,
      -1,   472,   473,   474,    -1,    -1,    -1,   478,   479,   480,
     481,    -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
      -1,   502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,
     511,   512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,
      -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,
     551,   552,    -1,    -1,    -1,   556,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,   567,    -1,    17,    -1,
      -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,    28,
     581,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    46,    47,    -1,
      -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    68,
      69,    70,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,   168,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,
      -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,    -1,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,   408,
     409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,    -1,   428,
     429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,    -1,
     469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,
     549,    -1,   551,   552,    -1,    -1,    -1,   556,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   573,    -1,    23,    24,    25,    26,
      -1,    28,   581,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,
      47,    -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,
      57,    -1,    59,    60,    61,    -1,    63,    -1,    65,    66,
      -1,    68,    69,    70,    71,    72,    -1,    -1,    75,    -1,
      77,    78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,
      -1,    -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,    -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,
      -1,    -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,
      -1,   168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,
     177,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,
     187,    -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,
      -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,
     247,    -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,
      -1,   258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,    -1,
      -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,   306,
     307,    -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,
      -1,    -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   358,   359,   360,   361,    -1,   363,    -1,   365,    -1,
     367,    -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,
      -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
      -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,
      -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,
     457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,
      -1,    -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,
      -1,   478,   479,   480,   481,    -1,   483,   484,    -1,   486,
     487,    -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,
     507,   508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,
      -1,    -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,
     527,   528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,
      -1,    -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,
      -1,    -1,   549,    -1,   551,   552,    -1,    -1,    -1,   556,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   580,   581,    23,    24,    25,    26,    -1,
      28,    -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,     5,   556,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,
      28,    -1,    30,   581,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,     5,   556,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,
      28,    -1,    30,   581,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,     5,   556,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,
      28,    -1,    30,   581,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,     5,   556,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,
      28,    -1,    30,   581,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,    -1,   556,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,    24,
      25,    26,   580,    28,    -1,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,    44,
      -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,    54,
      55,    -1,    57,    -1,    59,    60,    61,    -1,    63,    -1,
      65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
      75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,    -1,
     105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,   154,
      -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,   164,
     165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   174,
      -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,
      -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,   224,
      -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,
      -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,    -1,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,   292,    -1,   294,
     295,    -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,
      -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,   314,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,    -1,
     335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,    -1,
     365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,    -1,   402,   403,    -1,
      -1,   406,    -1,   408,   409,   410,    -1,   412,   413,    -1,
      -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,   434,
     435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,    -1,
      -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,    -1,
     465,   466,    -1,    -1,   469,   470,    -1,   472,   473,   474,
      -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,   484,
      -1,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,    -1,
     505,   506,   507,   508,    -1,    -1,   511,   512,    -1,    -1,
     515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,
     525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,   544,
      -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,    -1,
      -1,   556,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      -1,    23,    24,    25,    26,   580,    28,    -1,    30,    -1,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
      52,    -1,    54,    55,    -1,    57,    -1,    59,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    -1,    80,    81,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
      -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      -1,   173,   174,    -1,    -1,   177,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,
      -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,   261,
      -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
     312,    -1,   314,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,   330,   331,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
      -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,    -1,    -1,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,    -1,   428,   429,    -1,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,    -1,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,    -1,
     472,   473,   474,    -1,    -1,    -1,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,   511,
     512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,    -1,    -1,   556,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,   580,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,    -1,   561,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,   575,    -1,    20,    -1,
      -1,    23,    24,    25,    26,    -1,    28,    -1,    30,    -1,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,
      42,    -1,    44,    -1,    46,    47,    -1,    -1,    50,    -1,
      52,    -1,    54,    55,    -1,    57,    -1,    59,    60,    61,
      -1,    63,    -1,    65,    66,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    75,    -1,    77,    78,    -1,    80,    81,
      -1,    -1,    -1,    -1,    86,    -1,    -1,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,
     112,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
      -1,    -1,   154,    -1,   156,    -1,    -1,   159,   160,    -1,
      -1,   163,   164,   165,    -1,    -1,   168,    -1,    -1,    -1,
      -1,   173,   174,    -1,    -1,   177,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,    -1,    -1,   190,   191,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,    -1,
      -1,    -1,   224,    -1,    -1,    -1,   228,    -1,   230,   231,
      -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,   243,    -1,    -1,    -1,   247,    -1,    -1,   250,    -1,
      -1,    -1,    -1,    -1,   256,    -1,   258,    -1,    -1,   261,
      -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,    -1,    -1,    -1,   299,   300,   301,
     302,   303,    -1,    -1,   306,   307,    -1,    -1,   310,    -1,
     312,    -1,   314,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,   330,   331,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,   340,   341,
      -1,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,   359,   360,   361,
      -1,   363,    -1,   365,    -1,   367,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,   386,   387,    -1,    -1,    -1,    -1,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
     402,   403,    -1,    -1,   406,    -1,   408,   409,   410,    -1,
     412,   413,    -1,    -1,    -1,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,    -1,   428,   429,    -1,    -1,
      -1,   433,   434,   435,    -1,    -1,   438,    -1,    -1,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,    -1,    -1,
      -1,    -1,    -1,    -1,   456,   457,    -1,   459,    -1,    -1,
     462,    -1,    -1,   465,   466,    -1,    -1,   469,   470,    -1,
     472,   473,   474,    -1,    -1,    -1,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,   487,    -1,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,    -1,
     502,    -1,    -1,   505,   506,   507,   508,    -1,    -1,   511,
     512,    -1,    -1,   515,    -1,    -1,    -1,    -1,   520,    -1,
      -1,   523,    -1,   525,    -1,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
     542,   543,   544,    -1,    -1,    -1,    -1,   549,    -1,   551,
     552,    -1,    -1,    -1,   556,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,   567,    -1,    17,    -1,    -1,
      20,    -1,    -1,    23,    24,    25,    26,    -1,    28,    -1,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      40,    41,    42,    -1,    44,    -1,    46,    47,    -1,    -1,
      50,    -1,    52,    -1,    54,    55,    -1,    57,    -1,    59,
      60,    61,    -1,    63,    -1,    65,    66,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    75,    -1,    77,    78,    -1,
      80,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,    -1,
     100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,    -1,
      -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
      -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,    -1,    -1,   154,    -1,   156,    -1,    -1,   159,
     160,    -1,    -1,   163,   164,   165,    -1,    -1,   168,    -1,
      -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,   179,
      -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,
     190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,    -1,
     230,   231,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   241,    -1,   243,    -1,    -1,    -1,   247,    -1,    -1,
     250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,    -1,
      -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,   299,
     300,   301,   302,   303,    -1,    -1,   306,   307,    -1,    -1,
     310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
     330,   331,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,
     340,   341,    -1,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,   359,
     360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,    -1,
      -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,   402,   403,    -1,    -1,   406,    -1,   408,   409,
     410,    -1,   412,   413,    -1,    -1,    -1,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,    -1,   428,   429,
      -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,    -1,
      -1,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
      -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,   459,
      -1,    -1,   462,    -1,    -1,   465,   466,    -1,    -1,   469,
     470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,   479,
     480,   481,    -1,   483,   484,    -1,   486,   487,    -1,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,    -1,   502,    -1,    -1,   505,   506,   507,   508,    -1,
      -1,   511,   512,    -1,    -1,   515,    -1,    -1,    -1,    -1,
     520,    -1,    -1,   523,    -1,   525,    -1,   527,   528,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,   539,
      -1,    -1,   542,   543,   544,    -1,    -1,    -1,    -1,   549,
      -1,   551,   552,    -1,    -1,    -1,   556,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,   567,    -1,    17,
      -1,    -1,    20,    -1,    -1,    23,    24,    25,    26,    -1,
      28,    -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    50,    -1,    52,    -1,    54,    55,    -1,    57,
      -1,    59,    60,    61,    -1,    63,    -1,    65,    66,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,
      -1,    -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,    -1,    -1,   154,    -1,   156,    -1,
      -1,   159,   160,    -1,    -1,   163,   164,   165,    -1,    -1,
     168,    -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,
      -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,
     228,    -1,   230,   231,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,   243,    -1,    -1,    -1,   247,
      -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,
     258,    -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,
      -1,   299,   300,   301,   302,   303,    -1,    -1,   306,   307,
      -1,    -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,   330,   331,    -1,    -1,    -1,   335,    -1,    -1,
      -1,    -1,   340,   341,    -1,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     358,   359,   360,   361,    -1,   363,    -1,   365,    -1,   367,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,    -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,   402,   403,    -1,    -1,   406,    -1,
     408,   409,   410,    -1,   412,   413,    -1,    -1,    -1,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,    -1,
     428,   429,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,
     438,    -1,    -1,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,
      -1,   459,    -1,    -1,   462,    -1,    -1,   465,   466,    -1,
      -1,   469,   470,    -1,   472,   473,   474,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,   487,
      -1,    -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,    -1,   502,    -1,    -1,   505,   506,   507,
     508,    -1,    -1,   511,   512,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,   525,    -1,   527,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,   539,    -1,    -1,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,    -1,   551,   552,    -1,    -1,    -1,   556,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,   567,
      -1,    17,    -1,    -1,    20,    -1,    -1,    23,    24,    25,
      26,    -1,    28,    -1,    30,    -1,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    40,    41,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    50,    -1,    52,    -1,    54,    55,
      -1,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    75,
      -1,    77,    78,    -1,    80,    81,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    97,    -1,    -1,   100,    -1,    -1,    -1,    -1,   105,
     106,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,    -1,    -1,   154,    -1,
     156,    -1,    -1,   159,   160,    -1,    -1,   163,   164,   165,
      -1,    -1,   168,    -1,    -1,    -1,    -1,   173,   174,    -1,
      -1,   177,    -1,   179,    -1,    -1,    -1,    -1,    -1,    -1,
     186,   187,    -1,    -1,   190,   191,    -1,   193,    -1,    -1,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,    -1,    -1,    -1,   224,    -1,
      -1,    -1,   228,    -1,   230,   231,    -1,   233,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,    -1,   243,    -1,    -1,
      -1,   247,    -1,    -1,   250,    -1,    -1,    -1,    -1,    -1,
     256,    -1,   258,    -1,    -1,   261,    -1,   263,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,   292,    -1,   294,   295,
      -1,    -1,    -1,   299,   300,   301,   302,   303,    -1,    -1,
     306,   307,    -1,    -1,   310,    -1,   312,    -1,   314,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,   330,   331,    -1,    -1,    -1,   335,
      -1,    -1,    -1,    -1,   340,   341,    -1,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   358,   359,   360,   361,    -1,   363,    -1,   365,
      -1,   367,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,    -1,    -1,    -1,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,   402,   403,    -1,    -1,
     406,    -1,   408,   409,   410,    -1,   412,   413,    -1,    -1,
      -1,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,    -1,   428,   429,    -1,    -1,    -1,   433,   434,   435,
      -1,    -1,   438,    -1,    -1,    -1,   442,   443,   444,   445,
      -1,   447,   448,   449,    -1,    -1,    -1,    -1,    -1,    -1,
     456,   457,    -1,   459,    -1,    -1,   462,    -1,    -1,   465,
     466,    -1,    -1,   469,   470,    -1,   472,   473,   474,    -1,
      -1,    -1,   478,   479,   480,   481,    -1,   483,   484,    -1,
     486,   487,    -1,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,    -1,   502,    -1,    -1,   505,
     506,   507,   508,    -1,    -1,   511,   512,    -1,    -1,   515,
      -1,    -1,    -1,    -1,   520,    -1,    -1,   523,    -1,   525,
      -1,   527,   528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     536,    -1,    -1,   539,    -1,    -1,   542,   543,   544,    -1,
      -1,    -1,    -1,   549,    -1,   551,   552,    -1,    -1,    -1,
     556,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,   567,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,   135,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
     404,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
     414,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,   547,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556,    -1,    -1,   559,     5,   561,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,    -1,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,   545,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
     559,     5,   561,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
     404,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
     414,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,   545,    -1,   547,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556,    -1,    -1,   559,     5,   561,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,    -1,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,     5,   561,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
     404,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
     414,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,   547,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556,    -1,    -1,    -1,     5,   561,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,    -1,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,     5,   561,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
     404,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
     414,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,   547,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556,    -1,    -1,    -1,     5,   561,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,    -1,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,     5,   561,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,   161,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
     404,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
     414,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,   547,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556,    -1,    -1,    -1,     5,   561,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    -1,    23,    24,    25,    -1,    -1,    28,
      -1,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    42,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    52,    -1,    54,    -1,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,    -1,
      -1,   120,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,    -1,    -1,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   173,   174,    -1,    -1,   177,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,   190,   191,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
      -1,   230,   231,    -1,   233,   234,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
      -1,   250,    -1,    -1,    -1,    -1,    -1,   256,    -1,   258,
      -1,    -1,   261,    -1,   263,    -1,    -1,    -1,    -1,    -1,
     269,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,    -1,    -1,    -1,
     299,   300,   301,   302,   303,    -1,    -1,   306,   307,    -1,
      -1,   310,    -1,   312,    -1,   314,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   340,   341,    -1,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
     359,   360,   361,    -1,   363,    -1,   365,    -1,   367,    -1,
      -1,    -1,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,    -1,    -1,   403,   404,    -1,   406,    -1,    -1,
     409,    -1,    -1,   412,   413,   414,    -1,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,    -1,   433,   434,   435,    -1,    -1,   438,
      -1,    -1,    -1,   442,    -1,   444,    -1,    -1,   447,   448,
     449,    -1,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,
     459,    -1,    -1,   462,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   470,    -1,   472,   473,   474,    -1,    -1,    -1,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,    -1,   502,    -1,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
     539,    -1,    -1,   542,   543,   544,    -1,    -1,   547,    -1,
     549,    -1,   551,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,     5,   561,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,   166,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,   332,   333,
      -1,   335,    -1,    -1,   338,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,   145,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,   437,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    91,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    18,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,   153,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,   111,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    -1,    23,
      24,    25,    26,    -1,    28,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,    -1,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,   168,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,   335,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,   402,   403,
      -1,    -1,   406,    -1,   408,   409,   410,    -1,   412,   413,
      -1,    -1,    -1,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,    -1,   428,   429,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,   465,   466,    -1,    -1,   469,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,   505,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,   525,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,   552,    -1,
      -1,     5,   556,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,    -1,    -1,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    -1,
      54,    -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    63,
      -1,    65,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,    -1,    -1,   159,   160,    -1,    -1,   163,
     164,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,    -1,   177,    -1,   179,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,   190,   191,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,    -1,   230,   231,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,   247,    -1,    -1,   250,    -1,    -1,    -1,
      -1,    -1,   256,    -1,   258,    -1,    -1,   261,    -1,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,   292,    -1,
     294,   295,    -1,    -1,    -1,   299,   300,   301,   302,   303,
      -1,    -1,   306,   307,    -1,    -1,   310,    -1,   312,    -1,
     314,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,   330,   331,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   340,   341,    -1,   343,
      -1,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   358,   359,   360,   361,    -1,   363,
      -1,   365,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,   386,   387,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
      -1,    -1,   406,    -1,    -1,   409,    -1,    -1,   412,   413,
      -1,    -1,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,    -1,   433,
     434,   435,    -1,    -1,   438,    -1,    -1,    -1,   442,    -1,
     444,    -1,    -1,   447,   448,   449,    -1,    -1,    -1,    -1,
      -1,    -1,   456,   457,    -1,   459,    -1,    -1,   462,    -1,
      -1,    -1,   466,    -1,    -1,    -1,   470,    -1,   472,   473,
     474,    -1,    -1,    -1,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,   500,    -1,   502,    -1,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,   523,
      -1,    -1,    -1,   527,   528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    -1,    -1,   539,    -1,    -1,   542,   543,
     544,    -1,    -1,    -1,    -1,   549,    -1,   551,    -1,    -1,
      -1,    -1,   556
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    13,    14,    26,    28,    47,    48,    53,    57,
      58,    70,    87,   106,   115,   116,   117,   128,   129,   151,
     168,   192,   199,   202,   223,   239,   257,   262,   348,   370,
     379,   399,   401,   402,   405,   408,   410,   415,   417,   426,
     430,   436,   441,   445,   465,   469,   505,   521,   524,   529,
     552,   573,   584,   587,   588,   589,   590,   591,   593,   598,
     600,   605,   618,   788,   806,   809,   817,   819,   821,   824,
     829,   831,   836,   839,   844,   848,   856,   857,   995,   997,
    1003,  1006,  1031,  1039,  1050,  1056,  1070,  1073,  1076,  1082,
    1086,  1090,  1093,  1094,  1140,  1157,  1163,  1165,  1172,  1174,
    1199,  1205,  1206,  1207,  1208,  1254,    11,    94,   179,   214,
     374,   802,  1229,  1230,   258,   336,   838,   483,   485,  1159,
    1200,   217,     5,     7,     8,     9,    10,    11,    17,    20,
      23,    24,    25,    26,    28,    30,    33,    37,    40,    41,
      42,    44,    46,    47,    50,    52,    54,    55,    57,    59,
      60,    61,    63,    65,    66,    68,    69,    70,    71,    72,
      75,    77,    78,    80,    81,    86,    89,    96,    97,   100,
     105,   106,   112,   114,   120,   122,   123,   124,   128,   131,
     132,   133,   137,   141,   142,   143,   144,   147,   149,   150,
     151,   154,   156,   159,   160,   163,   164,   165,   168,   173,
     174,   177,   179,   186,   187,   190,   191,   193,   199,   200,
     202,   205,   209,   210,   211,   212,   215,   216,   220,   224,
     228,   230,   231,   233,   234,   241,   243,   247,   250,   256,
     258,   261,   263,   273,   274,   275,   276,   277,   278,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   290,   291,
     292,   294,   295,   299,   300,   301,   302,   303,   306,   307,
     310,   312,   314,   317,   318,   319,   320,   321,   322,   323,
     326,   327,   329,   330,   331,   335,   340,   341,   343,   345,
     346,   347,   358,   359,   360,   361,   363,   365,   367,   370,
     371,   373,   375,   376,   377,   378,   380,   381,   382,   383,
     384,   385,   386,   387,   392,   393,   396,   397,   398,   400,
     402,   403,   406,   408,   409,   410,   412,   413,   417,   418,
     420,   421,   423,   424,   425,   426,   428,   429,   433,   434,
     435,   438,   442,   443,   444,   445,   447,   448,   449,   456,
     457,   459,   462,   465,   466,   469,   470,   472,   473,   474,
     478,   479,   480,   481,   483,   484,   486,   487,   490,   491,
     492,   493,   494,   500,   502,   505,   506,   507,   508,   511,
     512,   515,   520,   523,   525,   527,   528,   536,   539,   542,
     543,   544,   549,   551,   552,   556,   612,  1130,  1134,  1138,
    1139,   287,  1159,  1159,   549,  1201,    94,   178,   450,   486,
     517,   527,   610,   703,   704,   705,   779,   780,  1040,   996,
      94,   179,   217,   374,   486,   501,   527,   542,  1002,  1134,
     838,   611,   581,  1128,  1129,  1134,   599,  1004,  1091,    96,
     217,   485,  1159,   838,  1134,  1087,   426,   527,  1159,   838,
    1007,  1083,  1159,   611,  1201,  1134,   859,   861,   862,   349,
    1142,  1057,   465,   469,   445,   500,   445,   485,  1051,  1164,
    1032,  1134,    28,    70,   141,   370,   392,   417,   465,  1256,
     430,   573,   858,     0,     3,   585,   370,   156,  1074,  1128,
    1134,   145,   794,  1134,   612,   612,   485,   112,  1224,  1225,
    1226,  1159,   820,  1201,   845,   846,  1128,   619,   581,   498,
     822,   832,    16,  1202,   213,   706,   611,   354,  1221,  1225,
    1226,  1227,  1228,  1229,   485,   704,   217,   217,   214,   270,
     382,  1048,  1049,   911,   912,   213,  1001,  1001,  1134,  1001,
    1001,   611,  1001,  1159,   594,  1077,    12,    13,    87,   115,
     129,   151,   163,   192,   217,   223,   262,   375,   394,   400,
     406,   430,   441,   442,   478,   524,   526,  1175,  1177,  1179,
    1180,  1134,   347,    61,   390,   581,   251,   489,  1131,  1134,
    1136,   113,   204,   270,  1009,    77,   381,  1092,  1095,   226,
    1128,  1158,  1159,   175,    32,   287,  1062,  1088,  1134,   611,
     840,  1159,   113,   270,  1010,  1038,   287,   381,   445,  1084,
    1085,   818,    12,  1173,  1177,   498,  1202,   860,    12,   125,
     204,   455,   456,   457,   458,   459,   460,   471,   866,   867,
     868,  1141,    30,    33,    55,    56,    65,    67,    85,    87,
      95,   143,   147,   177,   179,   191,   193,   216,   217,   220,
     237,   258,   263,   287,   320,   329,   347,   373,   374,   377,
     378,   435,   445,   470,   485,   543,   751,   778,  1058,  1062,
    1063,  1065,  1148,   811,   812,   811,   811,   548,   810,   811,
    1000,  1128,  1159,  1038,    34,   203,   489,  1116,  1132,  1255,
    1255,  1255,  1255,  1255,   861,   858,   574,   579,  1134,  1072,
    1071,   301,   487,   512,   790,   792,   791,  1128,   145,   461,
    1231,   830,   999,  1000,   229,   575,   852,   853,   573,   620,
    1134,   601,   999,   999,    52,   335,   335,   399,  1203,   332,
     333,   883,  1134,    91,  1136,  1137,  1190,  1191,   405,    10,
     374,   501,   872,  1223,  1231,  1232,  1240,  1242,  1243,  1249,
     872,  1222,  1232,  1240,  1243,  1249,  1224,  1229,   706,  1134,
    1134,   175,  1041,  1045,  1046,  1134,  1048,     7,    20,    22,
      25,    29,    32,    34,    35,    36,    38,    51,    55,    56,
      62,    65,    73,    74,    80,    83,    84,    85,    90,    91,
      93,    94,    98,    99,   100,   105,   107,   110,   111,   118,
     119,   136,   139,   140,   152,   155,   157,   158,   162,   166,
     171,   176,   180,   181,   182,   183,   185,   186,   188,   189,
     190,   194,   196,   197,   203,   209,   213,   223,   225,   242,
     246,   249,   254,   256,   259,   264,   267,   272,   279,   289,
     293,   302,   306,   308,   309,   313,   314,   315,   316,   317,
     318,   319,   325,   332,   333,   334,   337,   338,   343,   361,
     362,   364,   365,   366,   367,   368,   380,   388,   404,   405,
     416,   419,   422,   424,   428,   467,   468,   473,   475,   476,
     477,   482,   489,   491,   492,   493,   494,   503,   504,   505,
     510,   513,   518,   519,   527,   531,   532,   533,   534,   535,
     540,   544,   554,   556,   561,   565,   566,   571,   573,   576,
     577,   580,   581,   877,   878,   879,   880,   884,   887,   888,
     890,   897,   901,   913,  1115,  1117,  1119,  1120,  1124,  1126,
    1130,  1134,   152,  1134,  1134,   344,   612,   612,  1137,  1189,
     999,  1001,   530,   595,   120,   205,   263,   287,   373,   381,
     409,   445,   466,   483,  1078,  1079,  1159,   373,  1178,   420,
     420,   486,   527,   542,   349,  1182,   483,  1184,    60,   445,
    1181,    95,   542,  1183,   344,   575,    18,   145,   955,   956,
    1166,  1134,   802,   877,    75,   175,   270,  1096,  1102,    47,
     175,  1128,  1160,  1161,   837,   580,   592,  1131,   263,   841,
    1137,   842,   843,  1128,   825,   226,  1000,  1011,  1012,    47,
     575,   999,  1178,   344,   426,  1204,  1203,   516,  1209,  1210,
     567,   870,   871,   872,   868,  1143,  1144,  1145,   263,   150,
     436,   252,   546,  1069,   506,   573,    94,   179,   374,   485,
     542,  1069,   713,  1136,   253,   974,   976,    63,   466,   172,
     466,   466,   466,   287,   483,    63,   466,    12,    40,    81,
      86,   231,   300,   359,   449,   480,  1052,  1053,  1054,   205,
     466,   466,   506,   974,  1069,   175,   229,  1066,   263,   142,
      66,   376,   483,   502,   466,   539,   808,   398,   462,   813,
     814,   807,    78,   802,   575,   346,  1258,   479,  1259,   236,
     412,  1257,   574,  1210,  1212,  1213,  1214,     3,   586,   856,
    1075,  1116,  1134,   111,   701,   702,   711,   712,   760,   613,
     613,   789,  1137,   429,   542,   999,   498,   575,   111,   847,
    1134,   846,   217,   238,   776,   777,   854,   621,   622,   877,
     273,   274,   275,   276,   277,   278,   281,   282,   283,   284,
     285,   286,   288,   396,   397,   602,   603,   604,   156,   382,
     823,    54,   156,   159,   172,   299,   382,   833,   834,   835,
      52,   399,   152,   609,   573,   876,   580,   211,   575,   872,
     872,   872,   179,   542,   179,  1232,  1128,   344,   507,   530,
     781,  1045,  1128,  1134,   575,  1043,   581,  1047,   573,   573,
     573,   573,   573,   888,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   876,   876,
     573,   876,   573,   573,   573,   513,   573,  1115,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   877,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   914,   915,
     916,   573,   573,   573,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   877,   573,   876,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   573,   573,   573,   876,
     573,  1115,   573,   573,   573,  1115,   573,   573,    34,   203,
     489,   573,   573,   573,   876,   876,   876,   573,   573,   573,
     573,   573,   573,   877,   918,   888,   888,   888,   430,   573,
     877,  1218,  1134,   902,  1134,    15,    16,   351,   354,   553,
     881,   882,   145,   146,   184,   198,   232,   244,   271,   328,
     885,   126,   229,   252,   313,   395,   439,   440,   448,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   883,   888,
     101,   102,   103,   104,   105,   206,   207,   208,   209,   302,
     304,   305,   306,   314,   380,   427,   428,   544,   555,   556,
     951,   953,    64,   353,   575,  1132,   573,   581,   581,  1128,
     575,    49,   411,   803,   999,   580,   596,   597,    47,   548,
     575,  1080,   483,   573,  1192,  1192,  1192,  1192,   179,   374,
     485,  1176,  1180,  1134,   164,   330,  1134,  1167,  1168,  1011,
     287,   258,  1101,   849,   287,   956,   575,   999,  1136,    27,
     498,  1089,   575,   498,   575,   498,   999,  1012,  1008,  1085,
     175,   575,   179,   374,  1176,  1134,    12,   125,  1216,   575,
     863,   874,   877,  1122,  1134,   575,   191,   258,   345,   435,
    1146,  1147,  1150,  1151,   229,  1067,  1131,   877,   567,   706,
     612,   612,  1128,  1128,  1059,   267,   338,   510,   977,   978,
    1117,   612,  1069,  1137,   172,  1064,  1066,   612,  1069,   230,
     481,   160,   172,  1055,   575,  1064,  1128,  1066,  1064,  1064,
    1069,  1069,   523,   815,   575,   815,   447,   430,   573,   577,
     921,   922,   923,   924,   933,   934,   942,  1116,   363,  1260,
     352,   970,   976,  1215,   702,    64,   751,    68,    80,   241,
     311,   335,   389,   461,   615,   617,     6,    13,    23,    24,
      53,    57,    68,    77,    83,    96,   114,   123,   124,   129,
     137,   143,   169,   215,   217,   224,   292,   307,   312,   352,
     358,   361,   384,   385,   387,   401,   423,   507,   516,   708,
     710,   711,   712,   795,   796,   797,   966,   112,   228,  1128,
    1131,  1000,   573,   574,   575,   145,   145,   145,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
     575,   525,   834,   700,   701,   574,  1136,    45,  1191,   179,
     612,   612,   612,  1134,  1128,   606,  1128,    44,   200,   425,
     782,   782,   344,  1044,  1042,   581,  1046,   175,   567,  1134,
     956,   877,   877,   877,    12,   125,   907,   957,   107,   166,
     203,   267,   338,   510,   980,   907,   907,   907,   877,   877,
     911,   911,   877,   911,   877,   877,   877,   877,   125,   907,
     957,   877,   574,   877,   877,   877,   877,   877,  1124,  1134,
     877,   877,   877,   877,   877,   573,  1218,   877,   951,   877,
     877,   877,   574,   877,   877,   877,   877,   911,   877,   877,
      97,   100,   491,   494,   954,   877,   125,   904,  1115,   877,
     877,   877,   574,   877,   877,   877,   877,   911,   877,   877,
     877,   877,   915,     9,   917,  1124,   125,   907,   877,   877,
     125,   907,   877,   877,   877,   877,   877,   911,   911,   911,
     877,   877,   877,   877,   877,   877,   911,   880,   877,   574,
     877,   877,   877,   877,   877,   574,   877,   877,   907,   907,
     877,   877,   877,   125,   907,   877,   877,   174,   952,   953,
     952,   877,    43,   245,   499,   877,   877,  1115,   574,   877,
     574,   907,  1125,  1126,  1134,   907,   877,   877,   877,   545,
     920,  1219,  1219,   574,   575,   574,   877,   580,   903,  1136,
     581,   877,   877,   877,   879,   158,   337,   504,   520,   883,
      12,    17,   879,   886,   880,   573,   888,   880,   880,   880,
     880,   252,   880,   880,   880,   880,   887,   880,   887,   880,
     880,   880,   880,   229,   252,   395,   562,   566,  1136,   888,
     877,   889,  1134,  1134,   998,  1137,   803,  1136,   575,   390,
    1079,   999,  1081,  1134,  1193,  1194,   567,  1128,  1134,  1188,
    1188,  1188,   145,   164,   184,   198,   243,   244,   271,   330,
     371,  1169,  1171,   546,   958,  1005,   218,   850,   851,  1128,
     270,   390,   550,  1162,  1161,   877,  1131,  1137,  1137,   843,
    1128,   156,   382,   528,   826,   827,   828,   430,   436,   535,
     536,   573,   696,  1013,  1016,  1131,   192,  1188,  1188,  1188,
    1211,   871,   175,   226,   864,   865,   969,   970,   991,   873,
     581,  1144,   111,   500,  1134,  1153,   321,   361,   580,   751,
    1152,  1131,   175,  1068,   574,  1134,   263,   466,  1061,   341,
     575,   445,  1069,  1134,   381,   974,  1054,  1069,  1064,  1128,
    1069,  1069,   604,   816,   814,   941,  1134,    88,   219,   236,
     249,   324,   416,   471,   932,   436,   575,  1128,   941,   575,
     172,  1261,    45,   974,   145,   437,  1022,  1023,  1023,  1131,
     461,   461,   461,   461,   461,   429,    67,    79,   178,   450,
     722,   725,   726,   773,   774,   776,   801,   801,  1023,  1023,
     801,  1023,  1023,  1023,   498,   122,  1023,   237,   484,   170,
     372,   776,   801,   237,  1023,   484,   122,  1023,  1023,  1023,
     801,    45,  1023,  1023,  1023,  1023,  1023,    18,   145,   498,
     805,  1023,  1023,  1023,   708,   575,   573,   581,   721,   727,
    1127,  1134,   793,   372,   949,  1134,   877,   980,  1131,  1131,
     107,   166,   267,   338,   510,   981,  1131,   980,  1131,  1131,
    1131,  1131,  1131,   980,  1131,  1131,   980,   603,   361,   489,
    1134,  1250,     8,    27,   688,   573,   413,  1233,   252,   573,
     690,   707,   709,   710,   608,  1128,   530,   958,  1134,   922,
     581,  1047,   575,   574,   574,   575,   907,   574,   908,   575,
     574,   574,   574,    18,   574,   530,   574,   574,   574,   574,
     575,   575,   530,   575,   575,   898,   574,   567,   574,   575,
     575,   574,   574,   575,   574,   581,   574,   575,   574,   575,
     575,   575,   574,   575,   574,   575,   175,   575,   575,   574,
     575,   574,   575,   575,   574,   575,   574,   574,   575,   574,
     575,   575,   575,   900,   575,   574,   575,   575,   574,   575,
     575,   574,   575,   574,   575,   574,   575,   575,   575,   574,
     573,   575,   907,   574,   574,   574,   907,   574,   574,   575,
     575,   574,   574,   575,   574,   575,   574,   574,   574,   574,
     574,   574,   574,   575,   575,   574,   575,   574,   229,   574,
     574,   575,   575,   575,   574,   575,   575,   574,   574,   574,
     575,   175,   575,   575,   907,   574,   574,   574,   575,   575,
     575,   574,   175,   877,   175,   877,   175,   877,   175,   574,
     575,   575,   574,   574,   574,   574,   574,   575,   574,   575,
     574,   877,   545,   559,   919,   859,   858,   911,   578,   191,
     258,   435,  1149,   437,  1134,   158,   337,   504,   520,   573,
     877,  1218,   149,   962,   880,    16,   951,   951,   573,   888,
     880,   880,   877,   892,   893,   894,   573,   581,   597,   262,
     574,   575,   581,   581,   498,   498,   498,  1170,   959,   975,
     976,  1013,   489,  1133,   575,   852,   550,   258,   498,   827,
     697,  1014,   573,  1019,  1024,  1019,   574,   696,  1015,  1121,
    1122,  1125,  1134,  1017,   349,   175,   175,   175,   857,   130,
     922,   992,   172,   262,   869,   991,   975,   865,    18,   875,
    1131,  1134,   567,  1134,   581,   233,   581,  1022,    32,   111,
     752,   753,  1022,  1136,   172,  1022,   580,  1136,    32,   111,
     755,   756,  1136,   981,  1060,   147,   543,   978,   978,   548,
     338,   958,  1064,   575,   936,   941,   921,   236,   236,   355,
     943,   236,   249,   416,   943,   933,   921,  1034,  1035,  1125,
     921,   956,   938,   939,   980,   303,   971,   111,   757,   759,
    1136,   753,    96,    96,   112,   228,   785,  1127,   777,   777,
      58,   170,   372,   517,   724,   775,   723,   724,   785,   785,
    1127,   981,   980,  1127,   980,  1131,  1131,   751,  1023,   980,
     238,   238,  1127,  1127,   713,  1023,   164,   243,   335,   716,
     981,   981,  1127,   967,   968,  1125,   111,   980,  1131,   980,
     980,   383,   386,   715,   980,  1128,    71,    72,   111,   133,
     165,   393,   714,   713,   573,   797,   719,   720,   721,   722,
    1134,     8,   164,   804,   394,   723,   765,   728,   581,   573,
    1234,   574,   575,   489,   413,   573,   115,   223,   524,   689,
    1244,   108,   227,   391,   472,   718,  1234,  1128,   252,   691,
     696,   719,   214,   405,   693,  1103,   575,   709,   573,   607,
     922,   969,   958,   956,   225,   877,   877,   574,   877,   877,
      32,    56,    97,   100,   108,   326,   443,   494,   522,   909,
     752,   911,   877,   752,   909,   877,   911,   574,   887,   887,
    1132,  1134,   877,   877,   911,  1132,   877,   877,   877,   911,
     338,   877,   877,   877,   877,   877,   877,   877,   911,   911,
     338,   877,   877,   911,   877,   877,   877,   877,   911,   877,
     880,  1124,   574,   574,   877,   877,   877,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   911,   225,   877,   877,
     877,   877,   574,   877,   877,   877,   877,   175,   877,   175,
     877,   175,   877,   877,   338,   877,   877,   560,   877,   877,
     141,  1217,  1217,   574,   581,   581,   581,  1136,   877,  1218,
     574,   575,   574,   888,   879,   877,  1218,   962,    16,   574,
     872,   895,   896,   910,   911,  1134,  1194,   567,   567,  1190,
    1190,  1190,   573,   877,   344,  1029,  1097,   851,   214,   855,
    1137,   866,  1020,  1021,  1125,  1025,   575,   573,  1016,   574,
     574,   575,   581,  1209,   175,  1190,  1190,  1190,   958,   958,
     131,   356,   987,   988,   993,   524,   229,  1131,  1134,   581,
    1134,   250,  1134,    12,    32,   111,   344,   877,  1156,    64,
     758,   877,  1137,   343,   361,   489,  1155,  1149,  1022,   974,
     275,  1069,   604,  1212,   937,   249,   236,   933,   943,   943,
     236,   344,   344,   530,   575,  1033,  1022,   169,   214,   529,
     945,   866,   877,   972,  1123,   877,   238,   238,   777,   785,
     781,   573,   129,   436,   798,   753,  1131,   785,   803,  1131,
     799,   575,    19,   116,   973,  1081,   574,   575,  1134,  1128,
      31,    32,    37,    39,    41,    42,    56,    97,   100,   108,
     127,   144,   165,   167,   186,   187,   227,   256,   265,   266,
     268,   296,   297,   298,   317,   318,   319,   323,   326,   339,
     340,   365,   367,   391,   434,   436,   446,   490,   491,   494,
     495,   496,   497,   537,   538,   556,   729,   732,   733,   734,
     735,   736,   737,   738,  1134,  1134,  1235,    18,  1134,   718,
    1251,   344,   623,   624,   626,  1134,   509,    18,  1128,   574,
     574,    18,   699,   709,   783,   784,  1134,   573,   958,   253,
     979,   877,   574,   574,   574,   573,   744,   745,   744,   573,
     739,   740,   745,   744,   227,   227,   574,   574,   574,   574,
     574,   574,   575,   899,   951,   951,   574,   574,   574,   574,
     574,   574,   575,   574,   574,   574,   574,   574,   575,   574,
     574,   574,   574,   574,   906,   970,   575,   575,   575,   574,
     574,   574,   574,   575,   574,   574,   574,   575,   229,   548,
     891,   574,   574,   574,   574,   574,   574,   574,   574,   574,
     575,   574,   574,   574,   877,   574,   172,   574,   574,   575,
     575,   574,   575,   575,   574,   877,   574,   877,   574,   877,
     574,   574,   575,   574,   574,   877,   560,  1220,  1220,   581,
     786,   574,   911,   574,   575,   574,   879,   877,   575,   574,
     407,  1195,  1195,  1195,   111,   877,  1027,  1028,   132,  1103,
     247,   870,   575,  1022,  1026,  1027,  1024,  1018,  1016,  1121,
    1134,  1190,   975,   195,   963,  1133,  1133,   580,   989,   990,
    1136,   438,   567,   390,   403,   433,  1154,   759,  1022,   573,
     573,  1153,   877,   145,   574,   923,   355,   921,   933,   236,
     236,   921,   933,   926,   925,   927,  1035,   958,  1028,   776,
     946,   946,   946,   870,   575,   973,   785,   781,   573,   783,
     111,   111,   727,   758,   729,   968,   574,   720,   766,   745,
     745,   744,   739,   369,   730,   739,   739,    20,    32,    46,
     515,   751,   761,    56,   537,   733,   735,   761,   761,    56,
     538,   538,   541,   739,   731,   744,   744,   761,   745,   744,
      23,    64,    68,   111,   337,   344,   372,   434,   517,   747,
     748,   749,   764,   883,   541,   745,   761,    32,   745,   762,
     745,   745,   744,   573,   740,   746,   581,   574,   575,  1236,
    1237,   509,   221,   229,   357,   627,   628,   629,   630,   872,
     574,   575,   625,  1131,  1236,   574,   692,   707,   573,   696,
     574,   575,   973,   573,   783,   978,   951,   107,   267,   338,
     510,   761,   338,   877,   574,   574,   574,   877,   877,   432,
     905,   338,   877,   877,   877,   877,    41,   381,   574,   877,
     951,   877,   877,   877,   877,   877,   574,   574,   574,   338,
     877,   574,  1134,   574,   911,   873,   896,    59,   234,   331,
     463,   474,   551,  1186,  1187,   548,  1196,  1196,  1196,   574,
     575,  1030,   226,   698,  1021,  1028,   574,  1212,    45,   201,
     960,   994,  1136,   575,   310,    69,   511,   390,  1155,   489,
     489,  1022,  1131,   956,   236,   344,   929,   933,   933,   344,
     931,   877,   877,   573,   969,   172,   944,   940,  1123,   573,
     573,   783,   574,   100,   491,   494,   565,   566,  1118,  1119,
     804,   747,   289,   344,   573,   767,   769,   770,   771,   443,
     522,   557,   741,   742,   743,   573,   741,   741,   762,    20,
     515,   751,   763,   762,   752,   761,   541,   741,   573,   761,
     741,   757,  1131,   334,   750,  1118,   524,   111,   238,   749,
     238,   337,   761,   762,   761,   762,   741,   338,   741,  1134,
    1134,   548,  1239,   430,   573,  1238,  1131,   574,   575,   625,
    1128,  1245,   626,   729,  1239,  1212,   693,   696,   694,   784,
     338,   574,   574,   574,   574,   574,   574,   575,   574,   574,
     575,   574,  1116,   574,   575,   574,   575,   574,   574,   310,
     154,   574,   574,   574,   574,   574,   574,   574,   575,   574,
     875,   489,   489,   489,    16,  1185,   192,   290,   291,   294,
     295,  1197,  1198,  1028,   238,  1098,   717,   865,   975,   964,
    1123,   961,   969,    66,  1104,   990,   574,   574,  1156,    16,
     921,   928,   530,   930,   530,   950,  1134,   979,   236,   947,
     717,   973,   783,   783,   574,  1120,  1120,   800,   177,   360,
     444,   115,   524,   768,  1134,   771,   743,   787,  1116,   752,
     762,   787,   876,   334,   536,    50,    58,   258,   872,   872,
    1252,   629,  1134,   172,   413,   574,  1209,   973,   574,   338,
     877,   907,   877,   911,  1186,   349,   980,   980,   980,   980,
    1198,   524,   485,   869,   548,   575,   965,   973,   877,   975,
     138,   148,   350,   488,  1105,  1106,   255,  1107,   276,   344,
     877,   573,   877,   573,   574,   575,   573,   574,   574,   781,
     804,    49,   335,   411,   436,   772,   772,   574,   575,   574,
     575,   574,   876,    58,   349,    58,   859,   858,   614,   729,
     872,  1246,   695,   574,   574,   575,   574,   574,   574,  1036,
    1037,  1125,  1128,    89,   418,  1123,   374,   982,    45,    45,
     138,    45,  1106,   464,   488,  1108,  1109,   145,   935,   950,
     950,  1134,   948,   949,   765,   781,     5,   111,   337,   769,
    1134,   761,  1116,   761,   349,   349,   574,   121,   615,   616,
     883,  1253,   134,   729,  1212,   877,   575,  1022,  1099,   973,
    1134,  1116,  1116,    45,  1116,    45,    45,  1109,   981,   877,
     574,   574,   574,  1212,   121,    61,   161,   213,   235,   248,
     347,   414,   561,   647,   648,   651,   660,   661,   664,   675,
     678,   680,   681,  1130,  1135,  1139,   424,  1247,   574,  1037,
    1028,   751,   754,   983,  1116,  1116,  1116,    16,   578,  1134,
     175,   330,   653,   650,  1135,  1135,  1134,   649,   662,   665,
     588,   269,   404,   547,   684,    28,   682,   582,  1241,   614,
     753,  1100,   573,   280,   175,  1134,   655,   656,   877,   877,
     545,   667,   671,   632,   647,   632,   685,   683,   676,   679,
     647,  1248,  1104,   872,   984,   985,   986,   145,   226,   141,
     877,   663,   672,   559,   671,   674,   141,   647,   579,   523,
     877,   633,   684,   682,   647,  1107,   877,   574,   575,   980,
     652,   213,   560,   545,   666,   668,   877,   632,   141,   269,
     579,   687,   128,   109,   631,   634,   677,  1135,   677,   214,
    1110,   986,   654,  1134,   657,   669,   668,   674,   673,   561,
     877,   686,    82,   153,   639,   645,  1134,   141,   647,   579,
     338,   573,  1111,   575,   632,   877,   141,   560,   141,   632,
     199,   575,   635,    76,    92,   579,   255,   574,   580,  1112,
    1113,  1125,   436,  1114,  1134,   658,   670,   561,   632,   404,
     141,   172,  1134,   729,   172,   172,  1136,   574,   575,  1036,
     135,   559,   659,   560,   547,   636,   111,   646,   453,   642,
     980,   637,   638,  1113,   655,   632,   632,   452,   454,   640,
     641,   642,   644,   883,  1134,   877,   536,   643,   588,   575,
     647,   173,  1132,   641
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1257 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1269 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! (lip->ptr >= lip->end_of_query))
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->ptr;
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1294 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 57:

/* Line 1455 of yacc.c  */
#line 1363 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
          lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
        }
    break;

  case 60:

/* Line 1455 of yacc.c  */
#line 1378 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          lex->sql_command= SQLCOM_PREPARE;
          lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
        }
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 1387 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
          lex->prepared_stmt_code_is_varref= FALSE;
        }
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 1394 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
          lex->prepared_stmt_code_is_varref= TRUE;
        }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1403 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          lex->sql_command= SQLCOM_EXECUTE;
          lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 1410 "sql_yacc.yy"
    {}
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1424 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
          if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
        }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1436 "sql_yacc.yy"
    {
         if (Lex->sphead)
         {
           my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
           MYSQL_YYABORT;
         }
       }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 1444 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->sql_command= SQLCOM_HELP;
	  lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
       }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 1454 "sql_yacc.yy"
    {
	  LEX *lex = Lex;
	  lex->sql_command = SQLCOM_CHANGE_MASTER;
	  bzero((char*) &lex->mi, sizeof(lex->mi));
        }
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 1460 "sql_yacc.yy"
    {}
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1469 "sql_yacc.yy"
    {
	 Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
       }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1474 "sql_yacc.yy"
    {
	 Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
       }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 1479 "sql_yacc.yy"
    {
	 Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
       }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 1484 "sql_yacc.yy"
    {
	 Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
       }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 1489 "sql_yacc.yy"
    {
	 Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
       }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 1493 "sql_yacc.yy"
    {
           Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
               LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
         }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1498 "sql_yacc.yy"
    {
           Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
         }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1502 "sql_yacc.yy"
    {
           Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
         }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1506 "sql_yacc.yy"
    {
           Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
         }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1510 "sql_yacc.yy"
    {
           Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
         }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1514 "sql_yacc.yy"
    {
           Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
	 }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1523 "sql_yacc.yy"
    {
	 Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
       }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1527 "sql_yacc.yy"
    {
           Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
           /* 
              If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
              instead of causing subsequent errors. 
              We need to do it in this file, because only there we know that 
              MASTER_LOG_POS has been explicitely specified. On the contrary
              in change_master() (sql_repl.cc) we cannot distinguish between 0
              (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
              whereas we want to distinguish (specified 0 means "read the binlog
              from 0" (4 in fact), unspecified means "don't change the position
              (keep the preceding value)").
           */
           Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
         }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1543 "sql_yacc.yy"
    {
           Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
         }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1547 "sql_yacc.yy"
    {
           Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
           /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
           Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
         }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 1558 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_CREATE_TABLE;
	  if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
						 TL_OPTION_UPDATING,
						 TL_WRITE))
	    MYSQL_YYABORT;
          lex->alter_info.reset();
	  lex->col_list.empty();
	  lex->change=NullS;
	  bzero((char*) &lex->create_info,sizeof(lex->create_info));
	  lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
	  lex->create_info.db_type= (enum db_type) lex->thd->variables.table_type;
	  lex->create_info.default_table_charset= NULL;
	}
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1575 "sql_yacc.yy"
    { Lex->current_select= &Lex->select_lex; }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1577 "sql_yacc.yy"
    {
            if (add_create_index_prepare (Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
	  }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 1582 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (11)].key_type), (yyvsp[(4) - (11)].lex_str).str, (yyvsp[(5) - (11)].key_alg)))
              MYSQL_YYABORT;
	  }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 1587 "sql_yacc.yy"
    {
            if (add_create_index_prepare (Lex, (yyvsp[(6) - (6)].table)))
              MYSQL_YYABORT;
	  }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 1592 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (10)].key_type), (yyvsp[(4) - (10)].lex_str).str, HA_KEY_ALG_UNDEF))
              MYSQL_YYABORT;
	  }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 1597 "sql_yacc.yy"
    {
             Lex->create_info.default_table_charset= NULL;
             Lex->create_info.used_fields= 0;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 1602 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command=SQLCOM_CREATE_DB;
	    lex->name=(yyvsp[(4) - (6)].lex_str).str;
            lex->create_info.options=(yyvsp[(3) - (6)].num);
	  }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 1609 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
	  }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 1615 "sql_yacc.yy"
    {}
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 1617 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 1624 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          lex->users_list.empty();
          lex->columns.empty();
          lex->grant= lex->grant_tot_col= 0;
	  lex->all_privileges= 0;
          lex->select_lex.db= 0;
          lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
          lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
          bzero((char *)&(lex->mqh),sizeof(lex->mqh));
        }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 1639 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name((yyvsp[(1) - (3)].lex_str).str))
            {
	      my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if (check_routine_name((yyvsp[(3) - (3)].lex_str)))
            {
	      my_error(ER_SP_WRONG_NAME, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
	    (yyval.spname)->init_qname(YYTHD);
	  }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 1656 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            LEX_STRING db;

	    if (check_routine_name((yyvsp[(1) - (1)].lex_str)))
            {
	      my_error(ER_SP_WRONG_NAME, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	      MYSQL_YYABORT;
	    }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
	    (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
	    (yyval.spname)->init_qname(YYTHD);
	  }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 1675 "sql_yacc.yy"
    {}
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 1676 "sql_yacc.yy"
    {}
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 1680 "sql_yacc.yy"
    {}
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 1681 "sql_yacc.yy"
    {}
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 1687 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 1689 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 1691 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 1693 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 1695 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 1697 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 1699 "sql_yacc.yy"
    { }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 1704 "sql_yacc.yy"
    { }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 1705 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 1706 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 1711 "sql_yacc.yy"
    {
	    Lex->sp_chistics.suid= SP_IS_SUID;
	  }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 1715 "sql_yacc.yy"
    {
	    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
	  }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 1722 "sql_yacc.yy"
    {
	    LEX *lex = Lex;

	    lex->sql_command= SQLCOM_CALL;
	    lex->spname= (yyvsp[(2) - (2)].spname);
	    lex->value_list.empty();
	    sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
	  }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 1730 "sql_yacc.yy"
    {}
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 1746 "sql_yacc.yy"
    {
	    Lex->value_list.push_back((yyvsp[(3) - (3)].item));
	  }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 1750 "sql_yacc.yy"
    {
	    Lex->value_list.push_back((yyvsp[(1) - (1)].item));
	  }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 1768 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    lex->length= 0;
	    lex->dec= 0;
	    lex->type= 0;
	  
	    lex->default_value= 0;
	    lex->on_update_value= 0;
	  
	    lex->comment= null_lex_str;
	    lex->charset= NULL;
	  
	    lex->interval_list.empty();
	    lex->uint_geom_type= 0;
	  }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 1788 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_pcontext *spc= lex->spcont;

	    if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
	  }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 1825 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_pcontext *spc= lex->spcont;

	    if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
	      MYSQL_YYABORT;
	    }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
	  }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 1850 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 1851 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 1852 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 1853 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 1857 "sql_yacc.yy"
    {}
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 1862 "sql_yacc.yy"
    {}
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 1868 "sql_yacc.yy"
    {
	    (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
	  }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 1872 "sql_yacc.yy"
    {
	    /* We check for declarations out of (standard) order this way
	       because letting the grammar rules reflect it caused tricky
	       shift/reduce conflicts with the wrong result. (And we get
	       better error handling this way.) */
	    if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
	    { /* Variable or condition following cursor or handler */
	      my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
	      MYSQL_YYABORT;
	    }
	    if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
	    { /* Cursor following handler */
	      my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
	      MYSQL_YYABORT;
	    }
	    (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
	    (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
	    (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
	    (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
	  }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 1898 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT;
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 1907 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            if (pctx == 0)
            {
              MYSQL_YYABORT;
            }
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            lex->sphead->restore_lex(YYTHD);

            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 1967 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
	    (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
	    (yyval.spblock).conds= 1;
	  }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 1982 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

	    sp_pcontext *ctx= lex->spcont;
	    sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL ||
	        sp->add_instr(i))
              MYSQL_YYABORT;

	    sp->push_backpatch(i, ctx->push_label((char *)"", 0));
	  }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 1999 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont;
	    sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
	    sp_instr_hreturn *i;

	    if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
	    {
	      i= new sp_instr_hreturn(sp->instructions(), ctx,
	                              ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
	    }
	    else
	    {  /* EXIT or UNDO handler, just jump to the end of the block */
	      i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
	    }
	    lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

	    (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
	    (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
	    lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
	  }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2031 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont;
	    uint offp;
	    sp_instr_cpush *i;

	    if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
	    {
	      my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      delete (yyvsp[(5) - (5)].lex);
	      MYSQL_YYABORT;
	    }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
	    (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
	    (yyval.spblock).curs= 1;
	  }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2056 "sql_yacc.yy"
    {
	    if(Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT;

	    /* We use statement here just be able to get a better
	       error message. Using 'select' works too, but will then
	       result in a generic "syntax error" if a non-select
	       statement is given. */
	  }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2066 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    if (lex->sql_command != SQLCOM_SELECT)
	    {
	      my_message(ER_SP_BAD_CURSOR_QUERY, ER(ER_SP_BAD_CURSOR_QUERY),
                         MYF(0));
	      MYSQL_YYABORT;
	    }
	    if (lex->result)
	    {
	      my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
	      MYSQL_YYABORT;
	    }
	    lex->sp_lex_in_use= TRUE;
	    (yyval.lex)= lex;
	    lex->sphead->restore_lex(YYTHD);
	  }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2088 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2089 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2095 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2097 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2102 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont->parent_context();

	    if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
	    {
	      my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

	      i->add_condition((yyvsp[(1) - (1)].spcondtype));
	      ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
	    }
	  }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2125 "sql_yacc.yy"
    {			/* mysql errno */
	    (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              YYABORT;
	    (yyval.spcondtype)->type= sp_cond_type_t::number;
	    (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
	  }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2133 "sql_yacc.yy"
    {		/* SQLSTATE */
	    if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
	    {
	      my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              YYABORT;
	    (yyval.spcondtype)->type= sp_cond_type_t::state;
	    memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
	    (yyval.spcondtype)->sqlstate[5]= '\0';
	  }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2149 "sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2150 "sql_yacc.yy"
    {}
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2155 "sql_yacc.yy"
    {
	    (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
	  }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2159 "sql_yacc.yy"
    {
	    (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
	    if ((yyval.spcondtype) == NULL)
	    {
	      my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2168 "sql_yacc.yy"
    {
	    (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              YYABORT;
	    (yyval.spcondtype)->type= sp_cond_type_t::warning;
	  }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2175 "sql_yacc.yy"
    {
	    (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              YYABORT;
	    (yyval.spcondtype)->type= sp_cond_type_t::notfound;
	  }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2182 "sql_yacc.yy"
    {
	    (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              YYABORT;
	    (yyval.spcondtype)->type= sp_cond_type_t::exception;
	  }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2192 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

	    LEX *lex= Lex;
	    sp_pcontext *spc= lex->spcont;

	    if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
	    (yyval.num)= 1;
	  }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2207 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

	    LEX *lex= Lex;
	    sp_pcontext *spc= lex->spcont;

	    if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
	    (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
	  }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2224 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2225 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2229 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
	    LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

	    if (lex->sphead->reset_lex(thd))
              MYSQL_YYABORT;
	    lex->sphead->m_tmp_query= lip->tok_start;
	  }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2239 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
	    LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
	    sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
	    if (lex->sql_command == SQLCOM_CHANGE_DB)
	    { /* "USE db" doesn't work in a procedure */
	      my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
	      MYSQL_YYABORT;
	    }
	    /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
	    */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
	    {
              sp_instr_stmt *i= new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;
              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= (uint) (lip->ptr - sp->m_tmp_query);
              else
                i->m_query.length= (uint) (lip->tok_end - sp->m_tmp_query);
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
	    sp->restore_lex(thd);
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2282 "sql_yacc.yy"
    {
            if(Lex->sphead->reset_lex(YYTHD))
               MYSQL_YYABORT;
          }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2287 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;

	    if (sp->m_type != TYPE_ENUM_FUNCTION)
	    {
	      my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      sp_instr_freturn *i;

	      i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
	      sp->m_flags|= sp_head::HAS_RETURN;
	    }
	    sp->restore_lex(YYTHD);
	  }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2310 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2312 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2315 "sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2316 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
	    LEX *lex= Lex;

	    lex->spcont->push_label((char *)"", lex->sphead->instructions());
	  }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2322 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    lex->sphead->backpatch(lex->spcont->pop_label());
	  }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2328 "sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2330 "sql_yacc.yy"
    {}
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2332 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp = lex->sphead;
	    sp_pcontext *ctx= lex->spcont;
	    sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

	    if (! lab)
	    {
	      my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      sp_instr_jump *i;
	      uint ip= sp->instructions();
	      uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

	      n= ctx->diff_handlers(lab->ctx, exclusive);
	      if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
	            sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
	      n= ctx->diff_cursors(lab->ctx, exclusive);
	      if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
	            sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
	      i= new sp_instr_jump(ip, ctx);
              if (i == NULL ||
	          sp->push_backpatch(i, lab) ||  /* Jumping forward */
                  sp->add_instr(i))
                MYSQL_YYABORT;
	    }
	  }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2382 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont;
	    sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

	    if (! lab || lab->type != SP_LAB_ITER)
	    {
	      my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      sp_instr_jump *i;
	      uint ip= sp->instructions();
	      uint n;

	      n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
	      if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
	            sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
	      n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
	      if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
	            sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
	      i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
	    }
	  }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2422 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    uint offset;
	    sp_instr_copen *i;

	    if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
	    {
	      my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
	        sp->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2439 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    uint offset;
	    sp_instr_cfetch *i;

	    if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
	    {
	      my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
	        sp->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2456 "sql_yacc.yy"
    { }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2458 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    uint offset;
	    sp_instr_cclose *i;

	    if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
	    {
	      my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
	        sp->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2484 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *spc= lex->spcont;
	    sp_variable_t *spv;

	    if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
	    {
	      my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      /* An SP local variable */
	      sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

	      i->add_to_varlist(spv);
	    }
	  }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2505 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *spc= lex->spcont;
	    sp_variable_t *spv;

	    if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
	    {
	      my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      /* An SP local variable */
	      sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

	      i->add_to_varlist(spv);
	    }
	  }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2527 "sql_yacc.yy"
    {
            if (Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2532 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont;
	    uint ip= sp->instructions();
	    sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
	  }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2547 "sql_yacc.yy"
    {
	    sp_head *sp= Lex->sphead;
	    sp_pcontext *ctx= Lex->spcont;
	    uint ip= sp->instructions();
	    sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
	        sp->add_instr(i))
              MYSQL_YYABORT;
	    sp->backpatch(ctx->pop_label());
	    sp->push_backpatch(i, ctx->push_label((char *)"", 0));
	  }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2559 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    lex->sphead->backpatch(lex->spcont->pop_label());
	  }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2579 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            if (lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT; /* For expr $3 */
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2586 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2597 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2605 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2613 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2631 "sql_yacc.yy"
    {
            if (Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT; /* For expr $3 */
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2636 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2646 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2655 "sql_yacc.yy"
    {
            if (Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT; /* For expr $3 */
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2660 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2668 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2677 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2692 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_pcontext *ctx= lex->spcont;
	    sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

	    if (lab)
	    {
	      my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
	                                   lex->sphead->instructions());
	      lab->type= SP_LAB_ITER;
	    }
	  }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2710 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

	    if ((yyvsp[(5) - (5)].lex_str).str)
	    {
	      if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
	      {
	        my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
	        MYSQL_YYABORT;
	      }
	    }
	    lex->sphead->backpatch(lab);
	  }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2727 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 2728 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 2733 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 2749 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 2765 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 2772 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 2780 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
	       together. No [[NOT] ATOMIC] yet, and we need to figure out how
	       make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
	    LEX *lex= Lex;
	    lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
	  }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 2789 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    sp_pcontext *ctx= lex->spcont;

  	    sp->backpatch(ctx->last_label());	/* We always have a label */
	    if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr_hpop *hpop= new sp_instr_hpop(sp->instructions(), ctx,
                                                     (yyvsp[(3) - (5)].spblock).hndlrs);
              if (hpop == NULL ||
	          sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
	    if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr_cpop *cpop= new sp_instr_cpop(sp->instructions(), ctx,
                                                     (yyvsp[(3) - (5)].spblock).curs);
              if (cpop == NULL ||
	          sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
	    lex->spcont= ctx->pop_context();
	  }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 2818 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    uint ip= lex->sphead->instructions();
	    sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
	    sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
	        lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 2828 "sql_yacc.yy"
    {
            if (Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 2833 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;
	    uint ip= sp->instructions();
	    sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
							       (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
	  }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 2848 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    uint ip= lex->sphead->instructions();
	    sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
	    sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
	        lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
	  }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 2859 "sql_yacc.yy"
    {
            if (Lex->sphead->reset_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 2864 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    uint ip= lex->sphead->instructions();
	    sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
	    sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD);
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
	  }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 2882 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 2884 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 2889 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 2891 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 2893 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 2897 "sql_yacc.yy"
    {}
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 2898 "sql_yacc.yy"
    {}
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 2900 "sql_yacc.yy"
    {
            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            if (!Lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, 0, TL_READ))
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 2906 "sql_yacc.yy"
    {
            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            if (!Lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (4)].table), NULL, 0, TL_READ))
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 2914 "sql_yacc.yy"
    {}
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 2915 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 2915 "sql_yacc.yy"
    {}
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 2919 "sql_yacc.yy"
    {}
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 2921 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 2921 "sql_yacc.yy"
    {}
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 2923 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 2923 "sql_yacc.yy"
    {}
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 2928 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->lock_option= using_update_log ? TL_READ_NO_INSERT : TL_READ;
	    if (lex->sql_command == SQLCOM_INSERT)
	      lex->sql_command= SQLCOM_INSERT_SELECT;
	    else if (lex->sql_command == SQLCOM_REPLACE)
	      lex->sql_command= SQLCOM_REPLACE_SELECT;
	    /*
              The following work only with the local list, the global list
              is created correctly in this case
	    */
	    lex->current_select->table_list.save_and_clear(&lex->save_list);
	    mysql_init_select(lex);
	    lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 2944 "sql_yacc.yy"
    {
	    Select->parsing_place= NO_MATTER;
	  }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 2948 "sql_yacc.yy"
    {
	    /*
              The following work only with the local list, the global list
              is created correctly in this case
	    */
	    Lex->current_select->table_list.push_front(&Lex->save_list);
	  }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 2958 "sql_yacc.yy"
    {}
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 2959 "sql_yacc.yy"
    {}
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 2962 "sql_yacc.yy"
    {}
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 2963 "sql_yacc.yy"
    {}
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 2966 "sql_yacc.yy"
    {}
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 2967 "sql_yacc.yy"
    {}
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 2970 "sql_yacc.yy"
    {}
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 2971 "sql_yacc.yy"
    {}
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 2974 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 2975 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 2978 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 2979 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 2982 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 2985 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 2986 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3002 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type); Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE; }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3003 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type); WARN_DEPRECATED("TYPE=storage_engine","ENGINE=storage_engine");   Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3004 "sql_yacc.yy"
    { Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number); Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;}
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3005 "sql_yacc.yy"
    { Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number); Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;}
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3006 "sql_yacc.yy"
    { Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num); Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;}
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3007 "sql_yacc.yy"
    { Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str; Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD; }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3008 "sql_yacc.yy"
    { Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str); Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3009 "sql_yacc.yy"
    { Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number); Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;}
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3011 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3026 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3031 "sql_yacc.yy"
    { Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM; Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3032 "sql_yacc.yy"
    { Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;  Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3033 "sql_yacc.yy"
    { Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);  Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3035 "sql_yacc.yy"
    {
	    my_error(ER_WARN_DEPRECATED_SYNTAX, MYF(0), "RAID_TYPE", "PARTITION");
	    MYSQL_YYABORT;
	  }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3040 "sql_yacc.yy"
    {
	    my_error(ER_WARN_DEPRECATED_SYNTAX, MYF(0), "RAID_CHUNKS", "PARTITION");
	    MYSQL_YYABORT;
	  }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3045 "sql_yacc.yy"
    {
	    my_error(ER_WARN_DEPRECATED_SYNTAX, MYF(0), "RAID_CHUNKSIZE", "PARTITION");
	    MYSQL_YYABORT;
	  }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3050 "sql_yacc.yy"
    {
	    /* Move the union list to the merge_list */
	    LEX *lex=Lex;
	    TABLE_LIST *table_list= lex->select_lex.get_table_list();
	    lex->create_info.merge_list= lex->select_lex.table_list;
	    lex->create_info.merge_list.elements--;
	    lex->create_info.merge_list.first=
	      (byte*) (table_list->next_local);
	    lex->select_lex.table_list.elements=1;
	    lex->select_lex.table_list.next=
	      (byte**) &(table_list->next_local);
	    table_list->next_local= 0;
	    lex->create_info.used_fields|= HA_CREATE_USED_UNION;
	  }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3066 "sql_yacc.yy"
    { Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num); Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;}
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3067 "sql_yacc.yy"
    { Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str; Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR; }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3068 "sql_yacc.yy"
    { Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;  Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR; }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3069 "sql_yacc.yy"
    { Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str; Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;  Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3074 "sql_yacc.yy"
    {
          HA_CREATE_INFO *cinfo= &Lex->create_info;
          if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
               cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
               !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
          {
            my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                     "CHARACTER SET ", cinfo->default_table_charset->csname,
                     "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
            MYSQL_YYABORT;
          }
	  Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
          Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
        }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3091 "sql_yacc.yy"
    {
          HA_CREATE_INFO *cinfo= &Lex->create_info;
          if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
               cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
               !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
        }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3107 "sql_yacc.yy"
    {
	  (yyval.db_type) = ha_resolve_by_name((yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length);
	  if ((yyval.db_type) == DB_TYPE_UNKNOWN) {
	    my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3116 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3117 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3118 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3119 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3120 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3121 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3124 "sql_yacc.yy"
    { (yyval.ulong_num)= RAID_TYPE_0; }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3125 "sql_yacc.yy"
    { (yyval.ulong_num)= RAID_TYPE_0; }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3126 "sql_yacc.yy"
    { (yyval.ulong_num)=(yyvsp[(1) - (1)].ulong_num);}
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3129 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3130 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3131 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3134 "sql_yacc.yy"
    {}
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3138 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3139 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3140 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3141 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3156 "sql_yacc.yy"
    {
	    Lex->col_list.empty();		/* Alloced by sql_alloc */
	  }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3163 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string), (yyvsp[(7) - (7)].key_alg) ? (yyvsp[(7) - (7)].key_alg) : (yyvsp[(3) - (7)].key_alg)))
              MYSQL_YYABORT;
	  }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3168 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (5)].key_type), (yyvsp[(2) - (5)].simple_string), HA_KEY_ALG_UNDEF))
              MYSQL_YYABORT;
	  }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3173 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string):(yyvsp[(1) - (8)].simple_string), (yyvsp[(4) - (8)].key_alg)))
              MYSQL_YYABORT;
	  }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3178 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            const char *key_name= (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string);
            Key *key= new foreign_key(key_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, key_name,
                                  HA_KEY_ALG_UNDEF, 1))
              MYSQL_YYABORT;
	  }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3195 "sql_yacc.yy"
    {
	    Lex->col_list.empty();		/* Alloced by sql_alloc */
	  }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3199 "sql_yacc.yy"
    {
	    Lex->col_list.empty();		/* Alloced by sql_alloc */
	  }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3214 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 3215 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 3219 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 3224 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
	   lex->length=lex->dec=0; lex->type=0;
	   lex->default_value= lex->on_update_value= 0;
           lex->comment=null_lex_str;
	   lex->charset=NULL;
	 }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 3232 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (add_field_to_list(lex->thd, (yyvsp[(1) - (4)].lex_str).str,
				(enum enum_field_types) (yyvsp[(3) - (4)].num),
				lex->length,lex->dec,lex->type,
				lex->default_value, lex->on_update_value, 
                                &lex->comment,
				lex->change,&lex->interval_list,lex->charset,
				lex->uint_geom_type))
	    MYSQL_YYABORT;
	}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 3245 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3246 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3247 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_FLOAT; }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 3248 "sql_yacc.yy"
    { Lex->length= (char*) "1";
					  (yyval.num)=FIELD_TYPE_BIT; }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 3250 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_BIT; }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 3251 "sql_yacc.yy"
    { Lex->length=(char*) "1";
					  (yyval.num)=FIELD_TYPE_TINY; }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 3253 "sql_yacc.yy"
    { Lex->length=(char*) "1";
					  (yyval.num)=FIELD_TYPE_TINY; }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 3255 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_STRING; }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 3256 "sql_yacc.yy"
    { Lex->length=(char*) "1";
					  (yyval.num)=FIELD_TYPE_STRING; }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 3258 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_STRING;
					  Lex->charset=national_charset_info; }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 3260 "sql_yacc.yy"
    { Lex->length=(char*) "1";
					  (yyval.num)=FIELD_TYPE_STRING;
					  Lex->charset=national_charset_info; }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 3263 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_STRING; }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 3265 "sql_yacc.yy"
    { Lex->length= (char*) "1";
					  Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_STRING; }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 3268 "sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_VARCHAR; }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 3269 "sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_VARCHAR;
					  Lex->charset=national_charset_info; }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 3271 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)= MYSQL_TYPE_VARCHAR; }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 3273 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_YEAR; }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 3274 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_DATE; }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 3275 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_TIME; }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 3277 "sql_yacc.yy"
    {
	    if (YYTHD->variables.sql_mode & MODE_MAXDB)
	      (yyval.num)=FIELD_TYPE_DATETIME;
	    else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
	      (yyval.num)=FIELD_TYPE_TIMESTAMP;
            }
	   }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 3289 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_DATETIME; }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 3290 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_TINY_BLOB; }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 3292 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_BLOB; }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 3295 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=FIELD_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 3306 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_MEDIUM_BLOB; }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 3308 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_LONG_BLOB; }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 3310 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin;
					  (yyval.num)=FIELD_TYPE_MEDIUM_BLOB; }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 3312 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_MEDIUM_BLOB; }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 3313 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_TINY_BLOB; }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 3314 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_BLOB; }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 3315 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_MEDIUM_BLOB; }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 3316 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_LONG_BLOB; }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 3318 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_NEWDECIMAL;}
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 3320 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_NEWDECIMAL;}
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 3322 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_NEWDECIMAL;}
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 3323 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 3324 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_ENUM; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 3325 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 3326 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_SET; }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 3327 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_MEDIUM_BLOB; }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 3329 "sql_yacc.yy"
    {
	    (yyval.num)=FIELD_TYPE_LONGLONG;
	    Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
		         UNIQUE_FLAG);
	  }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 3337 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 3338 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 3339 "sql_yacc.yy"
    { Lex->length= (char*)"25";
                                (yyval.num)= Field::GEOM_POINT;
                              }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 3342 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 3343 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 3344 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 3345 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 3346 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 3350 "sql_yacc.yy"
    {}
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 3354 "sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 3355 "sql_yacc.yy"
    {}
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 3359 "sql_yacc.yy"
    {}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 3360 "sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 3364 "sql_yacc.yy"
    {}
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 3365 "sql_yacc.yy"
    {}
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 3366 "sql_yacc.yy"
    {}
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 3367 "sql_yacc.yy"
    {}
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 3368 "sql_yacc.yy"
    {}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 3372 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_LONG; }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 3373 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_TINY; }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 3374 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_SHORT; }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 3375 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_INT24; }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 3376 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_LONGLONG; }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 3379 "sql_yacc.yy"
    { (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
			      FIELD_TYPE_FLOAT : FIELD_TYPE_DOUBLE; }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 3381 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_DOUBLE; }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 3382 "sql_yacc.yy"
    { (yyval.num)=FIELD_TYPE_DOUBLE; }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 3386 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 3387 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 3388 "sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 3392 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->length=(yyvsp[(2) - (5)].lex_str).str; lex->dec=(yyvsp[(4) - (5)].lex_str).str;
	}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 3398 "sql_yacc.yy"
    {}
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 3399 "sql_yacc.yy"
    {}
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 3402 "sql_yacc.yy"
    {}
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 3403 "sql_yacc.yy"
    {}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 3406 "sql_yacc.yy"
    {}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 3407 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 3408 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 3411 "sql_yacc.yy"
    { Lex->length=(char*) NULL; }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 3412 "sql_yacc.yy"
    {}
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 3415 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 3416 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 3417 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 3418 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 3421 "sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 3422 "sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 3425 "sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 3426 "sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 3429 "sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 3433 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 3434 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 3435 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 3437 "sql_yacc.yy"
    { Lex->on_update_value= new Item_func_now_local(); }
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 3438 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 3440 "sql_yacc.yy"
    { 
	    LEX *lex=Lex;
	    lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG; 
	    lex->alter_info.flags|= ALTER_ADD_INDEX; 
	  }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 3446 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG; 
	    lex->alter_info.flags|= ALTER_ADD_INDEX; 
	  }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 3452 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->type|= UNIQUE_FLAG; 
	    lex->alter_info.flags|= ALTER_ADD_INDEX; 
	  }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 3458 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->type|= UNIQUE_KEY_FLAG; 
	    lex->alter_info.flags|= ALTER_ADD_INDEX; 
	  }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 3463 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 3465 "sql_yacc.yy"
    {
	    if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
	    {
	      my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
	      MYSQL_YYABORT;
	    }
	    else
	    {
	      Lex->charset=(yyvsp[(2) - (2)].charset);
	    }
	  }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 3481 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 3486 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 3490 "sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 3491 "sql_yacc.yy"
    {}
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 3496 "sql_yacc.yy"
    {
	  if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
	  {
	    my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 3503 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 3507 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 3508 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 3511 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 3512 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 3517 "sql_yacc.yy"
    {
	  if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
	      !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
	  {
	    my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 3525 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 3529 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 3530 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 3534 "sql_yacc.yy"
    {
	  if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
	  {
	    my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 3543 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 3544 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 3548 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 3549 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 3552 "sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 3553 "sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 3556 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 3557 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 3558 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 3560 "sql_yacc.yy"
    {
	  if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                   MY_CS_PRIMARY,MYF(0))))
	  {
	    my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 3568 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 3569 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 3572 "sql_yacc.yy"
    { }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 3573 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 3576 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 3577 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 3579 "sql_yacc.yy"
    {
	  if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                   MY_CS_PRIMARY,MYF(0))))
	  {
	    my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 3587 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 3596 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
	  lex->ref_list.empty();
	}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 3602 "sql_yacc.yy"
    {
	  (yyval.table)=(yyvsp[(2) - (4)].table);
	}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 3607 "sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 3608 "sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 3612 "sql_yacc.yy"
    {
            key_part_spec *key= new key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 3619 "sql_yacc.yy"
    {
            key_part_spec *key= new key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 3629 "sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 3630 "sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 3633 "sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 3634 "sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 3637 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 3638 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 3639 "sql_yacc.yy"
    { Lex->fk_match_option= foreign_key::FK_MATCH_FULL; }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 3640 "sql_yacc.yy"
    { Lex->fk_match_option= foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 3641 "sql_yacc.yy"
    { Lex->fk_match_option= foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 3644 "sql_yacc.yy"
    { (yyval.num)= (int) foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 3645 "sql_yacc.yy"
    { (yyval.num)= (int) foreign_key::FK_OPTION_CASCADE; }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 3646 "sql_yacc.yy"
    { (yyval.num)= (int) foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 3647 "sql_yacc.yy"
    { (yyval.num)= (int) foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 3648 "sql_yacc.yy"
    { (yyval.num)= (int) foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 3651 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 3655 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT; }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 3657 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
	    (yyval.key_type)= Key::SPATIAL;
#else
	    my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
	    MYSQL_YYABORT;
#endif
	  }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 3668 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 3669 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 3672 "sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 3673 "sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 3676 "sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 3681 "sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 3682 "sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 3683 "sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 3686 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 3688 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
	    (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
	    MYSQL_YYABORT;
#endif
	  }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 3700 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 3701 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 3705 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 3706 "sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 3707 "sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 3710 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 3712 "sql_yacc.yy"
    {
	    (yyval.key_alg)= HA_KEY_ALG_RTREE;
	  }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 3715 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 3718 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 3719 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 3723 "sql_yacc.yy"
    {
            (yyval.key_part)= new key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 3729 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)=new key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 3742 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 3743 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 3746 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 3747 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 3750 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 3751 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 3759 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= thd->lex;
	  lex->sql_command= SQLCOM_ALTER_TABLE;
	  lex->name= 0;
	  lex->duplicates= DUP_ERROR; 
	  if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
						 TL_OPTION_UPDATING))
	    MYSQL_YYABORT;
	  lex->col_list.empty();
          lex->select_lex.init_order();
	  lex->select_lex.db=
            ((TABLE_LIST*) lex->select_lex.table_list.first)->db;
          lex->name=0;
	  bzero((char*) &lex->create_info,sizeof(lex->create_info));
	  lex->create_info.db_type= DB_TYPE_DEFAULT;
	  lex->create_info.default_table_charset= NULL;
	  lex->create_info.row_type= ROW_TYPE_NOT_USED;
          lex->alter_info.reset();
	}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 3780 "sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 3782 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 3787 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command=SQLCOM_ALTER_DB;
	    lex->name= (yyvsp[(3) - (5)].simple_string);
            if (lex->name == NULL && lex->copy_db_to(&lex->name, NULL))
              MYSQL_YYABORT;
	  }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 3795 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
	      MYSQL_YYABORT;
	    }
	    bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 3806 "sql_yacc.yy"
    {
	    LEX *lex=Lex;

	    lex->sql_command= SQLCOM_ALTER_PROCEDURE;
	    lex->spname= (yyvsp[(3) - (5)].spname);
	  }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 3813 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
	      MYSQL_YYABORT;
	    }
	    bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 3824 "sql_yacc.yy"
    {
	    LEX *lex=Lex;

	    lex->sql_command= SQLCOM_ALTER_FUNCTION;
	    lex->spname= (yyvsp[(3) - (5)].spname);
	  }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 3832 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
	    LEX *lex= thd->lex;
	    if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
	    lex->sql_command= SQLCOM_CREATE_VIEW;
	    lex->create_view_mode= VIEW_ALTER;
	    /* first table in list is target VIEW name */
	    lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (6)].table), NULL, TL_OPTION_UPDATING);
	  }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 3846 "sql_yacc.yy"
    {}
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 3850 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 3851 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 3854 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 3855 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 3861 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->change=0;
	  lex->alter_info.flags|= ALTER_ADD_COLUMN;
	}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 3868 "sql_yacc.yy"
    { }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 3870 "sql_yacc.yy"
    {
	    Lex->alter_info.flags|= ALTER_ADD_INDEX;
	  }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 3874 "sql_yacc.yy"
    {
	    Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 3878 "sql_yacc.yy"
    {
	     LEX *lex=Lex;
	     lex->change= (yyvsp[(3) - (3)].lex_str).str;
	     lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	  }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 3885 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
	    lex->charset= NULL;
	    lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 3894 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,(yyvsp[(3) - (6)].lex_str).str,
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
				  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
				  lex->uint_geom_type))
	       MYSQL_YYABORT;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 3907 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
	    lex->alter_info.drop_list.push_back(ad);
	    lex->alter_info.flags|= ALTER_DROP_COLUMN;
	  }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 3916 "sql_yacc.yy"
    {
	    Lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 3920 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
	    lex->alter_info.drop_list.push_back(ad);
	    lex->alter_info.flags|= ALTER_DROP_INDEX;
	  }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 3929 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
	    lex->alter_info.drop_list.push_back(ad);
	    lex->alter_info.flags|= ALTER_DROP_INDEX;
	  }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 3938 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
	    lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 3944 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
	    lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 3950 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str, (yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
	    lex->alter_info.alter_list.push_back(ac);
	    lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
	  }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 3959 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
	    lex->alter_info.alter_list.push_back(ac);
	    lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
	  }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 3968 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, NULL))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name((yyvsp[(3) - (3)].table)->db.str)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
	    lex->name= (yyvsp[(3) - (3)].table)->table.str;
	    lex->alter_info.flags|= ALTER_RENAME;
	  }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 3986 "sql_yacc.yy"
    {
	    if (!(yyvsp[(4) - (5)].charset))
	    {
	      THD *thd= YYTHD;
	      (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
	    }
	    (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
	    if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
	    {
	      my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
	      MYSQL_YYABORT;
	    }
	    LEX *lex= Lex;
	    lex->create_info.table_charset=
	      lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
	    lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
					    HA_CREATE_USED_DEFAULT_CHARSET);
	    lex->alter_info.flags|= ALTER_CONVERT;
	  }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 4007 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->alter_info.flags|= ALTER_OPTIONS;
	  }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 4012 "sql_yacc.yy"
    {
	    Lex->alter_info.flags|= ALTER_FORCE;
	   }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 4016 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->alter_info.flags|= ALTER_ORDER;
	  }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 4022 "sql_yacc.yy"
    {}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 4023 "sql_yacc.yy"
    {}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 4026 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 4027 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 4031 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 4032 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 4033 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 4037 "sql_yacc.yy"
    {}
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 4038 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 4039 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 4042 "sql_yacc.yy"
    {}
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 4043 "sql_yacc.yy"
    {}
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 4044 "sql_yacc.yy"
    {}
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 4045 "sql_yacc.yy"
    {}
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 4053 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
	    lex->type = 0;
	    /* We'll use mi structure for UNTIL options */
	    bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 4062 "sql_yacc.yy"
    {}
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 4064 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
	    lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 4071 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
           lex->sql_command = SQLCOM_SLAVE_START;
	   lex->type = 0;
	    /* We'll use mi structure for UNTIL options */
	    bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 4079 "sql_yacc.yy"
    {}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 4081 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
           lex->sql_command = SQLCOM_SLAVE_STOP;
	   lex->type = 0;
         }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 4091 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->sql_command= SQLCOM_BEGIN;
          lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
        }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 4099 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 4101 "sql_yacc.yy"
    {
           (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
        }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 4107 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 4109 "sql_yacc.yy"
    {}
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 4118 "sql_yacc.yy"
    {}
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 4119 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 4120 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 4124 "sql_yacc.yy"
    {}
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 4126 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }

          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 4148 "sql_yacc.yy"
    {
	   Lex->sql_command = SQLCOM_RESTORE_TABLE;
	}
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 4152 "sql_yacc.yy"
    {
	  Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
        }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 4158 "sql_yacc.yy"
    {
	   Lex->sql_command = SQLCOM_BACKUP_TABLE;
	}
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 4162 "sql_yacc.yy"
    {
	  Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
        }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 4168 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
	   lex->sql_command = SQLCOM_CHECKSUM;
	}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 4173 "sql_yacc.yy"
    {}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 4177 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 4178 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 4179 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 4184 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
	   lex->sql_command = SQLCOM_REPAIR;
           lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
	   lex->check_opt.init();
	}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 4191 "sql_yacc.yy"
    {}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 4195 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 4196 "sql_yacc.yy"
    {}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 4199 "sql_yacc.yy"
    {}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 4200 "sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 4203 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 4204 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 4205 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 4209 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
	   lex->sql_command = SQLCOM_ANALYZE;
           lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
	   lex->check_opt.init();
	}
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 4216 "sql_yacc.yy"
    {}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 4221 "sql_yacc.yy"
    {
	  LEX *lex=Lex;

	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command = SQLCOM_CHECK;
	  lex->check_opt.init();
	}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 4233 "sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 4237 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 4238 "sql_yacc.yy"
    {}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 4241 "sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 4242 "sql_yacc.yy"
    {}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 4245 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 4246 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 4247 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 4248 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 4249 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 4250 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 4254 "sql_yacc.yy"
    {
	   LEX *lex=Lex;
	   lex->sql_command = SQLCOM_OPTIMIZE;
           lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
	   lex->check_opt.init();
	}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 4261 "sql_yacc.yy"
    {}
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 4265 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 4266 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 4267 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 4272 "sql_yacc.yy"
    {
          Lex->sql_command= SQLCOM_RENAME_TABLE;
	}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 4276 "sql_yacc.yy"
    {}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 4278 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 4285 "sql_yacc.yy"
    {
          if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
            MYSQL_YYABORT;
        }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 4290 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 4302 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  SELECT_LEX *sl= lex->current_select;
	  if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
				     TL_IGNORE) ||
	      !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
				     TL_IGNORE))
	    MYSQL_YYABORT;
	}
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 4314 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
	  lex->ident= (yyvsp[(5) - (5)].lex_str);
        }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 4327 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          SELECT_LEX *sel= &lex->select_lex;
          if (!sel->add_table_to_list(lex->thd, (yyvsp[(1) - (2)].table), NULL, 0,
                                      TL_READ,
                                      sel->get_use_index(),
                                      (List<String> *)0))
            MYSQL_YYABORT;
        }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 4339 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 4340 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 4345 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command=SQLCOM_PRELOAD_KEYS;
	}
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 4350 "sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 4359 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  SELECT_LEX *sel= &lex->select_lex;
	  if (!sel->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num),
                                      TL_READ,
                                      sel->get_use_index(),
                                      (List<String> *)0))
            MYSQL_YYABORT;
	}
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 4371 "sql_yacc.yy"
    { Select->interval_list.empty(); }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 4373 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          SELECT_LEX *sel= &lex->select_lex;
          sel->use_index= sel->interval_list;
        }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 4381 "sql_yacc.yy"
    { Lex->select_lex.use_index_ptr= 0; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 4383 "sql_yacc.yy"
    {
            SELECT_LEX *sel= &Lex->select_lex;
	    sel->use_index_ptr= &sel->use_index;
	  }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 4391 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 4392 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 4402 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->sql_command= SQLCOM_SELECT;
	}
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 4416 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
	    if (sel->set_braces(1))
	    {
              my_parse_error(ER(ER_SYNTAX_ERROR));
	      MYSQL_YYABORT;
	    }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
	    if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 4449 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
          if (lex == NULL)
            MYSQL_YYABORT;
          SELECT_LEX * sel= lex->current_select;
          if (lex->current_select->set_braces(0))
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
	  if (sel->linkage == UNION_TYPE &&
	      sel->master_unit()->first_select()->braces)
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 4470 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  SELECT_LEX *sel= lex->current_select;
	  if (sel->linkage != UNION_TYPE)
	    mysql_init_select(lex);
	  lex->current_select->parsing_place= SELECT_LIST;
	}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 4478 "sql_yacc.yy"
    {
	  Select->parsing_place= NO_MATTER;
	}
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 4484 "sql_yacc.yy"
    {}
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 4493 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 4508 "sql_yacc.yy"
    {
	    if (test_all_bits(Select->options, SELECT_ALL | SELECT_DISTINCT))
	    {
	      my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
	    }
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 4522 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 4524 "sql_yacc.yy"
    {
	    if (check_simple_select())
	      MYSQL_YYABORT;
	    Lex->lock_option= TL_READ_HIGH_PRIORITY;
	  }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 4529 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 4530 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 4531 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 4533 "sql_yacc.yy"
    {
	    if (check_simple_select())
	      MYSQL_YYABORT;
	    Select->options|= OPTION_BUFFER_RESULT;
	  }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 4539 "sql_yacc.yy"
    {
	    if (check_simple_select())
	      MYSQL_YYABORT;
	    Select->options|= OPTION_FOUND_ROWS;
	  }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 4545 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
	    Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 4551 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
	      Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
	  }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 4564 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 4570 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->current_select->set_lock_for_tables(TL_WRITE);
	    lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
	  }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 4577 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->current_select->
	      set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
	    lex->safe_to_cache_query=0;
	  }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 4589 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
            Item *item= new Item_field(&thd->lex->current_select->context,
                                       NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
	    if (add_item_to_list(thd, item))
	      MYSQL_YYABORT;
	    (thd->lex->current_select->with_wild)++;
	  }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 4603 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

	    if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
	      MYSQL_YYABORT;
	    if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
	      (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
	    else if (!(yyvsp[(2) - (4)].item)->name)
            {
	      (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
	    }
	  }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 4628 "sql_yacc.yy"
    {
          (yyval.simple_string)= (char*) YYLIP->tok_start;
        }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 4633 "sql_yacc.yy"
    {
          (yyval.simple_string)=(char*) YYLIP->tok_end;
        }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 4638 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 4639 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 4642 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 4643 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 4644 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 4645 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 4646 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 4650 "sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 4651 "sql_yacc.yy"
    {}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 4656 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 4707 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 4714 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 4757 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 4763 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 4769 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 4775 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 4781 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 4787 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 4793 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 4803 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 4809 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 4815 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 4821 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 4827 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 4836 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 4842 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 4852 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 4858 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 4866 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 4872 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 4882 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 4888 "sql_yacc.yy"
    {
            Item_func_between *item= new Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 4896 "sql_yacc.yy"
    {
            Item *item1= new Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 4906 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 4912 "sql_yacc.yy"
    {
            Item *item= new Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item), Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 4921 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 4927 "sql_yacc.yy"
    {
            Item *item= new Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 4939 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 4945 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 4951 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 4957 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 4963 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 4969 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 4975 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 4981 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 4987 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 4993 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 4999 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 5005 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 5011 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 5017 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 5030 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 5031 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 5032 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 5033 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 5034 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 5035 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 5038 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 5039 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 5044 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(2) - (2)].item); }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 5050 "sql_yacc.yy"
    {
            Item *item= new Item_string((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length, YYTHD->charset());
            if (item == NULL)
              MYSQL_YYABORT;
	    (yyval.item)= new Item_func_set_collation((yyvsp[(1) - (3)].item), item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 5063 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 5069 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 5071 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 5077 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 5083 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 5089 "sql_yacc.yy"
    { 
            (yyval.item)= new Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex)); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 5094 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 5096 "sql_yacc.yy"
    {
	    (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
	    (yyval.item)= new Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 5103 "sql_yacc.yy"
    {
	    (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
	    (yyval.item)= new Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 5110 "sql_yacc.yy"
    {
            (yyval.item)= new Item_exists_subselect((yyvsp[(3) - (4)].select_lex)); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 5116 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 5118 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *item= new Item_func_match(*(yyvsp[(2) - (7)].item_list),(yyvsp[(6) - (7)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(item);
            (yyval.item)= item;
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 5127 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 5133 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast((yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL, &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 5139 "sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.item)= create_func_cast((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec, lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 5146 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 5152 "sql_yacc.yy"
    {
	    (yyval.item)= create_func_cast((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec, Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 5158 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 5164 "sql_yacc.yy"
    {
	    if ((yyvsp[(3) - (4)].item)->is_splocal())
	    {
	      Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

	      my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
	      MYSQL_YYABORT;
	    }
	    (yyval.item)= new Item_default_value(Lex->current_context(), (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 5177 "sql_yacc.yy"
    {
            (yyval.item)= new Item_insert_value(Lex->current_context(), (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 5183 "sql_yacc.yy"
    {
	    if (!(yyvsp[(1) - (3)].symbol).symbol->create_func)
	    {
              my_error(ER_FEATURE_DISABLED, MYF(0),
                       (yyvsp[(1) - (3)].symbol).symbol->group->name,
                       (yyvsp[(1) - (3)].symbol).symbol->group->needed_define);
	      MYSQL_YYABORT;
	    }
	    (yyval.item)= ((Item*(*)(void))((yyvsp[(1) - (3)].symbol).symbol->create_func))();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 5196 "sql_yacc.yy"
    {
	    if (!(yyvsp[(1) - (4)].symbol).symbol->create_func)
	    {
              my_error(ER_FEATURE_DISABLED, MYF(0),
                       (yyvsp[(1) - (4)].symbol).symbol->group->name,
                       (yyvsp[(1) - (4)].symbol).symbol->group->needed_define);
	      MYSQL_YYABORT;
	    }
	    (yyval.item)= ((Item*(*)(Item*))((yyvsp[(1) - (4)].symbol).symbol->create_func))((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 5209 "sql_yacc.yy"
    {
	    if (!(yyvsp[(1) - (6)].symbol).symbol->create_func)
	    {
	      my_error(ER_FEATURE_DISABLED, MYF(0),
                       (yyvsp[(1) - (6)].symbol).symbol->group->name,
                       (yyvsp[(1) - (6)].symbol).symbol->group->needed_define);
	      MYSQL_YYABORT;
	    }
	    (yyval.item)= ((Item*(*)(Item*,Item*))((yyvsp[(1) - (6)].symbol).symbol->create_func))((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 5222 "sql_yacc.yy"
    {
	    if (!(yyvsp[(1) - (8)].symbol).symbol->create_func)
	    {
              my_error(ER_FEATURE_DISABLED, MYF(0),
                       (yyvsp[(1) - (8)].symbol).symbol->group->name,
                       (yyvsp[(1) - (8)].symbol).symbol->group->needed_define);
	      MYSQL_YYABORT;
	    }
	    (yyval.item)= ((Item*(*)(Item*,Item*,Item*))((yyvsp[(1) - (8)].symbol).symbol->create_func))((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 5235 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 5241 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 5247 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 5253 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_atan((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 5259 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_atan((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 5265 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 5271 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 5277 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 5283 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 5289 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 5295 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_concat(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 5301 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new Item_func_concat_ws(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 5308 "sql_yacc.yy"
    {
            if (Lex->add_time_zone_tables_to_query_tables(YYTHD))
              MYSQL_YYABORT;
	    (yyval.item)= new Item_func_convert_tz((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 5316 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 5323 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 5330 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query=0;
	  }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 5337 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 5344 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (7)].item),(yyvsp[(5) - (7)].item),(yyvsp[(6) - (7)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 5350 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (7)].item),(yyvsp[(5) - (7)].item),(yyvsp[(6) - (7)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 5356 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
	  }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 5363 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 5369 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 5375 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new Item_func_elt(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 5382 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_make_set((yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 5388 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_encrypt((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->uncacheable(UNCACHEABLE_RAND);
	  }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 5395 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_encrypt((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 5401 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_decode((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].lex_str).str);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 5407 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_encode((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].lex_str).str);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 5413 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_des_decrypt((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 5419 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_des_decrypt((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 5425 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_des_encrypt((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 5431 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_des_encrypt((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 5437 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_export_set((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 5443 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_export_set((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].item), (yyvsp[(7) - (10)].item), (yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 5449 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_export_set((yyvsp[(3) - (12)].item), (yyvsp[(5) - (12)].item), (yyvsp[(7) - (12)].item), (yyvsp[(9) - (12)].item), (yyvsp[(11) - (12)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 5455 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_format((yyvsp[(3) - (6)].item),atoi((yyvsp[(5) - (6)].lex_str).str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 5461 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_from_unixtime((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 5467 "sql_yacc.yy"
    {
            Item *item= new Item_func_from_unixtime((yyvsp[(3) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
	    (yyval.item)= new Item_func_date_format (item, (yyvsp[(5) - (6)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 5476 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new Item_func_field(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 5483 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
	    (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
	    my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
	    MYSQL_YYABORT;
#endif
	  }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 5496 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 5502 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 5508 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 5514 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 5521 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(4) - (4)].item),(yyvsp[(1) - (4)].item),(yyvsp[(2) - (4)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 5527 "sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() != Item::ROW_ITEM)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)= new Item_func_interval((Item_row *)(yyvsp[(1) - (1)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 5538 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_last_insert_id();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query= 0;
	  }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 5545 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_last_insert_id((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query= 0;
	  }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 5552 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 5558 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 5564 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_locate((yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 5570 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new Item_func_max(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 5577 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new Item_func_min(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 5584 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_log((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 5590 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_log((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 5596 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_master_pos_wait((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query=0;
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 5603 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_master_pos_wait((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query=0;
	  }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 5610 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 5616 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 5622 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_mod( (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 5628 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 5634 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 5641 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 5648 "sql_yacc.yy"
    {
	    (yyval.item)= YYTHD->variables.old_passwords ?
              (Item *) new Item_func_old_password((yyvsp[(3) - (4)].item)) :
	      (Item *) new Item_func_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 5656 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 5662 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 5668 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 5674 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_rand((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 5681 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_rand();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 5688 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 5694 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 5700 "sql_yacc.yy"
    {
            Item *item= new Item_int((char*)"0",0,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new Item_func_round((yyvsp[(3) - (4)].item), item, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 5709 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 5715 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query= 0;
	  }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 5722 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 5728 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 5734 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 5740 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 5746 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 5752 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 5758 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 5764 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_substr_index((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 5770 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new Item_func_sysdate_local();
            else (yyval.item)= new Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 5779 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else (yyval.item)= new Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 5788 "sql_yacc.yy"
    {
            (yyval.item)= new Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 5794 "sql_yacc.yy"
    {
            (yyval.item)= new Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 5800 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 5806 "sql_yacc.yy"
    {
            (yyval.item)= new Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 5812 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 5818 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 5824 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 5830 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 5836 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 5842 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 5848 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 5854 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 5860 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 5866 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 5872 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_name *name= new sp_name((yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true);
            if (name == NULL)
              MYSQL_YYABORT;
	    name->init_qname(YYTHD);
	    sp_add_used_routine(lex, YYTHD, name, TYPE_ENUM_FUNCTION);
	    if ((yyvsp[(5) - (6)].item_list))
	      (yyval.item)= new Item_func_sp(Lex->current_context(), name, *(yyvsp[(5) - (6)].item_list));
	    else
	      (yyval.item)= new Item_func_sp(Lex->current_context(), name);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    lex->safe_to_cache_query=0;
	  }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 5888 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            lex->current_select->udf_list.push_front(udf);
#endif
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 5906 "sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifdef HAVE_DLOPEN
            udf_func *udf;

            if (NULL != (udf= lex->current_select->udf_list.pop()))
            {
              if (udf->type == UDFTYPE_AGGREGATE)
                Select->in_sum_expr--;

              switch (udf->returns) {
              case STRING_RESULT:
                if (udf->type == UDFTYPE_FUNCTION)
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_func_udf_str(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_func_udf_str(udf);
                }
                else
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_sum_udf_str(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_sum_udf_str(udf);
                }
                break;
              case REAL_RESULT:
                if (udf->type == UDFTYPE_FUNCTION)
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_func_udf_float(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_func_udf_float(udf);
                }
                else
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_sum_udf_float(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_sum_udf_float(udf);
                }
                break;
              case INT_RESULT:
                if (udf->type == UDFTYPE_FUNCTION)
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_func_udf_int(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_func_udf_int(udf);
                }
                else
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_sum_udf_int(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_sum_udf_int(udf);
                }
                break;
              case DECIMAL_RESULT:
                if (udf->type == UDFTYPE_FUNCTION)
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_func_udf_decimal(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_func_udf_decimal(udf);
                }
                else
                {
                  if ((yyvsp[(4) - (5)].item_list) != NULL)
                    (yyval.item) = new Item_sum_udf_decimal(udf, *(yyvsp[(4) - (5)].item_list));
                  else
                    (yyval.item) = new Item_sum_udf_decimal(udf);
                }
                break;
              default:
                MYSQL_YYABORT;
              }
            }
            else
#endif /* HAVE_DLOPEN */
            {
              THD *thd= lex->thd;
              LEX_STRING db;
              if (! thd->db && ! lex->sphead)
              {
                /*
                  The proper error message should be in the lines of:
                    Can't resolve <name>() to a function call,
                    because this function:
                    - is not a native function,
                    - is not a user defined function,
                    - can not match a stored function since no database is selected.
                  Reusing ER_SP_DOES_NOT_EXIST have a message consistent with
                  the case when a default database exist, see below.
                */
                my_error(ER_SP_DOES_NOT_EXIST, MYF(0),
                         "FUNCTION", (yyvsp[(1) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
              
              if (lex->copy_db_to(&db.str, &db.length))
                MYSQL_YYABORT;

              /*
                From here, the parser assumes <name>() is a stored function,
                as a last choice. This later can lead to ER_SP_DOES_NOT_EXIST.
              */
              sp_name *name= new sp_name(db, (yyvsp[(1) - (5)].lex_str), false);
              if (name == NULL)
                MYSQL_YYABORT;
              name->init_qname(thd);

              sp_add_used_routine(lex, YYTHD, name, TYPE_ENUM_FUNCTION);
              if ((yyvsp[(4) - (5)].item_list))
                (yyval.item)= new Item_func_sp(Lex->current_context(), name, *(yyvsp[(4) - (5)].item_list));
              else
                (yyval.item)= new Item_func_sp(Lex->current_context(), name);
            }          
            lex->safe_to_cache_query=0;

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6031 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_unique_users((yyvsp[(3) - (10)].item),atoi((yyvsp[(5) - (10)].lex_str).str),atoi((yyvsp[(7) - (10)].lex_str).str), * (yyvsp[(9) - (10)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6037 "sql_yacc.yy"
    {
	    (yyval.item)= new Item_func_unix_timestamp();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->safe_to_cache_query=0;
	  }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6044 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_unix_timestamp((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6050 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6057 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6064 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6071 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6078 "sql_yacc.yy"
    {
            Item *item= new Item_int((char*) "0",
                                     YYTHD->variables.default_week_format,
                                     1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new Item_func_week((yyvsp[(3) - (4)].item), item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6089 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6095 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6101 "sql_yacc.yy"
    {
            Item *item= new Item_int((char*) "0",0,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new Item_func_yearweek((yyvsp[(3) - (4)].item), item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6110 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_yearweek((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6116 "sql_yacc.yy"
    {
	    (yyval.item)=new Item_func_benchmark((yyvsp[(3) - (6)].ulong_num),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
	  }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6123 "sql_yacc.yy"
    {
            (yyval.item)=new Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6132 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), Item_func::SP_CONTAINS_FUNC)); }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6134 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6136 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6138 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_wkb((yyvsp[(3) - (4)].item))); }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6140 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_wkb((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6142 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point)); }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6146 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                  Geometry::wkb_linestring, Geometry::wkb_point)); }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6149 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW( Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                   Geometry::wkb_multilinestring, Geometry::wkb_linestring)); }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6152 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6154 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6156 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 6158 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6160 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6162 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6164 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                  Geometry::wkb_multipoint, Geometry::wkb_point)); }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6167 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                  Geometry::wkb_multipolygon, Geometry::wkb_polygon)); }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6170 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item))); }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 6172 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 6174 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6176 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 6178 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 6180 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
	          Geometry::wkb_polygon, Geometry::wkb_linestring)); }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 6183 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 6185 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 6187 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (4)].item))); }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 6189 "sql_yacc.yy"
    { (yyval.item)= GEOM_NEW(Item_func_geometry_from_text((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item))); }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 6193 "sql_yacc.yy"
    { (yyval.num)= FT_NL;  }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 6194 "sql_yacc.yy"
    { (yyval.num)= FT_NL | FT_EXPAND; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 6195 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 6199 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 6200 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 6204 "sql_yacc.yy"
    {
            List<Item> *list= new List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            Select->expr_list.push_front(list);
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 6211 "sql_yacc.yy"
    { (yyval.item_list)= Select->expr_list.pop(); }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 6216 "sql_yacc.yy"
    {
	    Select->expr_list.head()->push_back((yyvsp[(1) - (1)].item));
	  }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 6220 "sql_yacc.yy"
    {
	    Select->expr_list.head()->push_back((yyvsp[(3) - (3)].item));
	  }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 6227 "sql_yacc.yy"
    {
          udf_func *udf= Select->udf_list.head();
          /*
           Use Item::name as a storage for the attribute value of user
           defined function argument. It is safe to use Item::name
           because the syntax will not allow having an explicit name here.
           See WL#1017 re. udf attributes.
          */
	  if ((yyvsp[(4) - (4)].lex_str).str)
          {
            if (!udf)
            {
              /*
                Disallow using AS to specify explicit names for the arguments
                of stored routine calls
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
	    (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
          }
	  else if (udf)
	    (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
	  (yyval.item)= (yyvsp[(2) - (4)].item);
	}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 6258 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 6264 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 6270 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 6276 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 6282 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 6288 "sql_yacc.yy"
    {
            Item *item= new Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)=new Item_sum_count(new Item_int((int32) 0L,1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 6297 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 6303 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 6305 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 6307 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_count_distinct(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 6313 "sql_yacc.yy"
    {
            (yyval.item)= new Item_sum_unique_users((yyvsp[(3) - (10)].item),atoi((yyvsp[(5) - (10)].lex_str).str),atoi((yyvsp[(7) - (10)].lex_str).str),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 6319 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 6330 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 6336 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 6342 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 6348 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 6354 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 6360 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 6366 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 6372 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 6378 "sql_yacc.yy"
    {
            (yyval.item)=new Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 6384 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 6388 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
	    sel->in_sum_expr--;
	    (yyval.item)=new Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                          sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	    (yyvsp[(5) - (8)].item_list)->empty();
	  }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 6400 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 6408 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 6415 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 6423 "sql_yacc.yy"
    {
            (yyval.item)= new Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 6431 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 6443 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 6444 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 6448 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 6453 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 6459 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
	  }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 6463 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list=
	      (SQL_LIST*) sql_memdup((char*) &select->order_list,
				     sizeof(st_sql_list));
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
	    select->order_list.empty();
	  }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 6476 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  if (lex->current_select->inc_in_sum_expr())
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
	}
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 6485 "sql_yacc.yy"
    {
	  Select->in_sum_expr--;
	  (yyval.item)= (yyvsp[(3) - (3)].item);
	}
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 6491 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 6492 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 6493 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 6494 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 6495 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 6496 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 6497 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 6498 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 6499 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 6500 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 6501 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 6505 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 6506 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 6510 "sql_yacc.yy"
    {
          List<Item> *list= new List<Item>;
          if (list == NULL)
            MYSQL_YYABORT;
          Select->expr_list.push_front(list);
        }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 6517 "sql_yacc.yy"
    { (yyval.item_list)= Select->expr_list.pop(); }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 6520 "sql_yacc.yy"
    { Select->expr_list.head()->push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 6521 "sql_yacc.yy"
    { Select->expr_list.head()->push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 6524 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 6525 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 6528 "sql_yacc.yy"
    {
          List<Item> *list= new List<Item>;
          if (list == NULL)
            MYSQL_YYABORT;
          Select->expr_list.push_front(new List<Item>);
        }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 6535 "sql_yacc.yy"
    { (yyval.item_list)= Select->expr_list.pop(); }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 6538 "sql_yacc.yy"
    { Select->expr_list.head()->push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 6539 "sql_yacc.yy"
    { Select->expr_list.head()->push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 6542 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 6543 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 6546 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 6547 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 6551 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 6559 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 6568 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 6570 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 6578 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 6583 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 6585 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 6605 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 6607 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 6610 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 6618 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 6625 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 6633 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 6641 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
	  }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 6645 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 6647 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 6655 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 6663 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 6671 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
	  }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 6675 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 6681 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
 	    add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
	    (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
	    (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
	  }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 6691 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 6699 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 6708 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
	  }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 6712 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 6719 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
	    add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
	    LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
	  }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 6728 "sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 6729 "sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 6730 "sql_yacc.yy"
    {}
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 6735 "sql_yacc.yy"
    {
	  SELECT_LEX *sel= Select;
	  sel->use_index_ptr=sel->ignore_index_ptr=0;
	  sel->table_join_options= 0;
	}
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 6741 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  SELECT_LEX *sel= lex->current_select;
	  if (!((yyval.table_list)= sel->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
					   sel->get_table_join_options(),
					   lex->lock_option,
					   sel->get_use_index(),
					   sel->get_ignore_index())))
	    MYSQL_YYABORT;
          sel->add_joined_table((yyval.table_list));
	}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 6754 "sql_yacc.yy"
    {
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(3) - (8)].table_list), (yyvsp[(7) - (8)].table_list)))
              MYSQL_YYABORT;

          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 6761 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (11)].table_list) && (yyvsp[(7) - (11)].table_list));
            add_join_on((yyvsp[(7) - (11)].table_list),(yyvsp[(10) - (11)].item));
            Lex->pop_context();
            (yyvsp[(7) - (11)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(7) - (11)].table_list);
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 6772 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
	      if (sel->set_braces(1))
	      {
                my_parse_error(ER(ER_SYNTAX_ERROR));
	        MYSQL_YYABORT;
	      }
              /* select in braces, can't contain global parameters */
	      if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 6794 "sql_yacc.yy"
    {
          /* Use $2 instead of Lex->current_select as derived table will
             alter value of Lex->current_select. */

          if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
              !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
          {
            /* we have a derived table ($3 == NULL) but no alias,
               Since we are nested in further parentheses so we
               can pass NULL to the outer level parentheses
               Permits parsing of "((((select ...))) as xyz)" */
            (yyval.table_list)= 0;
          }
          else
          if (!(yyvsp[(3) - (6)].table_list))
          {
            /* Handle case of derived table, alias may be NULL if there
               are no outer parentheses, add_table_to_list() will throw
               error in this case */
	    LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
	    SELECT_LEX_UNIT *unit= sel->master_unit();
	    lex->current_select= sel= unit->outer_select();
	    if (!((yyval.table_list)= sel->
                  add_table_to_list(lex->thd, new Table_ident(unit), (yyvsp[(6) - (6)].lex_str_ptr), 0,
				    TL_READ,(List<String> *)0,
	                            (List<String> *)0)))

	      MYSQL_YYABORT;
            sel->add_joined_table((yyval.table_list));
            lex->pop_context();
          }
	  else
          if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
	  {
            /* simple nested joins cannot have aliases or unions */
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
          else
            (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
	}
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 6841 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 6847 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
	      MYSQL_YYABORT;
            }
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 6863 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->derived_tables|= DERIVED_SUBQUERY;
          if (lex->sql_command == (int)SQLCOM_HA_READ ||
              lex->sql_command == (int)SQLCOM_KILL ||
              lex->sql_command == (int)SQLCOM_PURGE)
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
	  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
              mysql_new_select(lex, 1))
	    MYSQL_YYABORT;
	  mysql_init_select(lex);
	  lex->current_select->linkage= DERIVED_TABLE_TYPE;
	  lex->current_select->parsing_place= SELECT_LIST;
	}
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 6881 "sql_yacc.yy"
    {
	  Select->parsing_place= NO_MATTER;
	}
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 6888 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 6893 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
	    {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
	      MYSQL_YYABORT;
	    }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 6918 "sql_yacc.yy"
    {}
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 6919 "sql_yacc.yy"
    {}
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 6926 "sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 6928 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->use_index= *(yyvsp[(2) - (2)].string_list);
	    sel->use_index_ptr= &sel->use_index;
	  }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 6934 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->use_index= *(yyvsp[(2) - (2)].string_list);
	    sel->use_index_ptr= &sel->use_index;
	    sel->table_join_options|= TL_OPTION_FORCE_INDEX;
	  }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 6941 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->ignore_index= *(yyvsp[(2) - (2)].string_list);
	    sel->ignore_index_ptr= &sel->ignore_index;
	  }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 6949 "sql_yacc.yy"
    { Select->interval_list.empty(); }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 6951 "sql_yacc.yy"
    { (yyval.string_list)= &Select->interval_list; }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 6955 "sql_yacc.yy"
    {}
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 6956 "sql_yacc.yy"
    {}
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 6961 "sql_yacc.yy"
    {
          String *s= new (YYTHD->mem_root) String((const char*) (yyvsp[(3) - (3)].lex_str).str,
                                                   (yyvsp[(3) - (3)].lex_str).length,
                                                   system_charset_info);
          if (s == NULL)
            MYSQL_YYABORT;
          Select->interval_list.push_back(s);
        }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 6970 "sql_yacc.yy"
    {
          String *s= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).length,
                                                   system_charset_info);
          if (s == NULL)
            MYSQL_YYABORT;
          Select->interval_list.push_back(s);
        }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 6979 "sql_yacc.yy"
    {
          String *s= new (YYTHD->mem_root) String("PRIMARY", 7,
                                                  system_charset_info);
          if (s == NULL)
            MYSQL_YYABORT;
          Select->interval_list.push_back(s);
        }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 6990 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
	      MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
	  }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7001 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
	  }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7012 "sql_yacc.yy"
    {}
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7013 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7014 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7015 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7016 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7017 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7018 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7019 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7020 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7021 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7022 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7023 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7026 "sql_yacc.yy"
    {}
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7027 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED("FRAC_SECOND", "MICROSECOND"); // Will be removed in 6.2
                                }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7046 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7047 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7048 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7049 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7050 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7051 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7052 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7053 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7054 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7058 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7059 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7060 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7061 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7070 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7072 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7085 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7087 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7091 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
	    select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
	    if ((yyvsp[(3) - (3)].item))
	      (yyvsp[(3) - (3)].item)->top_level_item();
	  }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7103 "sql_yacc.yy"
    {
	    Select->parsing_place= IN_HAVING;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7107 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->having= (yyvsp[(3) - (3)].item);
	    sel->parsing_place= NO_MATTER;
	    if ((yyvsp[(3) - (3)].item))
	      (yyvsp[(3) - (3)].item)->top_level_item();
	  }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7118 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7123 "sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((YYTHD->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
		 new Item_string("", 0, &my_charset_latin1) :
                 new Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7144 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7146 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7149 "sql_yacc.yy"
    {}
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7151 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
	    {
	      my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
		       "global union parameters");
	      MYSQL_YYABORT;
	    }
	    lex->current_select->olap= CUBE_TYPE;
	    my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
	    MYSQL_YYABORT;	/* To be deleted in 5.1 */
	  }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 7164 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
	    {
	      my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
		       "global union parameters");
	      MYSQL_YYABORT;
	    }
	    lex->current_select->olap= ROLLUP_TYPE;
	  }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7191 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 7209 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          SELECT_LEX *sel= lex->current_select;
          SELECT_LEX_UNIT *unit= sel-> master_unit();
	  if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
              sel->olap != UNSPECIFIED_OLAP_TYPE &&
              (sel->linkage != UNION_TYPE || sel->braces))
	  {
	    my_error(ER_WRONG_USAGE, MYF(0),
                     "CUBE/ROLLUP", "ORDER BY");
	    MYSQL_YYABORT;
	  }
          if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
          {
            /*
              A query of the of the form (SELECT ...) ORDER BY order_list is
              executed in the same way as the query
              SELECT ... ORDER BY order_list
              unless the SELECT construct contains ORDER BY or LIMIT clauses.
              Otherwise we create a fake SELECT_LEX if it has not been created
              yet.
            */
            SELECT_LEX *first_sl= unit->first_select();
            if (!first_sl->next_select() &&
                (first_sl->order_list.elements || 
                 first_sl->select_limit) &&            
                unit->add_fake_select_lex(lex->thd))
              MYSQL_YYABORT;
          }
	}
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 7242 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 7244 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 7247 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 7248 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 7249 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 7254 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  SELECT_LEX *sel= lex->current_select;
          sel->offset_limit= 0;
          sel->select_limit= 0;
	}
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 7260 "sql_yacc.yy"
    {}
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 7264 "sql_yacc.yy"
    {}
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 7265 "sql_yacc.yy"
    {}
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 7269 "sql_yacc.yy"
    {}
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 7274 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
	    sel->explicit_limit= 1;
	  }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 7281 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->select_limit= (yyvsp[(3) - (3)].item);
	    sel->offset_limit= (yyvsp[(1) - (3)].item);
	    sel->explicit_limit= 1;
	  }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 7288 "sql_yacc.yy"
    {
	    SELECT_LEX *sel= Select;
	    sel->select_limit= (yyvsp[(1) - (3)].item);
	    sel->offset_limit= (yyvsp[(3) - (3)].item);
	    sel->explicit_limit= 1;
	  }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 7297 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 7301 "sql_yacc.yy"
    {
            (yyval.item)= new Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 7307 "sql_yacc.yy"
    {
            (yyval.item)= new Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 7313 "sql_yacc.yy"
    {
            (yyval.item)= new Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 7322 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->current_select->select_limit= 0;
	}
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 7327 "sql_yacc.yy"
    {
	  SELECT_LEX *sel= Select;
	  sel->select_limit= (yyvsp[(2) - (2)].item);
	  sel->explicit_limit= 1;
	}
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 7334 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 7335 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 7336 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 7337 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 7338 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 7339 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 7343 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 7344 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 7345 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 7346 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 7347 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 7353 "sql_yacc.yy"
    {
	    LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
	    {
	      my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
	      MYSQL_YYABORT;
	    }
	    lex->proc_list.elements=0;
	    lex->proc_list.first=0;
	    lex->proc_list.next= (byte**) &lex->proc_list.first;
            Item_field *item= new Item_field(&lex->current_select->context,
                                             NULL,NULL,(yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
	    if (add_proc_to_list(lex->thd, item))
	      MYSQL_YYABORT;
	    Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
	  }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 7382 "sql_yacc.yy"
    {}
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 7383 "sql_yacc.yy"
    {}
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 7391 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex_input_stream *lip= YYLIP;

	    if (add_proc_to_list(thd, (yyvsp[(2) - (2)].item)))
	      MYSQL_YYABORT;
	    if (!(yyvsp[(2) - (2)].item)->name)
	      (yyvsp[(2) - (2)].item)->set_name((yyvsp[(1) - (2)].simple_string),(uint) ((char*) lip->tok_end - (yyvsp[(1) - (2)].simple_string)),
                           thd->charset());
	  }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 7405 "sql_yacc.yy"
    {
             LEX *lex=Lex;
	     if (!lex->describe && 
                 (!(lex->result= new select_dumpvar(lex->nest_level))))
	        MYSQL_YYABORT;
	   }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 7412 "sql_yacc.yy"
    {}
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 7417 "sql_yacc.yy"
    {}
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 7422 "sql_yacc.yy"
    {
             LEX *lex=Lex;
	     if (lex->result) 
             {
               my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
               if (var == NULL)
                 MYSQL_YYABORT;
	       ((select_dumpvar *)lex->result)->var_list.push_back(var);
             }
	     else
             {
               /*
                 The parser won't create select_result instance only
	         if it's an EXPLAIN.
               */
               DBUG_ASSERT(lex->describe);
             }
	   }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 7441 "sql_yacc.yy"
    {
             LEX *lex=Lex;
	     sp_variable_t *t;

	     if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
	     {
	       my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
	       MYSQL_YYABORT;
	     }
	     if (lex->result)
             {
               my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
               if (var == NULL)
                 MYSQL_YYABORT;
	       ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
               var->sp= lex->sphead;
#endif
             }
	     else
	     {
               /*
                 The parser won't create select_result instance only
	         if it's an EXPLAIN.
               */
               DBUG_ASSERT(lex->describe);
	     }
	   }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 7473 "sql_yacc.yy"
    {
          if (! Lex->parsing_options.allows_select_into)
          {
            my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
            MYSQL_YYABORT;
          }
	}
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 7485 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
              !(lex->result= new select_export(lex->exchange, lex->nest_level)))
            MYSQL_YYABORT;
	}
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 7494 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (!lex->describe)
	  {
	    lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
	    if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
	      MYSQL_YYABORT;
	    if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
	      MYSQL_YYABORT;
	  }
	}
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 7506 "sql_yacc.yy"
    {
	  Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
	}
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 7516 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command = SQLCOM_DO;
	  mysql_init_select(lex);
	}
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 7522 "sql_yacc.yy"
    {
	  Lex->insert_list= (yyvsp[(3) - (3)].item_list);
	}
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 7533 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command = SQLCOM_DROP_TABLE;
	  lex->drop_temporary= (yyvsp[(2) - (6)].num);
	  lex->drop_if_exists= (yyvsp[(4) - (6)].num);
	}
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 7539 "sql_yacc.yy"
    {}
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 7540 "sql_yacc.yy"
    {
	     LEX *lex=Lex;
             Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
             if (ad == NULL)
               MYSQL_YYABORT;
	     lex->sql_command= SQLCOM_DROP_INDEX;
             lex->alter_info.reset();
             lex->alter_info.flags= ALTER_DROP_INDEX;
	     lex->alter_info.drop_list.push_back(ad);
	     if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
							TL_OPTION_UPDATING))
	      MYSQL_YYABORT;
	  }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 7554 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_DROP_DB;
	    lex->drop_if_exists=(yyvsp[(3) - (4)].num);
	    lex->name=(yyvsp[(4) - (4)].lex_str).str;
	 }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 7561 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name((yyvsp[(4) - (6)].lex_str).str))
            {
	      my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
	      MYSQL_YYABORT;
	    }
	    lex->sql_command = SQLCOM_DROP_FUNCTION;
	    lex->drop_if_exists= (yyvsp[(3) - (6)].num);
	    spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
	    spname->init_qname(thd);
	    lex->spname= spname;
	  }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 7584 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
	      MYSQL_YYABORT;
	    }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
	    lex->sql_command = SQLCOM_DROP_FUNCTION;
	    lex->drop_if_exists= (yyvsp[(3) - (4)].num);
	    spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
	    spname->init_qname(thd);
	    lex->spname= spname;
	  }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 7605 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
	      MYSQL_YYABORT;
	    }
	    lex->sql_command = SQLCOM_DROP_PROCEDURE;
	    lex->drop_if_exists= (yyvsp[(3) - (4)].num);
	    lex->spname= (yyvsp[(4) - (4)].spname);
	  }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 7617 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 7621 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    lex->sql_command= SQLCOM_DROP_VIEW;
	    lex->drop_if_exists= (yyvsp[(3) - (5)].num);
	  }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 7627 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 7641 "sql_yacc.yy"
    {
	  if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
	    MYSQL_YYABORT;
	}
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 7648 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 7649 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 7653 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 7654 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 7662 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->sql_command= SQLCOM_INSERT;
	  lex->duplicates= DUP_ERROR; 
	  mysql_init_select(lex);
	  /* for subselects */
          lex->lock_option= (using_update_log) ? TL_READ_NO_INSERT : TL_READ;
	}
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 7671 "sql_yacc.yy"
    {
	  Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
	  Lex->current_select= &Lex->select_lex;
	}
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 7676 "sql_yacc.yy"
    {}
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 7681 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command = SQLCOM_REPLACE;
	  lex->duplicates= DUP_REPLACE;
	  mysql_init_select(lex);
	}
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 7688 "sql_yacc.yy"
    {
	  Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
	  Lex->current_select= &Lex->select_lex;
	}
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 7693 "sql_yacc.yy"
    {}
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 7698 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 7710 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 7711 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 7712 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 7716 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 7717 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 7720 "sql_yacc.yy"
    {}
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 7721 "sql_yacc.yy"
    {}
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 7725 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->field_list.empty();
	  lex->many_values.empty();
	  lex->insert_list=0;
	}
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 7733 "sql_yacc.yy"
    {}
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 7734 "sql_yacc.yy"
    {}
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 7735 "sql_yacc.yy"
    {}
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 7737 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    if (!(lex->insert_list = new List_item) ||
		lex->many_values.push_back(lex->insert_list))
	      MYSQL_YYABORT;
	   }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 7746 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 7747 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 7750 "sql_yacc.yy"
    {}
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 7751 "sql_yacc.yy"
    {}
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 7752 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 7752 "sql_yacc.yy"
    {}
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 7753 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 7753 "sql_yacc.yy"
    {}
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 7767 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
	      lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
	    MYSQL_YYABORT;
	 }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 7774 "sql_yacc.yy"
    {}
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 7775 "sql_yacc.yy"
    {}
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 7779 "sql_yacc.yy"
    {}
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 7780 "sql_yacc.yy"
    {}
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 7785 "sql_yacc.yy"
    {
	    if (!(Lex->insert_list = new List_item))
	      MYSQL_YYABORT;
	 }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 7790 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->many_values.push_back(lex->insert_list))
	    MYSQL_YYABORT;
	 }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 7797 "sql_yacc.yy"
    {}
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 7802 "sql_yacc.yy"
    {
	  if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
	    MYSQL_YYABORT;
	}
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 7807 "sql_yacc.yy"
    {
	    if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
	      MYSQL_YYABORT;
	  }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 7814 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 7816 "sql_yacc.yy"
    {
            (yyval.item)= new Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 7825 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 7833 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  mysql_init_select(lex);
          lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= using_update_log ? TL_READ_NO_INSERT : TL_READ;
	  lex->duplicates= DUP_ERROR; 
        }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 7842 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
          if (lex->select_lex.table_list.elements > 1)
            lex->sql_command= SQLCOM_UPDATE_MULTI;
	  else if (lex->select_lex.get_table_list()->derived)
	  {
	    /* it is single table update and it is update of derived table */
	    my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                     lex->select_lex.get_table_list()->alias, "UPDATE");
	    MYSQL_YYABORT;
	  }
          /*
            In case of multi-update setting write lock for all tables may
            be too pessimistic. We will decrease lock level if possible in
            mysql_multi_update().
          */
          Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
	}
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 7860 "sql_yacc.yy"
    {}
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 7869 "sql_yacc.yy"
    {
	  if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
	    MYSQL_YYABORT;
	}
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 7880 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
	      lex->value_list.push_back((yyvsp[(3) - (3)].item)))
	      MYSQL_YYABORT;
	  }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 7888 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 7889 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 7895 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->sql_command= SQLCOM_DELETE;
	  mysql_init_select(lex);
	  lex->lock_option= TL_WRITE_DEFAULT;
	  lex->ignore= 0;
	  lex->select_lex.init_order();
	}
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 7903 "sql_yacc.yy"
    {}
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 7908 "sql_yacc.yy"
    {
	  if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
					 Lex->lock_option))
	    MYSQL_YYABORT;
	}
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 7914 "sql_yacc.yy"
    {}
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 7916 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 7918 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 7923 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 7925 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 7932 "sql_yacc.yy"
    {}
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 7933 "sql_yacc.yy"
    {}
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 7937 "sql_yacc.yy"
    {
          Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
          if (ti == NULL)
            MYSQL_YYABORT;
	  if (!Select->add_table_to_list(YYTHD, ti, (yyvsp[(3) - (3)].lex_str_ptr),
					 TL_OPTION_UPDATING | 
                                         TL_OPTION_ALIAS, Lex->lock_option))
	    MYSQL_YYABORT;
        }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 7947 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
	    if (!Select->add_table_to_list(YYTHD,
                                           ti,
					   (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | 
                                           TL_OPTION_ALIAS,
					   Lex->lock_option))
	      MYSQL_YYABORT;
	  }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 7962 "sql_yacc.yy"
    {}
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 7963 "sql_yacc.yy"
    {}
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 7967 "sql_yacc.yy"
    {}
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 7968 "sql_yacc.yy"
    {}
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 7971 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 7972 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 7973 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 7977 "sql_yacc.yy"
    {
	  LEX* lex= Lex;
	  lex->sql_command= SQLCOM_TRUNCATE;
	  lex->select_lex.options= 0;
          lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
	  lex->select_lex.init_order();
	}
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8000 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8004 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 8008 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 8012 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 8016 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 8020 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 8024 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 8028 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 8032 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 8039 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 8043 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 8051 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->wild=0;
          lex->lock_option= TL_READ;
          mysql_init_select(lex);
          lex->current_select->parsing_place= SELECT_LIST;
	  bzero((char*) &lex->create_info,sizeof(lex->create_info));
	}
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 8060 "sql_yacc.yy"
    {}
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 8065 "sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SELECT;
           lex->orig_sql_command= SQLCOM_SHOW_DATABASES;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
             MYSQL_YYABORT;
         }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 8073 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SELECT;
             lex->orig_sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 8082 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SELECT;
             lex->orig_sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 8091 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SELECT;
             lex->orig_sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 8100 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_OPEN_TABLES;
	    lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
	  }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 8109 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (2)].db_type); }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 8112 "sql_yacc.yy"
    {
 	    LEX *lex= Lex;
	    lex->sql_command= SQLCOM_SELECT;
	    lex->orig_sql_command= SQLCOM_SHOW_FIELDS;
	    if ((yyvsp[(5) - (6)].simple_string))
	      (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
	    if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
	      MYSQL_YYABORT;
	  }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 8125 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
	    Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
	    Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
	    Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 8132 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 8136 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 8140 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 8145 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_KEYS;
	    if ((yyvsp[(4) - (5)].simple_string))
	      (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
	  }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 8155 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
	  }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 8160 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
	    WARN_DEPRECATED("SHOW TABLE TYPES", "SHOW [STORAGE] ENGINES");
	  }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 8166 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
	  }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 8171 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
	  }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 8176 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 8178 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 8180 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 8182 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 8184 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 8186 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 8194 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
	  }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 8203 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS; WARN_DEPRECATED("SHOW INNODB STATUS", "SHOW ENGINE INNODB STATUS"); }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 8205 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_MUTEX_STATUS; }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 8207 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 8209 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
	  }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 8218 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 8226 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 8234 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_LOGS; WARN_DEPRECATED("SHOW BDB LOGS", "SHOW ENGINE BDB LOGS"); }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 8236 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_LOGS; WARN_DEPRECATED("SHOW LOGS", "SHOW ENGINE BDB LOGS"); }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 8238 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_GRANTS;
	    LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
	    lex->grant_user= curr_user;
	  }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 8248 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command= SQLCOM_SHOW_GRANTS;
	    lex->grant_user=(yyvsp[(3) - (3)].lex_user);
	    lex->grant_user->password=null_lex_str;
	  }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 8255 "sql_yacc.yy"
    {
	    Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
	    Lex->create_info.options=(yyvsp[(3) - (4)].num);
	    Lex->name=(yyvsp[(4) - (4)].lex_str).str;
	  }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 8261 "sql_yacc.yy"
    {
            LEX *lex= Lex;
	    lex->sql_command = SQLCOM_SHOW_CREATE;
	    if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
	      MYSQL_YYABORT;
            lex->only_view= 0;
	  }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 8269 "sql_yacc.yy"
    {
            LEX *lex= Lex;
	    lex->sql_command = SQLCOM_SHOW_CREATE;
	    if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
	      MYSQL_YYABORT;
            lex->only_view= 1;
	  }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 8277 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 8281 "sql_yacc.yy"
    {
	    Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 8285 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
	    lex->spname= (yyvsp[(3) - (3)].spname);
	  }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 8292 "sql_yacc.yy"
    {
	    LEX *lex= Lex;

	    lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
	    lex->spname= (yyvsp[(3) - (3)].spname);
	  }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 8299 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
	  }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 8307 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->orig_sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
	  }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 8315 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
	    Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 8325 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
	    Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 8338 "sql_yacc.yy"
    {
	    switch (Lex->create_info.db_type) {
	    case DB_TYPE_NDBCLUSTER:
	      Lex->sql_command = SQLCOM_SHOW_NDBCLUSTER_STATUS;
	      break;
	    case DB_TYPE_INNODB:
	      Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;
	      break;
	    default:
	      my_error(ER_NOT_SUPPORTED_YET, MYF(0), "STATUS");
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 8352 "sql_yacc.yy"
    {
	    switch (Lex->create_info.db_type) {
	    case DB_TYPE_BERKELEY_DB:
	      Lex->sql_command = SQLCOM_SHOW_LOGS;
	      break;
	    default:
	      my_error(ER_NOT_SUPPORTED_YET, MYF(0), "LOGS");
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 8372 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 8373 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 8376 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 8377 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 8384 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 8385 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 8388 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 8389 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 8394 "sql_yacc.yy"
    {
          Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                  system_charset_info);
          if (Lex->wild == NULL)
            MYSQL_YYABORT;
        }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 8401 "sql_yacc.yy"
    {
          Select->where= (yyvsp[(2) - (2)].item);
          if ((yyvsp[(2) - (2)].item))
            (yyvsp[(2) - (2)].item)->top_level_item();
        }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 8412 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->lock_option= TL_READ;
          mysql_init_select(lex);
          lex->current_select->parsing_place= SELECT_LIST;
          lex->sql_command= SQLCOM_SELECT;
          lex->orig_sql_command= SQLCOM_SHOW_FIELDS;
          lex->select_lex.db= 0;
          lex->verbose= 0;
          if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
	    MYSQL_YYABORT;
	}
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 8424 "sql_yacc.yy"
    {}
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 8426 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 8428 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->select_lex.options|= SELECT_DESCRIBE;
	  }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 8439 "sql_yacc.yy"
    {}
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 8440 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 8444 "sql_yacc.yy"
    {}
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 8445 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 8447 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 8461 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_FLUSH;
          lex->type= 0;
          lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
	}
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 8468 "sql_yacc.yy"
    {}
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 8476 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 8476 "sql_yacc.yy"
    {}
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 8477 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 8478 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 8479 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 8480 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 8481 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 8482 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 8483 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 8484 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 8485 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 8486 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 8489 "sql_yacc.yy"
    {;}
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 8490 "sql_yacc.yy"
    {;}
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 8494 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_RESET; lex->type=0;
	}
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 8498 "sql_yacc.yy"
    {}
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 8506 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 8507 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 8508 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 8512 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->type=0;
          lex->sql_command = SQLCOM_PURGE;
	}
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 8517 "sql_yacc.yy"
    {}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 8526 "sql_yacc.yy"
    {
	   Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
        }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 8530 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  lex->value_list.empty();
	  lex->value_list.push_front((yyvsp[(2) - (2)].item));
	  lex->sql_command= SQLCOM_PURGE_BEFORE;
	}
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 8541 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_KILL; }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 8542 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->value_list.empty();
	  lex->value_list.push_front((yyvsp[(4) - (4)].item));
	}
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 8549 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 8550 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 8551 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 8557 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command=SQLCOM_CHANGE_DB;
	  lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
	}
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 8566 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;

	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
	    MYSQL_YYABORT;
	  }
          lex->fname_start= lip->ptr;
        }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 8579 "sql_yacc.yy"
    {}
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 8582 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
	    MYSQL_YYABORT;
	  }
          lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
          WARN_DEPRECATED("LOAD TABLE FROM MASTER",
                          "mysqldump or future "
                          "BACKUP/RESTORE DATABASE facility");
          if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
            MYSQL_YYABORT;
        }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 8599 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_LOAD;
	  lex->lock_option= (yyvsp[(1) - (4)].lock_type);
	  lex->local_file=  (yyvsp[(2) - (4)].num);
	  lex->duplicates= DUP_ERROR;
	  lex->ignore= 0;
	  if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
	    MYSQL_YYABORT;
        }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 8610 "sql_yacc.yy"
    {
	  Lex->fname_end= YYLIP->ptr;
	}
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 8614 "sql_yacc.yy"
    {
          LEX *lex=Lex;
          if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (10)].table), NULL, TL_OPTION_UPDATING,
                                         lex->lock_option))
            MYSQL_YYABORT;
          lex->field_list.empty();
          lex->update_list.empty();
          lex->value_list.empty();
        }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 8624 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(12) - (12)].charset); }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 8627 "sql_yacc.yy"
    {}
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 8630 "sql_yacc.yy"
    {
	  Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
          WARN_DEPRECATED("LOAD DATA FROM MASTER",
                          "mysqldump or future "
                          "BACKUP/RESTORE DATABASE facility");
        }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 8638 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 8639 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 8642 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 8644 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 8655 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 8659 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 8660 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 8661 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 8673 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 8678 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
	  }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 8685 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 8690 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 8705 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 8710 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 8718 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 8724 "sql_yacc.yy"
    { }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 8725 "sql_yacc.yy"
    { }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 8726 "sql_yacc.yy"
    { }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 8730 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 8732 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 8736 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 8738 "sql_yacc.yy"
    {
            (yyval.item)= new Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 8746 "sql_yacc.yy"
    { }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 8747 "sql_yacc.yy"
    { }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 8754 "sql_yacc.yy"
    {
          LEX_STRING tmp;
          THD *thd= YYTHD;
          CHARSET_INFO *cs_con= thd->variables.collation_connection;
          CHARSET_INFO *cs_cli= thd->variables.character_set_client;
          uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                           MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
          if (thd->charset_is_collation_connection ||
              (repertoire == MY_REPERTOIRE_ASCII &&
               my_charset_is_ascii_based(cs_con)))
            tmp= (yyvsp[(1) - (1)].lex_str);
          else
          {
            if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
              MYSQL_YYABORT;
          }
          (yyval.item)= new Item_string(tmp.str, tmp.length, cs_con,
                              DERIVATION_COERCIBLE, repertoire);
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
        }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 8777 "sql_yacc.yy"
    {
          uint repertoire= Lex->text_string_is_7bit ?
                           MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
          DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
          (yyval.item)= new Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, national_charset_info,
                              DERIVATION_COERCIBLE, repertoire);
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
        }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 8787 "sql_yacc.yy"
    {
            (yyval.item)= new Item_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, Lex->underscore_charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            ((Item_string*) (yyval.item))->set_repertoire_from_value();
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 8794 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 8813 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 8821 "sql_yacc.yy"
    {
	    Item *tmp= new Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
	    /*
	      it is OK only emulate fix_fields, because we need only
              value of constant
	    */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
	  }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 8833 "sql_yacc.yy"
    {
	    Item *tmp= new Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
	    /*
	      it is OK only emulate fix_fields, because we need only
              value of constant
	    */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 8848 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;
          Item_param *item;
          if (! lex->parsing_options.allows_variable)
          {
            my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
            MYSQL_YYABORT;
          }
          item= new Item_param((uint) (lip->tok_start - thd->query));
          if (!((yyval.item)= item) || lex->param_list.push_back(item))
          {
            my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
            MYSQL_YYABORT;
          }
        }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 8868 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 8869 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 8871 "sql_yacc.yy"
    {
	    (yyvsp[(2) - (2)].item_num)->max_length++;
	    (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
	  }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 8879 "sql_yacc.yy"
    { (yyval.item) =	(yyvsp[(1) - (1)].item); }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 8880 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 8882 "sql_yacc.yy"
    {
            (yyval.item) = new Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 8889 "sql_yacc.yy"
    {
            (yyval.item)= new Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 8895 "sql_yacc.yy"
    {
            (yyval.item)= new Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 8901 "sql_yacc.yy"
    {
            (yyval.item)=	new Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 8907 "sql_yacc.yy"
    {
            (yyval.item)= new Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 8913 "sql_yacc.yy"
    {
            Item *tmp= new Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);
            Item_string *item_str;
            item_str= new Item_string(NULL, /* name will be set in select_item */
                                      str ? str->ptr() : "",
                                      str ? str->length() : 0,
                                      Lex->underscore_charset);
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }
            item_str->set_repertoire_from_value();
            (yyval.item)= item_str;
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 8937 "sql_yacc.yy"
    {
	    Item *tmp= new Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
	    /*
	      it is OK only emulate fix_fieds, because we need only
              value of constant
	    */
            tmp->quick_fix_field();
	    String *str= tmp->val_str((String*) 0);
            Item_string *item_str;
            item_str= new Item_string(NULL, /* name will be set in select_item */
                                      str ? str->ptr() : "",
                                      str ? str->length() : 0,
                                      Lex->underscore_charset);
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }
            (yyval.item)= item_str;
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 8959 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 8960 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 8961 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 8965 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num) = new Item_int((yyvsp[(1) - (1)].lex_str).str,
                              (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                              (yyvsp[(1) - (1)].lex_str).length);
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 8972 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num) = new Item_int((yyvsp[(1) - (1)].lex_str).str,
                              (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                              (yyvsp[(1) - (1)].lex_str).length);
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 8979 "sql_yacc.yy"
    {
            (yyval.item_num)=	new Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 8983 "sql_yacc.yy"
    {
            (yyval.item_num)= new Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->net.report_error))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 8991 "sql_yacc.yy"
    {
            (yyval.item_num)= new Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->net.report_error))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 9005 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 9006 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 9010 "sql_yacc.yy"
    {
          SELECT_LEX *sel= Select;
	  (yyval.item) = new Item_field(Lex->current_context(), NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
	  sel->with_wild++;
	}
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 9018 "sql_yacc.yy"
    {
          SELECT_LEX *sel= Select;
	  (yyval.item) = new Item_field(Lex->current_context(), (YYTHD->client_capabilities &
                             CLIENT_NO_SCHEMA ? NullS : (yyvsp[(1) - (5)].lex_str).str),
                             (yyvsp[(3) - (5)].lex_str).str,"*");
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
	  sel->with_wild++;
	}
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 9030 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 9034 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;
	  sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
	  if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
	  {
            /* We're compiling a stored procedure and found a variable */
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }

            Item_splocal *splocal;
            splocal= new Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      (uint) (lip->tok_start_prev - 
                                      lex->sphead->m_tmp_query),
                                      (uint) (lip->tok_end - 
                                      lip->tok_start_prev));
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
	    (yyval.item)= splocal;
	    lex->safe_to_cache_query=0;
	  }
	  else
	  {
	    SELECT_LEX *sel=Select;
	    (yyval.item)= (sel->parsing_place != IN_HAVING ||
	         sel->get_in_sum_expr() > 0) ?
                 (Item*) new Item_field(Lex->current_context(), NullS, NullS, (yyvsp[(1) - (1)].lex_str).str) :
	         (Item*) new Item_ref(Lex->current_context(), NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
	  }
        }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 9074 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 9079 "sql_yacc.yy"
    {
	  SELECT_LEX *sel=Select;
	  (yyval.item)= (sel->parsing_place != IN_HAVING ||
	       sel->get_in_sum_expr() > 0) ?
              (Item*) new Item_field(Lex->current_context(), NullS, NullS, (yyvsp[(1) - (1)].lex_str).str) :
	      (Item*) new Item_ref(Lex->current_context(), NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
	}
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 9088 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 9093 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= thd->lex;

          /*
            FIXME This will work ok in simple_ident_nospvar case because
            we can't meet simple_ident_nospvar in trigger now. But it
            should be changed in future.
          */
          if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
              (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
               !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
          {
            Item_trigger_field *trg_fld;
            bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

            if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                !new_row)
            {
              my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
              MYSQL_YYABORT;
            }

            if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                new_row)
            {
              my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
              MYSQL_YYABORT;
            }

            DBUG_ASSERT(!new_row ||
                        (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                         lex->trg_chistics.event == TRG_EVENT_UPDATE));
            const bool read_only=
              !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
            if (!(trg_fld= new Item_trigger_field(Lex->current_context(),
                                                  new_row ?
                                                  Item_trigger_field::NEW_ROW:
                                                  Item_trigger_field::OLD_ROW,
                                                  (yyvsp[(3) - (3)].lex_str).str,
                                                  SELECT_ACL,
                                                  read_only)))
              MYSQL_YYABORT;

            /*
              Let us add this item to list of all Item_trigger_field objects
              in trigger.
            */
            lex->trg_table_fields.link_in_list((byte *)trg_fld,
              (byte**)&trg_fld->next_trg_field);

            (yyval.item)= (Item *)trg_fld;
          }
          else
          {
	    SELECT_LEX *sel= lex->current_select;
	    if (sel->no_table_names_allowed)
	    {
	      my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
	    }
	    (yyval.item)= (sel->parsing_place != IN_HAVING ||
	         sel->get_in_sum_expr() > 0) ?
	        (Item*) new Item_field(Lex->current_context(), NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str) :
	        (Item*) new Item_ref(Lex->current_context(), NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
        }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 9163 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= thd->lex;
	  SELECT_LEX *sel= lex->current_select;
	  if (sel->no_table_names_allowed)
	  {
	    my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                     MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
	  }
	  (yyval.item)= (sel->parsing_place != IN_HAVING ||
	       sel->get_in_sum_expr() > 0) ?
	      (Item*) new Item_field(Lex->current_context(), NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str) :
              (Item*) new Item_ref(Lex->current_context(), NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
	}
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 9180 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= thd->lex;
	  SELECT_LEX *sel= lex->current_select;
	  if (sel->no_table_names_allowed)
	  {
	    my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                     MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
	  }
	  (yyval.item)= (sel->parsing_place != IN_HAVING ||
	       sel->get_in_sum_expr() > 0) ?
	      (Item*) new Item_field(Lex->current_context(),
                                     (YYTHD->client_capabilities &
				      CLIENT_NO_SCHEMA ? NullS : (yyvsp[(1) - (5)].lex_str).str),
				     (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str) :
	      (Item*) new Item_ref(Lex->current_context(),
                                   (YYTHD->client_capabilities &
				    CLIENT_NO_SCHEMA ? NullS : (yyvsp[(1) - (5)].lex_str).str),
                                   (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
          if ((yyval.item) == NULL)
            MYSQL_YYABORT;
	}
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 9205 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 9207 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 9223 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 9232 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 9236 "sql_yacc.yy"
    {
            (yyval.table)=new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 9242 "sql_yacc.yy"
    {
            (yyval.table)=new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 9248 "sql_yacc.yy"
    {
            (yyval.table)=new Table_ident((yyvsp[(2) - (2)].lex_str)); /* For Delphi */
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 9257 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)=new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 9266 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 9268 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
	    if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
	      (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
	    else
            {
	      if (thd->convert_string(&(yyval.lex_str), system_charset_info,
				  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
	  }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 9296 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  if (thd->charset_is_system_charset)
	    (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
	  else
          {
	    if (thd->convert_string(&(yyval.lex_str), system_charset_info,
				(yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
              MYSQL_YYABORT;
          }
	}
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 9311 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  if (thd->charset_is_collation_connection)
	    (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
	  else
          {
	    if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
				(yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
              MYSQL_YYABORT;
          }
	}
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 9327 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  if (thd->charset_is_character_set_filesystem)
	    (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
	  else
          {
	    if (thd->convert_string(&(yyval.lex_str), thd->variables.character_set_filesystem,
				(yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
              MYSQL_YYABORT;
          }
	}
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 9341 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 9343 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  (yyval.lex_str).str=    thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
          if ((yyval.lex_str).str == NULL)
            MYSQL_YYABORT;
	  (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
	}
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 9353 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 9355 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  (yyval.lex_str).str=    thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
          if ((yyval.lex_str).str == NULL)
            MYSQL_YYABORT;
	  (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
	}
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 9365 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 9366 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 9367 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 9371 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
	    MYSQL_YYABORT;
	  (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
	  (yyval.lex_user)->host.str= (char *) "%";
	  (yyval.lex_user)->host.length= 1;

	  if (check_string_length(&(yyval.lex_user)->user,
                                  ER(ER_USERNAME), USERNAME_LENGTH))
	    MYSQL_YYABORT;
	}
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 9384 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
	    if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
	      MYSQL_YYABORT;
	    (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

	    if (check_string_length(&(yyval.lex_user)->user,
                                    ER(ER_USERNAME), USERNAME_LENGTH) ||
                check_host_name(&(yyval.lex_user)->host))
	      MYSQL_YYABORT;
	  }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 9396 "sql_yacc.yy"
    {
          if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
            MYSQL_YYABORT;
          /* 
            empty LEX_USER means current_user and 
            will be handled in the  get_current_user() function
            later
          */
          bzero((yyval.lex_user), sizeof(LEX_USER));
	}
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 9409 "sql_yacc.yy"
    {}
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 9410 "sql_yacc.yy"
    {}
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 9411 "sql_yacc.yy"
    {}
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 9412 "sql_yacc.yy"
    {}
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 9413 "sql_yacc.yy"
    {}
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 9414 "sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 9415 "sql_yacc.yy"
    {}
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 9416 "sql_yacc.yy"
    {}
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 9417 "sql_yacc.yy"
    {}
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 9418 "sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 9419 "sql_yacc.yy"
    {}
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 9420 "sql_yacc.yy"
    {}
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 9421 "sql_yacc.yy"
    {}
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 9422 "sql_yacc.yy"
    {}
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 9423 "sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 9424 "sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 9425 "sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 9426 "sql_yacc.yy"
    {}
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 9427 "sql_yacc.yy"
    {}
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 9428 "sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 9429 "sql_yacc.yy"
    {}
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 9430 "sql_yacc.yy"
    {}
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 9431 "sql_yacc.yy"
    {}
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 9432 "sql_yacc.yy"
    {}
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 9433 "sql_yacc.yy"
    {}
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 9434 "sql_yacc.yy"
    {}
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 9435 "sql_yacc.yy"
    {}
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 9436 "sql_yacc.yy"
    {}
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 9437 "sql_yacc.yy"
    {}
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 9438 "sql_yacc.yy"
    {}
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 9439 "sql_yacc.yy"
    {}
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 9440 "sql_yacc.yy"
    {}
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 9441 "sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 9442 "sql_yacc.yy"
    {}
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 9443 "sql_yacc.yy"
    {}
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 9444 "sql_yacc.yy"
    {}
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 9445 "sql_yacc.yy"
    {}
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 9455 "sql_yacc.yy"
    {}
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 9456 "sql_yacc.yy"
    {}
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 9457 "sql_yacc.yy"
    {}
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 9458 "sql_yacc.yy"
    {}
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 9459 "sql_yacc.yy"
    {}
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 9460 "sql_yacc.yy"
    {}
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 9461 "sql_yacc.yy"
    {}
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 9462 "sql_yacc.yy"
    {}
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 9463 "sql_yacc.yy"
    {}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 9464 "sql_yacc.yy"
    {}
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 9465 "sql_yacc.yy"
    {}
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 9466 "sql_yacc.yy"
    {}
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 9467 "sql_yacc.yy"
    {}
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 9468 "sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 9469 "sql_yacc.yy"
    {}
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 9470 "sql_yacc.yy"
    {}
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 9471 "sql_yacc.yy"
    {}
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 9472 "sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 9473 "sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 9474 "sql_yacc.yy"
    {}
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 9475 "sql_yacc.yy"
    {}
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 9476 "sql_yacc.yy"
    {}
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 9477 "sql_yacc.yy"
    {}
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 9478 "sql_yacc.yy"
    {}
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 9479 "sql_yacc.yy"
    {}
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 9480 "sql_yacc.yy"
    {}
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 9481 "sql_yacc.yy"
    {}
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 9482 "sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 9483 "sql_yacc.yy"
    {}
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 9484 "sql_yacc.yy"
    {}
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 9485 "sql_yacc.yy"
    {}
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 9486 "sql_yacc.yy"
    {}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 9487 "sql_yacc.yy"
    {}
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 9488 "sql_yacc.yy"
    {}
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 9489 "sql_yacc.yy"
    {}
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 9490 "sql_yacc.yy"
    {}
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 9491 "sql_yacc.yy"
    {}
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 9492 "sql_yacc.yy"
    {}
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 9493 "sql_yacc.yy"
    {}
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 9494 "sql_yacc.yy"
    {}
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 9495 "sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 9496 "sql_yacc.yy"
    {}
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 9497 "sql_yacc.yy"
    {}
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 9498 "sql_yacc.yy"
    {}
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 9499 "sql_yacc.yy"
    {}
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 9500 "sql_yacc.yy"
    {}
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 9501 "sql_yacc.yy"
    {}
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 9502 "sql_yacc.yy"
    {}
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 9503 "sql_yacc.yy"
    {}
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 9504 "sql_yacc.yy"
    {}
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 9505 "sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 9506 "sql_yacc.yy"
    {}
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 9507 "sql_yacc.yy"
    {}
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 9508 "sql_yacc.yy"
    {}
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 9509 "sql_yacc.yy"
    {}
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 9510 "sql_yacc.yy"
    {}
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 9511 "sql_yacc.yy"
    {}
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 9512 "sql_yacc.yy"
    {}
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 9513 "sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 9514 "sql_yacc.yy"
    {}
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 9515 "sql_yacc.yy"
    {}
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 9516 "sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 9517 "sql_yacc.yy"
    {}
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 9518 "sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 9519 "sql_yacc.yy"
    {}
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 9520 "sql_yacc.yy"
    {}
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 9521 "sql_yacc.yy"
    {}
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 9522 "sql_yacc.yy"
    {}
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 9523 "sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 9524 "sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 9525 "sql_yacc.yy"
    {}
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 9526 "sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 9527 "sql_yacc.yy"
    {}
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 9528 "sql_yacc.yy"
    {}
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 9529 "sql_yacc.yy"
    {}
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 9530 "sql_yacc.yy"
    {}
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 9531 "sql_yacc.yy"
    {}
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 9532 "sql_yacc.yy"
    {}
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 9533 "sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 9534 "sql_yacc.yy"
    {}
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 9535 "sql_yacc.yy"
    {}
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 9536 "sql_yacc.yy"
    {}
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 9537 "sql_yacc.yy"
    {}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 9538 "sql_yacc.yy"
    {}
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 9539 "sql_yacc.yy"
    {}
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 9540 "sql_yacc.yy"
    {}
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 9541 "sql_yacc.yy"
    {}
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 9542 "sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 9543 "sql_yacc.yy"
    {}
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 9544 "sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 9545 "sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 9546 "sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 9547 "sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 9548 "sql_yacc.yy"
    {}
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 9549 "sql_yacc.yy"
    {}
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 9550 "sql_yacc.yy"
    {}
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 9551 "sql_yacc.yy"
    {}
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 9552 "sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 9553 "sql_yacc.yy"
    {}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 9554 "sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 9555 "sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 9556 "sql_yacc.yy"
    {}
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 9557 "sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 9558 "sql_yacc.yy"
    {}
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 9559 "sql_yacc.yy"
    {}
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 9560 "sql_yacc.yy"
    {}
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 9561 "sql_yacc.yy"
    {}
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 9562 "sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 9563 "sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 9564 "sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 9565 "sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 9566 "sql_yacc.yy"
    {}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 9567 "sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 9568 "sql_yacc.yy"
    {}
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 9569 "sql_yacc.yy"
    {}
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 9570 "sql_yacc.yy"
    {}
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 9571 "sql_yacc.yy"
    {}
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 9572 "sql_yacc.yy"
    {}
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 9573 "sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 9574 "sql_yacc.yy"
    {}
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 9575 "sql_yacc.yy"
    {}
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 9576 "sql_yacc.yy"
    {}
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 9577 "sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 9578 "sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 9579 "sql_yacc.yy"
    {}
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 9580 "sql_yacc.yy"
    {}
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 9581 "sql_yacc.yy"
    {}
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 9582 "sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 9583 "sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 9584 "sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 9585 "sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 9586 "sql_yacc.yy"
    {}
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 9587 "sql_yacc.yy"
    {}
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 9588 "sql_yacc.yy"
    {}
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 9589 "sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 9590 "sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 9591 "sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 9592 "sql_yacc.yy"
    {}
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 9593 "sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 9594 "sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 9595 "sql_yacc.yy"
    {}
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 9596 "sql_yacc.yy"
    {}
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 9597 "sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 9598 "sql_yacc.yy"
    {}
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 9599 "sql_yacc.yy"
    {}
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 9600 "sql_yacc.yy"
    {}
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 9601 "sql_yacc.yy"
    {}
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 9602 "sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 9603 "sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 9604 "sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 9605 "sql_yacc.yy"
    {}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 9606 "sql_yacc.yy"
    {}
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 9607 "sql_yacc.yy"
    {}
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 9608 "sql_yacc.yy"
    {}
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 9609 "sql_yacc.yy"
    {}
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 9610 "sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 9611 "sql_yacc.yy"
    {}
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 9612 "sql_yacc.yy"
    {}
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 9613 "sql_yacc.yy"
    {}
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 9614 "sql_yacc.yy"
    {}
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 9615 "sql_yacc.yy"
    {}
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 9616 "sql_yacc.yy"
    {}
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 9617 "sql_yacc.yy"
    {}
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 9618 "sql_yacc.yy"
    {}
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 9619 "sql_yacc.yy"
    {}
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 9620 "sql_yacc.yy"
    {}
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 9621 "sql_yacc.yy"
    {}
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 9622 "sql_yacc.yy"
    {}
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 9623 "sql_yacc.yy"
    {}
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 9624 "sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 9625 "sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 9626 "sql_yacc.yy"
    {}
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 9627 "sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 9628 "sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 9629 "sql_yacc.yy"
    {}
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 9630 "sql_yacc.yy"
    {}
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 9631 "sql_yacc.yy"
    {}
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 9632 "sql_yacc.yy"
    {}
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 9633 "sql_yacc.yy"
    {}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 9634 "sql_yacc.yy"
    {}
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 9635 "sql_yacc.yy"
    {}
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 9636 "sql_yacc.yy"
    {}
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 9637 "sql_yacc.yy"
    {}
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 9638 "sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 9639 "sql_yacc.yy"
    {}
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 9640 "sql_yacc.yy"
    {}
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 9641 "sql_yacc.yy"
    {}
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 9642 "sql_yacc.yy"
    {}
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 9643 "sql_yacc.yy"
    {}
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 9644 "sql_yacc.yy"
    {}
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 9645 "sql_yacc.yy"
    {}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 9646 "sql_yacc.yy"
    {}
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 9647 "sql_yacc.yy"
    {}
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 9648 "sql_yacc.yy"
    {}
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 9649 "sql_yacc.yy"
    {}
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 9650 "sql_yacc.yy"
    {}
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 9651 "sql_yacc.yy"
    {}
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 9652 "sql_yacc.yy"
    {}
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 9653 "sql_yacc.yy"
    {}
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 9654 "sql_yacc.yy"
    {}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 9655 "sql_yacc.yy"
    {}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 9656 "sql_yacc.yy"
    {}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 9657 "sql_yacc.yy"
    {}
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 9658 "sql_yacc.yy"
    {}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 9659 "sql_yacc.yy"
    {}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 9660 "sql_yacc.yy"
    {}
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 9661 "sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 9662 "sql_yacc.yy"
    {}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 9663 "sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 9664 "sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 9665 "sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 9666 "sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 9667 "sql_yacc.yy"
    {}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 9668 "sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 9669 "sql_yacc.yy"
    {}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 9670 "sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 9671 "sql_yacc.yy"
    {}
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 9672 "sql_yacc.yy"
    {}
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 9673 "sql_yacc.yy"
    {}
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 9674 "sql_yacc.yy"
    {}
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 9675 "sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 9676 "sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 9677 "sql_yacc.yy"
    {}
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 9678 "sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 9679 "sql_yacc.yy"
    {}
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 9680 "sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 9687 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_SET_OPTION;
	  mysql_init_select(lex);
	  lex->option_type=OPT_SESSION;
	  lex->var_list.empty();
          lex->one_shot_set= 0;
	}
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 9696 "sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 9700 "sql_yacc.yy"
    {}
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 9701 "sql_yacc.yy"
    {}
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 9708 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;

          if (lex->sphead)
          {
            /*
              If we are in SP we want have own LEX for each assignment.
              This is mostly because it is hard for several sp_instr_set
              and sp_instr_set_trigger instructions share one LEX.
              (Well, it is theoretically possible but adds some extra
               overhead on preparation for execution stage and IMO less
               robust).

              QQ: May be we should simply prohibit group assignments in SP?
            */
            if (Lex->sphead->reset_lex(thd))
              MYSQL_YYABORT;
            lex= thd->lex;

            /* Set new LEX as if we at start of set rule. */
	    lex->sql_command= SQLCOM_SET_OPTION;
	    mysql_init_select(lex);
	    lex->option_type=OPT_SESSION;
	    lex->var_list.empty();
            lex->one_shot_set= 0;
	    lex->sphead->m_tmp_query= lip->tok_start;
          }
        }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 9739 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;

          if (lex->sphead)
          {
            sp_head *sp= lex->sphead;

	    if (!lex->var_list.is_empty())
	    {
              /*
                We have assignment to user or system variable or
                option setting, so we should construct sp_instr_stmt
                for it.
              */
              LEX_STRING qbuff;
	      sp_instr_stmt *i;

              if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                         lex)))
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lip->ptr, if there was no lookahead,
                lip->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                qbuff.length= (uint) (lip->ptr - sp->m_tmp_query);
              else
                qbuff.length= (uint) (lip->tok_end - sp->m_tmp_query);

              if (!(qbuff.str= alloc_root(thd->mem_root, qbuff.length + 5)))
                MYSQL_YYABORT;

              strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                      qbuff.length);
              qbuff.length+= 4;
              i->m_query= qbuff;
              if (sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->sphead->restore_lex(thd);
          }
        }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 9787 "sql_yacc.yy"
    {}
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 9788 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 9789 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 9790 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 9794 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 9795 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 9799 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 9800 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 9801 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 9802 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 9806 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 9807 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 9808 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 9809 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 9818 "sql_yacc.yy"
    {
          LEX *lex=Lex;

          if ((yyvsp[(2) - (4)].variable).var == &trg_new_row_fake_var)
          {
            /* We are in trigger and assigning value to field of new row */
            Item *it;
            Item_trigger_field *trg_fld;
            sp_instr_set_trigger_field *sp_fld;
	    LINT_INIT(sp_fld);
            if ((yyvsp[(1) - (4)].var_type))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(4) - (4)].item))
              it= (yyvsp[(4) - (4)].item);
            else
            {
              /* QQ: Shouldn't this be field's default value ? */
              it= new Item_null();
            }

            DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
                        (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                         lex->trg_chistics.event == TRG_EVENT_UPDATE));
            if (!(trg_fld= new Item_trigger_field(Lex->current_context(),
                                                  Item_trigger_field::NEW_ROW,
                                                  (yyvsp[(2) - (4)].variable).base_name.str,
                                                  UPDATE_ACL, FALSE)) ||
                !(sp_fld= new sp_instr_set_trigger_field(lex->sphead->
                          	                         instructions(),
                                	                 lex->spcont,
							 trg_fld,
                                        	         it, lex)))
              MYSQL_YYABORT;

            /*
              Let us add this item to list of all Item_trigger_field
              objects in trigger.
            */
            lex->trg_table_fields.link_in_list((byte *)trg_fld,
                                    (byte **)&trg_fld->next_trg_field);

            if (lex->sphead->add_instr(sp_fld))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (4)].variable).var)
          { /* System variable */
            if ((yyvsp[(1) - (4)].var_type))
              lex->option_type= (yyvsp[(1) - (4)].var_type);
            lex->var_list.push_back(new set_var(lex->option_type, (yyvsp[(2) - (4)].variable).var,
                                    &(yyvsp[(2) - (4)].variable).base_name, (yyvsp[(4) - (4)].item)));
          }
          else
          {
            /* An SP local variable */
            sp_pcontext *ctx= lex->spcont;
            sp_variable_t *spv;
            sp_instr_set *sp_set;
            Item *it;
            if ((yyvsp[(1) - (4)].var_type))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            spv= ctx->find_variable(&(yyvsp[(2) - (4)].variable).base_name);

            if ((yyvsp[(4) - (4)].item))
              it= (yyvsp[(4) - (4)].item);
            else if (spv->dflt)
              it= spv->dflt;
            else
              it= new Item_null();
            if (it == NULL ||
                (sp_set= new sp_instr_set(lex->sphead->instructions(), ctx,
                                          spv->offset, it, spv->type, lex,
                                          TRUE)) == NULL ||
                lex->sphead->add_instr(sp_set))
              MYSQL_YYABORT;
          }
        }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 9902 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          if ((yyvsp[(1) - (5)].var_type))
            lex->option_type= (yyvsp[(1) - (5)].var_type);
          Item *item= new Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
          if (item == NULL)
            MYSQL_YYABORT;
          set_var *var= new set_var(lex->option_type,
                                    find_sys_var("tx_isolation"),
                                    &null_lex_str,
                                    item);
          if (var == NULL)
            MYSQL_YYABORT;
	  lex->var_list.push_back(var);
	}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 9921 "sql_yacc.yy"
    {
          Item_func_set_user_var *item= new Item_func_set_user_var((yyvsp[(2) - (4)].lex_str),(yyvsp[(4) - (4)].item));
          if (item == NULL)
            MYSQL_YYABORT;
          set_var_user *var= new set_var_user(item);
          if (var == NULL)
            MYSQL_YYABORT;
          Lex->var_list.push_back(var);
	}
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 9931 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
            set_var *var= new set_var((yyvsp[(3) - (6)].var_type), (yyvsp[(4) - (6)].variable).var, &(yyvsp[(4) - (6)].variable).base_name, (yyvsp[(6) - (6)].item));
            if (var == NULL)
              MYSQL_YYABORT;
	    lex->var_list.push_back(var);
	  }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 9939 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= Lex;
	  (yyvsp[(2) - (2)].charset)= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
          set_var_collation_client *var;
          var= new set_var_collation_client((yyvsp[(2) - (2)].charset),
                                            thd->variables.collation_database,
                                            (yyvsp[(2) - (2)].charset));
          if (var == NULL)
            MYSQL_YYABORT;
	  lex->var_list.push_back(var);
	}
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 9952 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
	    LEX_STRING names;

	    names.str= (char *)"names";
	    names.length= 5;
	    if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

	    MYSQL_YYABORT;
	  }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 9967 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  (yyvsp[(2) - (3)].charset)= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
	  (yyvsp[(3) - (3)].charset)= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : (yyvsp[(2) - (3)].charset);
	  if (!my_charset_same((yyvsp[(2) - (3)].charset),(yyvsp[(3) - (3)].charset)))
	  {
	    my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                     (yyvsp[(3) - (3)].charset)->name, (yyvsp[(2) - (3)].charset)->csname);
	    MYSQL_YYABORT;
	  }
          set_var_collation_client *var;
          var= new set_var_collation_client((yyvsp[(3) - (3)].charset),(yyvsp[(3) - (3)].charset),(yyvsp[(3) - (3)].charset));
          if (var == NULL)
            MYSQL_YYABORT;
	  lex->var_list.push_back(var);
	}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 9984 "sql_yacc.yy"
    {
	    THD *thd=YYTHD;
	    LEX_USER *user;
	    LEX *lex= Lex;	    
            sp_pcontext *spc= lex->spcont;
	    LEX_STRING pw;

	    pw.str= (char *)"password";
	    pw.length= 8;
	    if (spc && spc->find_variable(&pw))
	    {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
	      MYSQL_YYABORT;
	    }
	    if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
	      MYSQL_YYABORT;
	    user->host=null_lex_str;
	    user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
	    thd->lex->var_list.push_back(var);
	  }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 10008 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
	    Lex->var_list.push_back(var);
	  }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 10018 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
          sp_pcontext *spc= lex->spcont;
	  sp_variable_t *spv;

	  /* We have to lookup here since local vars can shadow sysvars */
	  if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
	  {
            /* Not an SP local variable */
	    sys_var *tmp=find_sys_var((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
	    if (!tmp)
	      MYSQL_YYABORT;
	    (yyval.variable).var= tmp;
	    (yyval.variable).base_name= null_lex_str;
            /*
              If this is time_zone variable we should open time zone
              describing tables 
            */
            if (tmp == &sys_time_zone &&
                lex->add_time_zone_tables_to_query_tables(YYTHD))
              MYSQL_YYABORT;
            else if (spc && tmp == &sys_autocommit)
            {
              /*
                We don't allow setting AUTOCOMMIT from a stored function
		or trigger.
              */
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            }
	  }
	  else
	  {
            /* An SP local variable */
	    (yyval.variable).var= NULL;
	    (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
	  }
	}
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 10056 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= &trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
	  }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 10099 "sql_yacc.yy"
    {
	    sys_var *tmp=find_sys_var((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
	    if (!tmp)
	      MYSQL_YYABORT;
	    if (!tmp->is_struct())
	      my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
	    (yyval.variable).var= tmp;
	    (yyval.variable).base_name.str=    (char*) "default";
	    (yyval.variable).base_name.length= 7;
	  }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 10112 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 10113 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 10114 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 10115 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 10119 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 10121 "sql_yacc.yy"
    {
	    (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
	        Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
	        Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
	      (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 10130 "sql_yacc.yy"
    {
	    (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, 
							  (yyvsp[(3) - (4)].lex_str).length) :
	      (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
	  }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 10141 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 10142 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 10144 "sql_yacc.yy"
    {
            (yyval.item)=new Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 10150 "sql_yacc.yy"
    {
            (yyval.item)=new Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 10156 "sql_yacc.yy"
    {
            (yyval.item)=new Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 10168 "sql_yacc.yy"
    {
	  LEX *lex= Lex;

	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command= SQLCOM_LOCK_TABLES;
	}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 10179 "sql_yacc.yy"
    {}
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 10192 "sql_yacc.yy"
    {
          thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
	  if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
	   MYSQL_YYABORT;
          /* If table is to be write locked, protect from a impending GRL. */
          if (lock_type >= TL_WRITE_ALLOW_WRITE)
            Lex->protect_against_global_read_lock= TRUE;
	}
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 10203 "sql_yacc.yy"
    { (yyval.num)=TL_READ_NO_INSERT; }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 10204 "sql_yacc.yy"
    { (yyval.num)=TL_WRITE_DEFAULT; }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 10205 "sql_yacc.yy"
    { (yyval.num)=TL_WRITE_LOW_PRIORITY; }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 10206 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 10211 "sql_yacc.yy"
    {
	  LEX *lex= Lex;

	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command= SQLCOM_UNLOCK_TABLES;
	}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 10222 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 10232 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command = SQLCOM_HA_OPEN;
	  if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
	    MYSQL_YYABORT;
	}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 10244 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command = SQLCOM_HA_CLOSE;
	  if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
	    MYSQL_YYABORT;
	}
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 10256 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->sphead)
	  {
	    my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
	    MYSQL_YYABORT;
	  }
	  lex->sql_command = SQLCOM_HA_READ;
	  lex->ha_rkey_mode= HA_READ_KEY_EXACT;	/* Avoid purify warnings */
          Item *one= new Item_int((int32) 1);
          if (one == NULL)
            MYSQL_YYABORT;
	  lex->current_select->select_limit= one;
	  lex->current_select->offset_limit= 0;
	  if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
	    MYSQL_YYABORT;
        }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 10273 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 10277 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 10278 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 10282 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 10283 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 10287 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 10288 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 10289 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 10290 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 10292 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->ha_read_mode = RKEY;
	  lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
	  if (!(lex->insert_list = new List_item))
	    MYSQL_YYABORT;
	}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 10298 "sql_yacc.yy"
    { }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 10302 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 10303 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 10304 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 10305 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 10306 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 10313 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 10318 "sql_yacc.yy"
    {
          LEX *lex= Lex;
	  lex->sql_command= SQLCOM_REVOKE;
          lex->type= 0;
        }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 10325 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->columns.elements)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
          }
	  lex->sql_command= SQLCOM_REVOKE;
          lex->type= TYPE_ENUM_FUNCTION;
          
        }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 10338 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->columns.elements)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
          }
	  lex->sql_command= SQLCOM_REVOKE;
          lex->type= TYPE_ENUM_PROCEDURE;
        }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 10350 "sql_yacc.yy"
    {
	  Lex->sql_command = SQLCOM_REVOKE_ALL;
	}
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 10357 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 10363 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->sql_command= SQLCOM_GRANT;
          lex->type= 0;
        }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 10371 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->columns.elements)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
          }
          lex->sql_command= SQLCOM_GRANT;
          lex->type= TYPE_ENUM_FUNCTION;
        }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 10384 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->columns.elements)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
          }
          lex->sql_command= SQLCOM_GRANT;
          lex->type= TYPE_ENUM_PROCEDURE;
        }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 10401 "sql_yacc.yy"
    { }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 10403 "sql_yacc.yy"
    { 
          Lex->all_privileges= 1; 
          Lex->grant= GLOBAL_ACLS;
        }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 10419 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 10419 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 10420 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 10420 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 10421 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 10421 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 10422 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 10422 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 10423 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 10424 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 10425 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 10426 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 10427 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 10428 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 10429 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 10430 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 10431 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 10432 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 10433 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 10434 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 10435 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 10436 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 10437 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 10438 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 10439 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 10440 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 10441 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 10442 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 10443 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 10444 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 10445 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 10450 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 10451 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 10461 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->x509_subject)
	  {
	    my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
	    MYSQL_YYABORT;
	  }
	  lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
	}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 10471 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->x509_issuer)
	  {
	    my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
	    MYSQL_YYABORT;
	  }
	  lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
	}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 10481 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->ssl_cipher)
	  {
	    my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
	    MYSQL_YYABORT;
	  }
	  lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
	}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 10494 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
            if (lex->copy_db_to(&lex->current_select->db, NULL))
              MYSQL_YYABORT;
	    if (lex->grant == GLOBAL_ACLS)
	      lex->grant = DB_ACLS & ~GRANT_ACL;
	    else if (lex->columns.elements)
	    {
	      my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 10508 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
	    if (lex->grant == GLOBAL_ACLS)
	      lex->grant = DB_ACLS & ~GRANT_ACL;
	    else if (lex->columns.elements)
	    {
	      my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 10521 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    lex->current_select->db = NULL;
	    if (lex->grant == GLOBAL_ACLS)
	      lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
	    else if (lex->columns.elements)
	    {
	      my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
	      MYSQL_YYABORT;
	    }
	  }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 10534 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
	      MYSQL_YYABORT;
	    if (lex->grant == GLOBAL_ACLS)
	      lex->grant =  TABLE_ACLS & ~GRANT_ACL;
	  }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 10546 "sql_yacc.yy"
    { if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user))) MYSQL_YYABORT;}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 10548 "sql_yacc.yy"
    {
	    if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
	      MYSQL_YYABORT;
	  }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 10556 "sql_yacc.yy"
    { if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user))) MYSQL_YYABORT;}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 10558 "sql_yacc.yy"
    {
	    if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
	      MYSQL_YYABORT;
	  }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 10567 "sql_yacc.yy"
    {
	   (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
	   if ((yyvsp[(4) - (4)].lex_str).length)
	   {
             if (YYTHD->variables.old_passwords)
             {
               char *buff= 
                 (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
               if (buff == NULL)
                 MYSQL_YYABORT;
               my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
               (yyvsp[(1) - (4)].lex_user)->password.str= buff;
               (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
             }
             else
             {
               char *buff= 
                 (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
               if (buff == NULL)
                 MYSQL_YYABORT;
               my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
               (yyvsp[(1) - (4)].lex_user)->password.str= buff;
               (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
             }
	  }
	}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 10594 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 10596 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 10602 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->grant |= lex->which_columns;
	}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 10614 "sql_yacc.yy"
    {
	  String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
          if (new_str == NULL)
            MYSQL_YYABORT;
	  List_iterator <LEX_COLUMN> iter(Lex->columns);
	  class LEX_COLUMN *point;
	  LEX *lex=Lex;
	  while ((point=iter++))
	  {
	    if (!my_strcasecmp(system_charset_info,
                               point->column.ptr(), new_str->ptr()))
		break;
	  }
	  lex->grant_tot_col|= lex->which_columns;
	  if (point)
	    point->rights |= lex->which_columns;
	  else
          {
            LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
            if (col == NULL)
              MYSQL_YYABORT;
	    lex->columns.push_back(col);
          }
	}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 10643 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 10647 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 10651 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 10655 "sql_yacc.yy"
    {
	    Lex->ssl_type=SSL_TYPE_NONE;
	  }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 10661 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 10665 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 10666 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 10670 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 10672 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
	  lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
	}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 10678 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
	  lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
	}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 10684 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
	  lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
	}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 10690 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
          lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
	}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 10699 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          lex->sql_command = SQLCOM_BEGIN;
          lex->start_transaction_opt= 0;
        }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 10704 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 10708 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 10709 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 10713 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 10714 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 10715 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 10719 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 10720 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 10721 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 10725 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 10726 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 10731 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_COMMIT;
	  lex->tx_chain= (yyvsp[(3) - (4)].num); 
	  lex->tx_release= (yyvsp[(4) - (4)].num);
	}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 10741 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_ROLLBACK;
	  lex->tx_chain= (yyvsp[(3) - (4)].num); 
	  lex->tx_release= (yyvsp[(4) - (4)].num);
	}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 10749 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
	  lex->ident= (yyvsp[(5) - (5)].lex_str);
	}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 10758 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_SAVEPOINT;
	  lex->ident= (yyvsp[(2) - (2)].lex_str);
	}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 10767 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
	  lex->ident= (yyvsp[(3) - (3)].lex_str);
	}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 10780 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 10786 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
	  if (lex->result && 
              (lex->result->get_nest_level() == -1 ||
               lex->result->get_nest_level() == lex->nest_level))
          {
            /* 
               Only the last SELECT can have INTO unless the INTO and UNION
               are at different nest levels. In version 5.1 and above, INTO
               will onle be allowed at top level.
            */
            my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
            MYSQL_YYABORT;
          }
	  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
          /* This counter shouldn't be incremented for UNION parts */
          Lex->nest_level--;
	  if (mysql_new_select(lex, 0))
	    MYSQL_YYABORT;
          mysql_init_select(lex);
	  lex->current_select->linkage=UNION_TYPE;
          if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
            lex->current_select->master_unit()->union_distinct=
                                                      lex->current_select;
	}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 10816 "sql_yacc.yy"
    {
          /*
	    Remove from the name resolution context stack the context of the
            last select in the union.
	  */
          Lex->pop_context();
        }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 10826 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 10827 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 10828 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 10832 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
	    LEX *lex= thd->lex;
	    DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
	    SELECT_LEX *sel= lex->current_select;
	    SELECT_LEX_UNIT *unit= sel->master_unit();
	    SELECT_LEX *fake= unit->fake_select_lex;
	    if (fake)
	    {
	      unit->global_parameters= fake;
	      fake->no_table_names_allowed= 1;
	      lex->current_select= fake;
	    }
	    thd->where= "global ORDER clause";
	  }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 10848 "sql_yacc.yy"
    {
	    THD *thd= YYTHD;
	    thd->lex->current_select->no_table_names_allowed= 0;
	    thd->where= "";
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 10861 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 10862 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 10863 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 10867 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 10874 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 10879 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 10884 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          if (lex->sql_command == (int)SQLCOM_HA_READ ||
              lex->sql_command == (int)SQLCOM_KILL ||
              lex->sql_command == (int)SQLCOM_PURGE)
	  {
            my_parse_error(ER(ER_SYNTAX_ERROR));
	    MYSQL_YYABORT;
	  }
          /* 
            we are making a "derived table" for the parenthesis
            as we need to have a lex level to fit the union 
            after the parenthesis, e.g. 
            (SELECT .. ) UNION ...  becomes 
            SELECT * FROM ((SELECT ...) UNION ...)
          */
	  if (mysql_new_select(Lex, 1))
	    MYSQL_YYABORT;
	}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 10905 "sql_yacc.yy"
    {
	  LEX *lex=Lex;
          lex->pop_context();
          SELECT_LEX *child= lex->current_select;
	  lex->current_select = lex->current_select->return_after_parsing();
          lex->nest_level--;
          lex->current_select->n_child_sum_items += child->n_sum_items;
          /*
            A subselect can add fields to an outer select. Reserve space for
            them.
          */
          lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
	}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 10928 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 10930 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 10932 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 10963 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
             */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 10977 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 10990 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 10992 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 10994 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 10999 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 11004 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 11006 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 11008 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 11013 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 11015 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 11020 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 11022 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 11024 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 11029 "sql_yacc.yy"
    {
	  THD *thd= YYTHD;
	  LEX *lex= thd->lex;
	  lex->sql_command= SQLCOM_CREATE_VIEW;
	  /* first table in list is target VIEW name */
	  if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
	    MYSQL_YYABORT;
	}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 11038 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 11043 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 11049 "sql_yacc.yy"
    {
            LEX_STRING *ls= (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING));
            if (ls == NULL)
              MYSQL_YYABORT;
	    Lex->view_list.push_back(ls);
	  }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 11056 "sql_yacc.yy"
    {
            LEX_STRING *ls= (LEX_STRING*) sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING));
            if (ls == NULL)
              MYSQL_YYABORT;
	    Lex->view_list.push_back(ls);
	  }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 11065 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->parsing_options.allows_variable= FALSE;
          lex->parsing_options.allows_select_into= FALSE;
          lex->parsing_options.allows_select_procedure= FALSE;
          lex->parsing_options.allows_derived= FALSE;
        }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 11073 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          lex->parsing_options.allows_variable= TRUE;
          lex->parsing_options.allows_select_into= TRUE;
          lex->parsing_options.allows_select_procedure= TRUE;
          lex->parsing_options.allows_derived= TRUE;
        }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 11084 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          char *stmt_beg= (lex->sphead ?
                           (char *)lex->sphead->m_tmp_query :
                           thd->query);
	  lex->create_view_select_start= (uint) ((yyvsp[(2) - (3)].simple_string) - stmt_beg);
	}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 11093 "sql_yacc.yy"
    {
          THD *thd=YYTHD;
          LEX *lex= thd->lex;
          char *stmt_beg= (lex->sphead ?
                           (char *)lex->sphead->m_tmp_query :
                           thd->query);
	  lex->create_view_select_start= (uint) ((yyvsp[(2) - (5)].simple_string) - stmt_beg);
	}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 11105 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 11107 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 11109 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 11111 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 11123 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;
	  sp_head *sp;
	 
	  if (lex->sphead)
	  {
	    my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
	    MYSQL_YYABORT;
	  }

	  if (!(sp= new sp_head()))
	    MYSQL_YYABORT;
	  sp->reset_thd_mem_root(thd);
	  sp->init(lex);
	  sp->m_type= TYPE_ENUM_TRIGGER;
          sp->init_sp_name(thd, (yyvsp[(3) - (12)].spname));
	
	  lex->stmt_definition_begin= (yyvsp[(2) - (12)].simple_string);
          lex->ident.str= (yyvsp[(7) - (12)].simple_string);
          lex->ident.length= (uint) ((yyvsp[(10) - (12)].simple_string) - (yyvsp[(7) - (12)].simple_string));

	  lex->sphead= sp;
	  lex->spname= (yyvsp[(3) - (12)].spname);
	  
	  bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
	  lex->sphead->m_chistics= &lex->sp_chistics;
	  lex->sphead->m_body_begin= lip->ptr;
          while (my_isspace(system_charset_info, lex->sphead->m_body_begin[0]))
            ++lex->sphead->m_body_begin;
	}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 11156 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  sp_head *sp= lex->sphead;
	  
	  lex->sql_command= SQLCOM_CREATE_TRIGGER;
	  sp->init_strings(YYTHD, lex);
	  sp->restore_thd_mem_root(YYTHD);
	
	  if (sp->is_not_allowed_in_function("trigger"))
	      MYSQL_YYABORT;
	
	  /*
	    We have to do it after parsing trigger body, because some of
	    sp_proc_stmt alternatives are not saving/restoring LEX, so
	    lex->query_tables can be wiped out.
	  */
	  if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(8) - (14)].table),
	                                         (LEX_STRING*) 0,
	                                         TL_OPTION_UPDATING,
                                                 TL_IGNORE))
	    MYSQL_YYABORT;
	}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 11189 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command = SQLCOM_CREATE_FUNCTION;
	    lex->udf.type= UDFTYPE_AGGREGATE;
	    lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
	    lex->udf.name = (yyvsp[(4) - (8)].lex_str);
	    lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
	    lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
	  }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 11200 "sql_yacc.yy"
    {
	    LEX *lex=Lex;
	    lex->sql_command = SQLCOM_CREATE_FUNCTION;
	    lex->udf.type= UDFTYPE_FUNCTION;
	    lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
	    lex->udf.name = (yyvsp[(3) - (7)].lex_str);
	    lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
	    lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
	  }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 11216 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
	    LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
	    sp_head *sp;

	    lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
	    lex->spname= (yyvsp[(3) - (4)].spname);

	    if (lex->sphead)
	    {
	      my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
	      MYSQL_YYABORT;
	    }

	    /* Order is important here: new - reset - init */
	    sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
	    sp->reset_thd_mem_root(thd);
	    sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

	    sp->m_type= TYPE_ENUM_FUNCTION;
	    lex->sphead= sp;
	    lex->sphead->m_param_begin= lip->tok_start+1;
	  }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 11245 "sql_yacc.yy"
    { /* $8 */
	    Lex->sphead->m_param_end= YYLIP->tok_start;
	  }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 11249 "sql_yacc.yy"
    { /* $10 */
	    LEX *lex= Lex;
	    lex->charset= NULL;
	    lex->length= lex->dec= NULL;
	    lex->interval_list.empty();
	    lex->type= 0;
	  }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 11257 "sql_yacc.yy"
    { /* $12 */
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

	    bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
	  }
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 11269 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
	    LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

	    lex->sphead->m_chistics= &lex->sp_chistics;
	    lex->sphead->m_body_begin= lip->tok_start;
	  }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 11278 "sql_yacc.yy"
    {
	    LEX *lex= Lex;
	    sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

	    lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
	    sp->init_strings(YYTHD, lex);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
	    sp->restore_thd_mem_root(YYTHD);
	  }
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 11299 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  sp_head *sp;

	  if (lex->sphead)
	  {
	    my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
	    MYSQL_YYABORT;
	  }

	  lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

	  /* Order is important here: new - reset - init */
	  sp= new sp_head();
          if (sp == NULL)
            MYSQL_YYABORT;
	  sp->reset_thd_mem_root(YYTHD);
	  sp->init(lex);
	  sp->m_type= TYPE_ENUM_PROCEDURE;
          sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

	  lex->sphead= sp;
	}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 11323 "sql_yacc.yy"
    {
	  Lex->sphead->m_param_begin= YYLIP->tok_start+1;
	}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 11328 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;

	  lex->sphead->m_param_end= lip->tok_start;
	  bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
	}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 11337 "sql_yacc.yy"
    {
          THD *thd= YYTHD;
	  LEX *lex= thd->lex;
          Lex_input_stream *lip= YYLIP;

	  lex->sphead->m_chistics= &lex->sp_chistics;
	  lex->sphead->m_body_begin= lip->tok_start;
	}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 11346 "sql_yacc.yy"
    {
	  LEX *lex= Lex;
	  sp_head *sp= lex->sphead;

	  sp->init_strings(YYTHD, lex);
	  lex->sql_command= SQLCOM_CREATE_PROCEDURE;
	  sp->restore_thd_mem_root(YYTHD);
	}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 11359 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_START;
      }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 11363 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_END;
      }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 11367 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_PREPARE;
      }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 11371 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_COMMIT;
      }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 11375 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_ROLLBACK;
      }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 11379 "sql_yacc.yy"
    {
        Lex->sql_command = SQLCOM_XA_RECOVER;
      }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 11385 "sql_yacc.yy"
    {
       MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
       if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
         MYSQL_YYABORT;
       Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
     }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 11392 "sql_yacc.yy"
    {
       MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
       if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
         MYSQL_YYABORT;
       Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
     }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 11399 "sql_yacc.yy"
    {
       MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
       if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
         MYSQL_YYABORT;
       Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
     }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 11407 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 11408 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 11412 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 11413 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 11414 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 11418 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 11419 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 11423 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 11424 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 11429 "sql_yacc.yy"
    { }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 11430 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;



/* Line 1455 of yacc.c  */
#line 33217 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



